#,Prompt,Test Cases
1,"implement a program that prompts the user for the answer to the Great Question of Life, the Universe and Everything, outputting Yes if the user inputs 42 or (case-insensitively) forty-two or forty two. Otherwise output No","Test Case 1:
Input: 42
Output: Yes

Test Case 2:
Input: Forty-Two
Output: Yes

Test Case 3:
Input: forty two
Output: Yes

Test Case 4:
Input: 50
Output: No

Test Case 5:
Input: FourTY TwO
Output: Yes"
2,"implement a program that prompts the user for a greeting. If the greeting starts with “hello”, output $0. If the greeting starts with an “h” (but not “hello”), output $20. Otherwise, output $100. Ignore any leading whitespace in the user’s greeting, and treat the user’s greeting case-insensitively.","Test Case 1:
Input: hello world
Output: $0

Test Case 2:
Input: Hola!
Output: $20

Test Case 3:
Input: hi there
Output: $20

Test Case 4:
Input: Hello Universe
Output: $0

Test Case 5:
Input: Greetings
Output: $100"
3,"implement a program that prompts the user for the name of a file and then outputs that file’s media type if the file’s name ends, case-insensitively, in any of these suffixes:

.gif
.jpg
.jpeg
.png
.pdf
.txt
.zip
If the file’s name ends with some other suffix or has no suffix at all, output application/octet-stream instead, which is a common default.
","Test Case 1:
Input: image.gif
Output: image/gif

Test Case 2:
Input: picture.JPG
Output: image/jpeg

Test Case 3:
Input: data.txt
Output: text/plain

Test Case 4:
Input: document.PDF
Output: application/pdf

Test Case 5:
Input: report.zip
Output: application/zip

Test Case 6:
Input: presentation.docx
Output: application/octet-stream"
4,"implement a program that prompts the user for an arithmetic expression and then calculates and outputs the result as a floating-point value formatted to one decimal place. Assume that the user’s input will be formatted as x y z, with one space between x and y and one space between y and z, wherein:

x is an integer
y is +, -, *, or /
z is an integer
For instance, if the user inputs 1 + 1, your program should output 2.0. Assume that, if y is /, then z will not be 0.","Test Case 1:
Input: 2 + 3
Output: 5.0

Test Case 2:
Input: 10 - 5
Output: 5.0

Test Case 3:
Input: 5 * 3
Output: 15.0

Test Case 4:
Input: 10 / 2
Output: 5.0

Test Case 5:
Input: -2 + 8
Output: 6.0"
5,"Suppose that you’re in a country where it’s customary to eat breakfast between 7:00 and 8:00, lunch between 12:00 and 13:00, and dinner between 18:00 and 19:00. Wouldn’t it be nice if you had a program that could tell you what to eat when?

Implement a program that prompts the user for a time and outputs whether it’s breakfast time, lunch time, or dinner time. If it’s not time for a meal, don’t output anything at all. Assume that the user’s input will be formatted in 24-hour time as #:## or ##:##. And assume that each meal’s time range is inclusive. For instance, whether it’s 7:00, 7:01, 7:59, or 8:00, or anytime in between, it’s time for breakfast.

Structure your program per the below, wherein convert is a function (that can be called by main) that converts time, a str in 24-hour format, to the corresponding number of hours as a float. For instance, given a time like ""7:30"" (i.e., 7 hours and 30 minutes), convert should return 7.5 (i.e., 7.5 hours).
","Test Case 1:
Input: 7:30
Output: It's breakfast time!

Test Case 2:
Input: 12:15
Output: It's lunch time!

Test Case 3:
Input: 19:00
Output: It's dinner time!

Test Case 4:
Input: 6:45
Output: (No output)

Test Case 5:
Input: 13:15
Output: (No output)"
6,"In some languages, it’s common to use camel case (otherwise known as “mixed case”) for variables’ names when those names comprise multiple words, whereby the first letter of the first word is lowercase but the first letter of each subsequent word is uppercase. For instance, whereas a variable for a user’s name might be called name, a variable for a user’s first name might be called firstName, and a variable for a user’s preferred first name (e.g., nickname) might be called preferredFirstName.

Python, by contrast, recommends snake case, whereby words are instead separated by underscores (_), with all letters in lowercase. For instance, those same variables would be called name, first_name, and preferred_first_name, respectively, in Python.

Implement a program that prompts the user for the name of a variable in camel case and outputs the corresponding name in snake case. Assume that the user’s input will indeed be in camel case.","Test Case 1:
Input: name
Expected Output: name

Test Case 2:
Input: firstName
Expected Output: first_name

Test Case 3:
Input: preferredFirstName
Expected Output: preferred_first_name

Test Case 4:
Input: someVariableName
Expected Output: some_variable_name

Test Case 5:
Input: myCamelCaseString
Expected Output: my_camel_case_string"
7,"Suppose that a machine sells bottles of Coca-Cola (Coke) for 50 cents and only accepts coins in these denominations: 25 cents, 10 cents, and 5 cents.

Implement a program that prompts the user to insert a coin, one at a time, each time informing the user of the amount due. Once the user has inputted at least 50 cents, output how many cents in change the user is owed. Assume that the user will only input integers, and ignore any integer that isn’t an accepted denomination.","Test Case 1:
Input: 25, 25
Expected Output: ""0 cents owed.""

Test Case 2:
Input: 10, 10, 10, 10, 10, 10
Expected Output: ""10 cents owed.""

Test Case 3:
Input: 25, 25, 10
Expected Output: ""10 cents owed.""

Test Case 4:
Input: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5
Expected Output: ""5 cents owed.""

Test Case 5:
Input: 50
Expected Output: ""0 cents owed."""
8,"When texting or tweeting, it’s not uncommon to shorten words to save time or space, as by omitting vowels, much like Twitter was originally called twttr. Implement a program that prompts the user for a str of text and then outputs that same text but with all vowels (A, E, I, O, and U) omitted, whether inputted in uppercase or lowercase.","Test Case 1:
Input: ""Hello, world!""
Expected Output: ""Hll, wrld!""

Test Case 2:
Input: ""OpenAI is the best!""
Expected Output: ""OpnAI s th bst!""

Test Case 3:
Input: ""I love to code in Python.""
Expected Output: "" lv t cd n Pythn.""

Test Case 4:
Input: ""A quick brown fox jumps over the lazy dog.""
Expected Output: "" qck brwn fx jmps vr th lzy dg.""

Test Case 5:
Input: ""AEIOU are vowels. aeiou are also vowels.""
Expected Output: ""R vwls. r ls vwls."""
9,"In Massachusetts, home to Harvard University, it’s possible to request a vanity license plate for your car, with your choice of letters and numbers instead of random ones. Among the requirements, though, are:

“All vanity plates must start with at least two letters.”
“… vanity plates may contain a maximum of 6 characters (letters or numbers) and a minimum of 2 characters.”
“Numbers cannot be used in the middle of a plate; they must come at the end. For example, AAA222 would be an acceptable … vanity plate; AAA22A would not be acceptable. The first number used cannot be a ‘0’.”
“No periods, spaces, or punctuation marks are allowed.”
Implement a program that prompts the user for a vanity plate and then output Valid if meets all of the requirements or Invalid if it does not. Assume that any letters in the user’s input will be uppercase. Structure your program per the below, wherein is_valid returns True if s meets all requirements and False if it does not. Assume that s will be a str. You’re welcome to implement additional functions for is_valid to call (e.g., one function per requirement).","Test Case 1:
Input: ""AB1234""
Expected Output: ""Valid""

Test Case 2:
Input: ""1AB234""
Expected Output: ""Invalid""

Test Case 3:
Input: ""AA""
Expected Output: ""Valid""

Test Case 4:
Input: ""A1B234""
Expected Output: ""Invalid""

Test Case 5:
Input: ""ABCDEFG""
Expected Output: ""Invalid"""
10,"The U.S. Food & Drug Adminstration (FDA) offers downloadable/printable posters that “show nutrition information for the 20 most frequently consumed raw fruits … in the United States. Retail stores are welcome to download the posters, print, display and/or distribute them to consumers in close proximity to the relevant foods in the stores.”

Implement a program that prompts consumers users to input a fruit (case-insensitively) and then outputs the number of calories in one portion of that fruit, per the FDA’s poster for fruits, which is also available as text. Capitalization aside, assume that users will input fruits exactly as written in the poster (e.g., strawberries, not strawberry). Ignore any input that isn’t a fruit.","Test Case 1:
Input: ""Apple""
Expected Output: ""130 calories""

Test Case 2:
Input: ""Banana""
Expected Output: ""110 calories""

Test Case 3:
Input: ""Strawberries""
Expected Output: ""50 calories""

Test Case 4:
Input: ""Pineapple""
Expected Output: ""50 calories""

Test Case 5:
Input: ""Grapes""
Expected Output: ""90 calories"""
11,"Fuel gauges indicate, often with fractions, just how much fuel is in a tank. For instance 1/4 indicates that a tank is 25% full, 1/2 indicates that a tank is 50% full, and 3/4 indicates that a tank is 75% full.

implement a program that prompts the user for a fraction, formatted as X/Y, wherein each of X and Y is an integer, and then outputs, as a percentage rounded to the nearest integer, how much fuel is in the tank. If, though, 1% or less remains, output E instead to indicate that the tank is essentially empty. And if 99% or more remains, output F instead to indicate that the tank is essentially full.

If, though, X or Y is not an integer, X is greater than Y, or Y is 0, instead prompt the user again. (It is not necessary for Y to be 4.) Be sure to catch any exceptions like ValueError or ZeroDivisionError.","Test Case 1:
Input: ""1/4""
Expected Output: ""25%""

Test Case 2:
Input: ""1/2""
Expected Output: ""50%""

Test Case 3:
Input: ""3/4""
Expected Output: ""75%""

Test Case 4:
Input: ""1/100""
Expected Output: ""E""

Test Case 5:
Input: ""99/100""
Expected Output: ""F"""
12,"One of the most popular places to eat in Harvard Square is Felipe’s Taqueria, which offers a menu of entrees, per the dict below, wherein the value of each key is a price in dollars:

{
    ""Baja Taco"": 4.00,
    ""Burrito"": 7.50,
    ""Bowl"": 8.50,
    ""Nachos"": 11.00,
    ""Quesadilla"": 8.50,
    ""Super Burrito"": 8.50,
    ""Super Quesadilla"": 9.50,
    ""Taco"": 3.00,
    ""Tortilla Salad"": 8.00
}
Implement a program that enables a user to place an order, prompting them for items, one per line, until the user inputs control-d (which is a common way of ending one’s input to a program). After each inputted item, display the total cost of all items inputted thus far, prefixed with a dollar sign ($) and formatted to two decimal places. Treat the user’s input case insensitively. Ignore any input that isn’t an item. Assume that every item on the menu will be titlecased.","Test Case 1:
Input: ""Baja Taco"", ""Burrito"", Control-D
Expected Output: ""$4.00"", ""$11.50""

Test Case 2:
Input: ""Super Burrito"", ""Taco"", ""Bowl"", Control-D
Expected Output: ""$8.50"", ""$11.50"", ""$20.00""

Test Case 3:
Input: ""Nachos"", ""Quesadilla"", ""Tortilla Salad"", Control-D
Expected Output: ""$11.00"", ""$19.50"", ""$27.50""

Test Case 4:
Input: ""Pasta"", Control-D
Expected Output: ""Ignored - not a menu item.""

Test Case 5:
Input: ""Taco"", ""taco"", ""TACO"", Control-D
Expected Output: ""$3.00"", ""$6.00"", ""$9.00"""
13,"Suppose that you’re in the habit of making a list of items you need from the grocery store.

Implement a program that prompts the user for items, one per line, until the user inputs control-d (which is a common way of ending one’s input to a program). Then output the user’s grocery list in all uppercase, sorted alphabetically by item, prefixing each line with the number of times the user inputted that item. No need to pluralize the items. Treat the user’s input case-insensitively.","Test Case 1:
Input: ""Milk"", ""Eggs"", ""Bread"", ""Bread"", Control-D
Expected Output:
""2 BREAD""
""1 EGGS""
""1 MILK""

Test Case 2:
Input: ""Apples"", ""Bananas"", ""Cereal"", ""Bananas"", ""cereal"", Control-D
Expected Output:
""1 APPLES""
""2 BANANAS""
""2 CEREAL""

Test Case 3:
Input: ""Coffee"", ""Tea"", ""Coffee"", ""coffee"", ""COFFEE"", Control-D
Expected Output:
""4 COFFEE""
""1 TEA""

Test Case 4:
Input: ""Potatoes"", ""Tomatoes"", ""Potatoes"", ""potatoes"", ""POTATOES"", ""Potatoes"", Control-D
Expected Output:
""4 POTATOES""
""1 TOMATOES""

Test Case 5:
Input: ""Cheese"", ""Ham"", ""Cheese"", ""Ham"", ""Cheese"", ""Ham"", ""Cheese"", ""Ham"", Control-D
Expected Output:
""4 CHEESE""
""4 HAM"""
14,"In the United States, dates are typically formatted in month-day-year order (MM/DD/YYYY), otherwise known as middle-endian order, which is arguably bad design. Dates in that format can’t be easily sorted because the date’s year comes last instead of first. Try sorting, for instance, 2/2/1800, 3/3/1900, and 1/1/2000 chronologically in any program (e.g., a spreadsheet). Dates in that format are also ambiguous. Harvard was founded on September 8, 1636, but 9/8/1636 could also be interpreted as August 9, 1636!

Fortunately, computers tend to use ISO 8601, an international standard that prescribes that dates should be formatted in year-month-day (YYYY-MM-DD) order, no matter the country, formatting years with four digits, months with two digits, and days with two digits, “padding” each with leading zeroes as needed.

In a file called outdated.py, implement a program that prompts the user for a date, anno Domini, in month-day-year order, formatted like 9/8/1636 or September 8, 1636, wherein the month in the latter might be any of the values in the list below:

[
    ""January"",
    ""February"",
    ""March"",
    ""April"",
    ""May"",
    ""June"",
    ""July"",
    ""August"",
    ""September"",
    ""October"",
    ""November"",
    ""December""
]
Then output that same date in YYYY-MM-DD format. If the user’s input is not a valid date in either format, prompt the user again. Assume that every month has no more than 31 days; no need to validate whether a month has 28, 29, 30, or 31 days.","Test Case 1:
Input: ""9/8/1636""
Expected Output: ""1636-09-08""

Test Case 2:
Input: ""September 8, 1636""
Expected Output: ""1636-09-08""

Test Case 3:
Input: ""12/25/2023""
Expected Output: ""2023-12-25""

Test Case 4:
Input: ""December 25, 2023""
Expected Output: ""2023-12-25""

Test Case 5:
Input: ""2/29/2000""
Expected Output: ""2000-02-29"""
15,"Because emoji aren’t quite as easy to type as text, at least on laptops and desktops, some programs support “codes,” whereby you can type, for instance, :thumbs_up:, which will be automatically converted to 👍. Some programs additionally support aliases, whereby you can more succinctly type, for instance, :thumbsup:, which will also be automatically converted to 👍.

See carpedm20.github.io/emoji/all.html?enableList=enable_list_alias for a list of codes with aliases.

Implement a program that prompts the user for a str in English and then outputs the “emojized” version of that str, converting any codes (or aliases) therein to their corresponding emoji.","Test Case 1:
Input: ""I am happy today :thumbs_up:""
Output: ""I am happy today 👍""

Test Case 2:
Input: ""It's raining :umbrella:""
Output: ""It's raining ☔""

Test Case 3:
Input: ""Having pizza for dinner :pizza:""
Output: ""Having pizza for dinner 🍕""

Test Case 4:
Input: ""Going for a run :runner:""
Output: ""Going for a run 🏃""

Test Case 5:
Input: ""I love my cat :cat:""
Output: ""I love my cat 🐱"""
16,"In The Sound of Music, there’s a song sung largely in English, So Long, Farewell, with these lyrics, wherein “adieu” means “goodbye” in French:

Adieu, adieu, to yieu and yieu and yieu

Of course, the line isn’t grammatically correct, since it would typically be written (with an Oxford comma) as:

Adieu, adieu, to yieu, yieu, and yieu

To be fair, “yieu” isn’t even a word; it just rhymes with “you”!

In a file called adieu.py, implement a program that prompts the user for names, one per line, until the user inputs control-d. Assume that the user will input at least one name. Then bid adieu to those names, separating two names with one and, three names with two commas and one and, and 
 names with 
 commas and one and, as in the below:

Adieu, adieu, to Liesl
Adieu, adieu, to Liesl and Friedrich
Adieu, adieu, to Liesl, Friedrich, and Louisa
Adieu, adieu, to Liesl, Friedrich, Louisa, and Kurt
Adieu, adieu, to Liesl, Friedrich, Louisa, Kurt, and Brigitta
Adieu, adieu, to Liesl, Friedrich, Louisa, Kurt, Brigitta, and Marta
Adieu, adieu, to Liesl, Friedrich, Louisa, Kurt, Brigitta, Marta, and Gretl","Test Case 1:
Input: John
Output: Adieu, adieu, to John

Test Case 2:
Input: John, Doe
Output: Adieu, adieu, to John and Doe

Test Case 3:
Input: John, Doe, Jane
Output: Adieu, adieu, to John, Doe, and Jane

Test Case 4:
Input: John, Doe, Jane, Smith
Output: Adieu, adieu, to John, Doe, Jane, and Smith

Test Case 5:
Input: John, Doe, Jane, Smith, Alice
Output: Adieu, adieu, to John, Doe, Jane, Smith, and Alice"
17,"I’m thinking of a number between 1 and 100…

What is it?
In a file called game.py, implement a program that:

Prompts the user for a level, 
. If the user does not input a positive integer, the program should prompt again.
Randomly generates an integer between 1 and 
, inclusive, using the random module.
Prompts the user to guess that integer. If the guess is not a positive integer, the program should prompt the user again.
If the guess is smaller than that integer, the program should output Too small! and prompt the user again.
If the guess is larger than that integer, the program should output Too large! and prompt the user again.
If the guess is the same as that integer, the program should output Just right! and exit.","Test Case 1:
Input:
Level: 10
Guesses: 5, 7, 10
Expected Output:
""Too small!"", ""Too small!"", ""Just right!""

Test Case 2:
Input:
Level: 20
Guesses: 25, 15, 20
Expected Output:
""Invalid guess!"", ""Too small!"", ""Just right!""

Test Case 3:
Input:
Level: 50
Guesses: 60, 45, 50
Expected Output:
""Too large!"", ""Too small!"", ""Just right!""

Test Case 4:
Input:
Level: 100
Guesses: 150, 90, 100
Expected Output:
""Invalid guess!"", ""Too small!"", ""Just right!""

Test Case 5:
Input:
Level: 30
Guesses: 35, 25, 30
Expected Output:
""Invalid guess!"", ""Too small!"", ""Just right!"""
18,"One of David’s first toys as a child, funny enough, was Little Professor, a “calculator” that would generate ten different math problems for David to solve. For instance, if the toy were to display 4 + 0 = , David would (hopefully) answer with 4. If the toy were to display 4 + 1 = , David would (hopefully) answer with 5. If David were to answer incorrectly, the toy would display EEE. And after three incorrect answers for the same problem, the toy would simply display the correct answer (e.g., 4 + 0 = 4 or 4 + 1 = 5).

In a file called professor.py, implement a program that:

Prompts the user for a level, 
. If the user does not input 1, 2, or 3, the program should prompt again.
Randomly generates ten (10) math problems formatted as X + Y = , wherein each of X and Y is a non-negative integer with 
 digits. No need to support operations other than addition (+).
Prompts the user to solve each of those problems. If an answer is not correct (or not even a number), the program should output EEE and prompt the user again, allowing the user up to three tries in total for that problem. If the user has still not answered correctly after three tries, the program should output the correct answer.
The program should ultimately output the user’s score: the number of correct answers out of 10.
Structure your program as follows, wherein get_level prompts (and, if need be, re-prompts) the user for a level and returns 1, 2, or 3, and generate_integer returns a randomly generated non-negative integer with level digits or raises a ValueError if level is not 1, 2, or 3:

import random


def main():
    ...


def get_level():
    ...


def generate_integer(level):
    ...


if __name__ == ""__main__"":
    main()","est Case 1:
Input:
Level: 1
Problems: 1 + 1, 2 + 2, 3 + 3, 4 + 4, 5 + 5, 6 + 6, 7 + 7, 8 + 8, 9 + 9, 0 + 0
User Answers: 2, 4, 6, 8, 10, 12, 14, 16, 18, 0
Expected Output:
Score: 10/10

Test Case 2:
Input:
Level: 2
Problems: 11 + 11, 22 + 22, 33 + 33, 44 + 44, 55 + 55, 66 + 66, 77 + 77, 88 + 88, 99 + 99, 00 + 00
User Answers: 22, 44, 66, 88, 110, 132, 154, 176, 198, 0
Expected Output:
Score: 10/10

Test Case 3:
Input:
Level: 3
Problems: 111 + 111, 222 + 222, 333 + 333, 444 + 444, 555 + 555, 666 + 666, 777 + 777, 888 + 888, 999 + 999, 000 + 000
User Answers: 222, 444, 666, 888, 1110, 1332, 1554, 1776, 1998, 0
Expected Output:
Score: 10/10

Test Case 4:
Input:
Level: 1
Problems: 1 + 1, 2 + 2, 3 + 3, 4 + 4, 5 + 5, 6 + 6, 7 + 7, 8 + 8, 9 + 9, 0 + 0
User Answers: 2, 5, 6, 8, 10, 12, 14, 16, 18, 0
Expected Output:
EEE, Score: 9/10

Test Case 5:
Input:
Level: 2
Problems: 11 + 11, 22 + 22, 33 + 33, 44 + 44, 55 + 55, 66 + 66, 77 + 77, 88 + 88, 99 + 99, 00 + 00
User Answers: 22, 45, 66, 88, 110, 132, 154, 176, 198, 0
Expected Output:
EEE, Score: 9/10
"
19,"implement a program that:

Prompts the user to input the number of Bitcoins,
, that they would like to buy. If that input cannot be converted to a float, the program should output an error message.
Queries the API for the CoinDesk Bitcoin Price Index at https://api.coindesk.com/v1/bpi/currentprice.json, which returns a JSON object, among whose nested keys is the current price of Bitcoin as a float.
Outputs the current cost of
Bitcoins in USD to four decimal places, using , as a thousands separator.","Test Case 1:
Input: 1
Expected Output:
The current cost of 1 Bitcoin(s) is $29,385.3229

Test Case 2:
Input: 2
Expected Output:
The current cost of 2 Bitcoin(s) is $58,770.6458

Test Case 3:
Input: 0.5
Expected Output:
The current cost of 0.5 Bitcoin(s) is $14,692.6615

Test Case 4:
Input: 10
Expected Output:
The current cost of 10 Bitcoin(s) is $293,853.2290

Test Case 5:
Input: abc (Invalid Input)
Expected Output:
Error: The input cannot be converted to a float."
20,"implement Setting up my twttr from Problem Set 2, restructuring your code per the below, wherein shorten expects a str as input and returns that same str but with all vowels (A, E, I, O, and U) omitted, whether inputted in uppercase or lowercase.

here is the Setting up my twttr from Problem Set 2:

When texting or tweeting, it’s not uncommon to shorten words to save time or space, as by omitting vowels, much like Twitter was originally called twttr. Implement a program that prompts the user for a str of text and then outputs that same text but with all vowels (A, E, I, O, and U) omitted, whether inputted in uppercase or lowercase.","Test Case 1:
Input: ""Hello, World!""
Expected Output: ""Hll, Wrld!""

Test Case 2:
Input: ""Setting up my twttr""
Expected Output: ""Sttng p my twttr""

Test Case 3:
Input: ""I love programming""
Expected Output: "" lv prgrmmng""

Test Case 4:
Input: ""OpenAI is awesome""
Expected Output: ""OpnAI s wsm""

Test Case 5:
Input: ""Artificial Intelligence""
Expected Output: ""rtfcl ntpllgnc"""
21,"implement Home Federal Savings Bank from Problem Set 1, restructuring your code per the below, wherein value expects a str as input and returns 0 if that str starts with “hello”, 20 if that str starts with an “h” (but not “hello”), or 100 otherwise, treating the str case-insensitively. You can assume that the string passed to the value function will not contain any leading spaces. Only main should call print.

here is the Home Federal Savings Bank from Problem Set 1:
In season 7, episode 24 of Seinfeld, Kramer visits a bank that promises to give $100 to anyone who isn’t greeted with a “hello.” Kramer is instead greeted with a “hey,” which he insists isn’t a “hello,” and so he asks for $100. The bank’s manager proposes a compromise: “You got a greeting that starts with an ‘h,’ how does $20 sound?” Kramer accepts.

implement a program that prompts the user for a greeting. If the greeting starts with “hello”, output $0. If the greeting starts with an “h” (but not “hello”), output $20. Otherwise, output $100. Ignore any leading whitespace in the user’s greeting, and treat the user’s greeting case-insensitively.","Test Case 1:
Input: ""Hello, World!""
Expected Output: $0

Test Case 2:
Input: ""hi there""
Expected Output: $20

Test Case 3:
Input: ""Hey, how are you?""
Expected Output: $20

Test Case 4:
Input: ""Good morning""
Expected Output: $100

Test Case 5:
Input: ""HELLO""
Expected Output: $0"
22,"implement Vanity Plates from Problem Set 2, restructuring your code per the below, wherein is_valid still expects a str as input and returns True if that str meets all requirements and False if it does not, but main is only called if the value of __name__ is ""__main__"":

here is the Vanity Plates from Problem Set 2:

In Massachusetts, home to Harvard University, it’s possible to request a vanity license plate for your car, with your choice of letters and numbers instead of random ones. Among the requirements, though, are:

“All vanity plates must start with at least two letters.”
“… vanity plates may contain a maximum of 6 characters (letters or numbers) and a minimum of 2 characters.”
“Numbers cannot be used in the middle of a plate; they must come at the end. For example, AAA222 would be an acceptable … vanity plate; AAA22A would not be acceptable. The first number used cannot be a ‘0’.”
“No periods, spaces, or punctuation marks are allowed.”
In plates.py, implement a program that prompts the user for a vanity plate and then output Valid if meets all of the requirements or Invalid if it does not. Assume that any letters in the user’s input will be uppercase. Structure your program per the below, wherein is_valid returns True if s meets all requirements and False if it does not. Assume that s will be a str. You’re welcome to implement additional functions for is_valid to call (e.g., one function per requirement).

def main():
    plate = input(""Plate: "")
    if is_valid(plate):
        print(""Valid"")
    else:
        print(""Invalid"")


def is_valid(s):
    ...


main()","Test Case 1:
Input: ""AB1234""
Expected Output: ""Valid""

Test Case 2:
Input: ""A1234""
Expected Output: ""Invalid"" (The plate does not start with at least two letters)

Test Case 3:
Input: ""ABCD12""
Expected Output: ""Valid""

Test Case 4:
Input: ""AB12CD""
Expected Output: ""Invalid"" (Numbers are used in the middle of the plate)

Test Case 5:
Input: ""ABCD123""
Expected Output: ""Invalid"" (The plate contains more than 6 characters)"
23,"implement Fuel Gauge from Problem Set 3, restructuring your code per the below, wherein:

convert expects a str in X/Y format as input, wherein each of X and Y is an integer, and returns that fraction as a percentage rounded to the nearest int between 0 and 100, inclusive. If X and/or Y is not an integer, or if X is greater than Y, then convert should raise a ValueError. If Y is 0, then convert should raise a ZeroDivisionError.
gauge expects an int and returns a str that is:
""E"" if that int is less than or equal to 1,
""F"" if that int is greater than or equal to 99,
and ""Z%"" otherwise, wherein Z is that same int.

here is the Fuel Gauge from Problem Set 3:

Fuel gauges indicate, often with fractions, just how much fuel is in a tank. For instance 1/4 indicates that a tank is 25% full, 1/2 indicates that a tank is 50% full, and 3/4 indicates that a tank is 75% full.

In a file called fuel.py, implement a program that prompts the user for a fraction, formatted as X/Y, wherein each of X and Y is an integer, and then outputs, as a percentage rounded to the nearest integer, how much fuel is in the tank. If, though, 1% or less remains, output E instead to indicate that the tank is essentially empty. And if 99% or more remains, output F instead to indicate that the tank is essentially full.

If, though, X or Y is not an integer, X is greater than Y, or Y is 0, instead prompt the user again. (It is not necessary for Y to be 4.) Be sure to catch any exceptions like ValueError or ZeroDivisionError.
","Test Case 1:
Input: ""1/4""
Expected Output: ""25%""

Test Case 2:
Input: ""1/2""
Expected Output: ""50%""

Test Case 3:
Input: ""3/4""
Expected Output: ""75%""

Test Case 4:
Input: ""1/100""
Expected Output: ""E""

Test Case 5:
Input: ""99/100""
Expected Output: ""F"""
24,"In Season 5, Episode 23 of NUMB3RS, a supposed IP address appears on screen, 275.3.6.28, which isn’t actually a valid IPv4 (or IPv6) address.

An IPv4 address is a numeric identifier that a device (or, on TV, hacker) uses to communicate on the internet, akin to a postal address in the real world, typically formatted in dot-decimal notation as #.#.#.#. But each # should be a number between 0 and 255, inclusive. Suffice it to say 275 is not in that range! If only NUMB3RS had validated the address in that scene!

In a file called numb3rs.py, implement a function called validate that expects an IPv4 address as input as a str and then returns True or False, respectively, if that input is a valid IPv4 address or not.","Test Case 1:
Input: ""192.168.1.1""
Expected Output: True

Test Case 2:
Input: ""255.255.255.255""
Expected Output: True

Test Case 3:
Input: ""275.3.6.28""
Expected Output: False (275 is not in the range 0-255)

Test Case 4:
Input: ""192.168.1.256""
Expected Output: False (256 is not in the range 0-255)

Test Case 5:
Input: ""192.168.1""
Expected Output: False (There are not 4 octets)"
25,"It turns out that (most) YouTube videos can be embedded in other websites, just like the above. For instance, if you visit https://youtu.be/xvFZjo5PgG0 on a laptop or desktop, click Share, and then click Embed, you’ll see HTML (the language in which web pages are written) like the below, which you could then copy into your own website’s source code, wherein iframe is an HTML “element,” and src is one of several HTML “attributes” therein, the value of which, between quotes, is https://www.youtube.com/embed/xvFZjo5PgG0.

<iframe width=""560"" height=""315"" src=""https://www.youtube.com/embed/xvFZjo5PgG0"" title=""YouTube video player"" frameborder=""0"" allow=""accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"" allowfullscreen></iframe>
Because some HTML attributes are optional, you could instead minimally embed just the below.

<iframe src=""https://www.youtube.com/embed/xvFZjo5PgG0""></iframe>
Suppose that you’d like to extract the URLs of YouTube videos that are embedded in pages (e.g., https://www.youtube.com/embed/xvFZjo5PgG0), converting them back to shorter, shareable youtu.be URLs (e.g., https://youtu.be/xvFZjo5PgG0) where they can be watched on YouTube itself.","Test Case 1:
Input: ""<iframe src=""https://www.youtube.com/embed/xvFZjo5PgG0\""></iframe>""
Expected Output: ""https://youtu.be/xvFZjo5PgG0""

Test Case 2:
Input: ""<iframe src=""https://www.youtube.com/embed/dQw4w9WgXcQ\""></iframe>""
Expected Output: ""https://youtu.be/dQw4w9WgXcQ""

Test Case 3:
Input: ""<iframe src=""https://www.youtube.com/embed/3tmd-ClpJxA\""></iframe>""
Expected Output: ""https://youtu.be/3tmd-ClpJxA""

Test Case 4:
Input: ""<iframe src=""https://www.youtube.com/embed/ktvTqknDobU\""></iframe>""
Expected Output: ""https://youtu.be/ktvTqknDobU""

Test Case 5:
Input: ""<iframe src=""https://www.youtube.com/embed/YQHsXMglC9A\""></iframe>""
Expected Output: ""https://youtu.be/YQHsXMglC9A"""
26,"Whereas most countries use a 24-hour clock, the United States tends to use a 12-hour clock. Accordingly, instead of “09:00 to 17:00”, many Americans would say they work “9:00 AM to 5:00 PM” (or “9 AM to 5 PM”), wherein “AM” is an abbreviation for “ante meridiem” and “PM” is an abbreviation for “post meridiem”, wherein “meridiem” means midday (i.e., noon).

Conversion Table
Just as “12:00 AM” in 12-hour format would be “00:00” in 24-hour format, so would “12:01 AM” through “12:59 AM” be “00:01” through “00:59”, respectively.

12-Hour
24-Hour
12:00 AM	00:00
1:00 AM	01:00
2:00 AM	02:00
3:00 AM	03:00
4:00 AM	04:00
5:00 AM	05:00
6:00 AM	06:00
7:00 AM	07:00
8:00 AM	08:00
9:00 AM	09:00
10:00 AM	10:00
11:00 AM	11:00
12:00 PM	12:00
1:00 PM	13:00
2:00 PM	14:00
3:00 PM	15:00
4:00 PM	16:00
5:00 PM	17:00
6:00 PM	18:00
7:00 PM	19:00
8:00 PM	20:00
9:00 PM	21:00
10:00 PM	22:00
11:00 PM	23:00
12:00 AM	00:00
In a file called working.py, implement a function called convert that expects a str in either of the 12-hour formats below and returns the corresponding str in 24-hour format (i.e., 9:00 to 17:00). Expect that AM and PM will be capitalized (with no periods therein) and that there will be a space before each. Assume that these times are representative of actual times, not necessarily 9:00 AM and 5:00 PM specifically.

9:00 AM to 5:00 PM
9 AM to 5 PM
Raise a ValueError instead if the input to convert is not in either of those formats or if either time is invalid (e.g., 12:60 AM, 13:00 PM, etc.). But do not assume that someone’s hours will start ante meridiem and end post meridiem; someone might work late and even long hours (e.g., 5:00 PM to 9:00 AM).","Test Case 1:
Input: ""9:00 AM to 5:00 PM""
Expected Output: ""09:00 to 17:00""

Test Case 2:
Input: ""1:00 PM to 11:00 PM""
Expected Output: ""13:00 to 23:00""

Test Case 3:
Input: ""12:00 AM to 12:00 PM""
Expected Output: ""00:00 to 12:00""

Test Case 4:
Input: ""5:00 PM to 9:00 AM""
Expected Output: ""17:00 to 09:00""

Test Case 5:
Input: ""13:00 PM to 5:00 PM"" (Invalid Input)
Expected Output: Error: The input is not in the correct format or the time is invalid.
"
27,"It’s not uncommon, in English, at least, to say “um” when trying to, um, think of a word. The more you do it, though, the more noticeable it tends to be!

In a file called um.py, implement a function called count that expects a line of text as input as a str and returns, as an int, the number of times that “um” appears in that text, case-insensitively, as a word unto itself, not as a substring of some other word. For instance, given text like hello, um, world, the function should return 1. Given text like yummy, though, the function should return 0.","Test Case 1:
Input: ""hello, um, world""
Expected Output: 1

Test Case 2:
Input: ""yummy""
Expected Output: 0

Test Case 3:
Input: ""Um, I think, um, I need to, um, think about it.""
Expected Output: 3

Test Case 4:
Input: ""UM is the abbreviation for University of Michigan.""
Expected Output: 1

Test Case 5:
Input: ""I am unsure about the outcome.""
Expected Output: 0"
28,"When creating a Google Form that prompts users for a short answer (or paragraph), it’s possible to enable response validation and require that the user’s input match a regular expression. For instance, you could require that a user input an email address with a regex like this one:

^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$
In a file called response.py, using either validator-collection or validators from PyPI, implement a program that prompts the user for an email address via input and then prints Valid or Invalid, respectively, if the input is a syntatically valid email address. You may not use re. And do not validate whether the email address’s domain name actually exists.","Test Case 1:
Input: john.doe@example.com
Expected Output: Valid

Test Case 2:
Input: john.doe@example
Expected Output: Invalid

Test Case 3:
Input: john.doe@.com
Expected Output: Invalid

Test Case 4:
Input: john.doe@exa_mple.com
Expected Output: Valid

Test Case 5:
Input: john.doe@exa mple.com
Expected Output: Invalid"
29,"Assuming there are 365 days in a year, there are 525600 minutes in that same year (because there are 24 hours in a day and 60 minutes in an hour). But how many minutes are there in two or more years? Well, it depends on how many of those are leap years with 366 days, per the Gregorian calendar, as some of them could have 1440 additional minutes. In fact, how many minutes has it been since you were born? Well, that, too, depends on how many leap years there have been since! There is an algorithm for such, but let’s not reinvent that wheel. Let’s use a library instead. Fortunately, Python comes with a datetime module that has a class called date that can help, per docs.python.org/3/library/datetime.html#date-objects.

In a file called seasons.py, implement a program that prompts the user for their date of birth in YYYY-MM-DD format and then sings prints how old they are in minutes, rounded to the nearest integer, using English words instead of numerals, just like the song from Rent, without any and between words. Since a user might not know the time at which they were born, assume, for simplicity, that the user was born at midnight (i.e., 00:00:00) on that date. And assume that the current time is also midnight. In other words, even if the user runs the program at noon, assume that it’s actually midnight, on the same date. Use datetime.date.today to get today’s date, per docs.python.org/3/library/datetime.html#datetime.date.today.","Test Case 1:
Input: 2000-01-01
Expected Output: Twenty three million, seven hundred and forty five thousand, six hundred and forty minutes

Test Case 2:
Input: 1990-07-15
Expected Output: Seventeen million, two hundred and twenty eight thousand, eight hundred and eighty minutes

Test Case 3:
Input: 2023-07-31
Expected Output: Zero minutes

Test Case 4:
Input: 1985-12-25
Expected Output: Nineteen million, seven hundred and seventy eight thousand, four hundred and forty minutes

Test Case 5:
Input: 1970-01-01
Expected Output: Twenty eight million, one hundred and five thousand, six hundred and forty minutes"
30,Write a program that uses a print function to say 'hello world' as shown in 'Desired Output'.,"Test Case 1:

Input: None
Expected Output: hello world
Test Case 2:

Input: None
Expected Output: hello world
Test Case 3:

Input: None
Expected Output: hello world
Test Case 4:

Input: None
Expected Output: hello world
Test Case 5:

Input: None
Expected Output: hello world"
31,Write a program that uses input to prompt a user for their name and then welcomes them. Note that input will pop up a dialog box. Enter Sarah in the pop-up box when you are prompted so your output will match the desired output.,"Test Case 1:
Input: ""John""
Expected Output: ""Hello, John""

Test Case 2:
Input: ""Alice""
Expected Output: ""Hello, Alice""

Test Case 3:
Input: ""Bob""
Expected Output: ""Hello, Bob""

Test Case 4:
Input: ""Charlie""
Expected Output: ""Hello, Charlie""

Test Case 5:
Input: ""David""
Expected Output: ""Hello, David"""
32,Write a program to prompt the user for hours and rate per hour using input to compute gross pay. Use 35 hours and a rate of 2.75 per hour to test the program (the pay should be 96.25). You should use input to read a string and float() to convert the string to a number. Do not worry about error checking or bad user data.,"Test Case 1:
Input: Hours = 35, Rate = 2.75
Expected Output: Gross Pay = 96.25

Test Case 2:
Input: Hours = 40, Rate = 10
Expected Output: Gross Pay = 400

Test Case 3:
Input: Hours = 50, Rate = 20
Expected Output: Gross Pay = 1000

Test Case 4:
Input: Hours = 0, Rate = 100
Expected Output: Gross Pay = 0

Test Case 5:
Input: Hours = 100, Rate = 0
Expected Output: Gross Pay = 0"
33,Write a program to prompt the user for hours and rate per hour using input to compute gross pay. Pay the hourly rate for the hours up to 40 and 1.5 times the hourly rate for all hours worked above 40 hours. Use 45 hours and a rate of 10.50 per hour to test the program (the pay should be 498.75). You should use input to read a string and float() to convert the string to a number. Do not worry about error checking the user input - assume the user types numbers properly.,"Test Case 1:
Input: Hours = 45, Rate = 10.50
Expected Output: Gross Pay = 498.75

Test Case 2:
Input: Hours = 40, Rate = 10
Expected Output: Gross Pay = 400.00

Test Case 3:
Input: Hours = 50, Rate = 20
Expected Output: Gross Pay = 1100.00

Test Case 4:
Input: Hours = 30, Rate = 100
Expected Output: Gross Pay = 3000.00

Test Case 5:
Input: Hours = 60, Rate = 10
Expected Output: Gross Pay = 700.00"
34,"Write a program to prompt for a score between 0.0 and 1.0. If the score is out of range, print an error. If the score is between 0.0 and 1.0, print a grade using the following table:
Score Grade
>= 0.9 A
>= 0.8 B
>= 0.7 C
>= 0.6 D
< 0.6 F
If the user enters a value out of range, print a suitable error message and exit. For the test, enter a score of 0.85.","Test Case 1:
Input: 0.85
Output: B

Test Case 2:
Input: 0.95
Output: A

Test Case 3:
Input: 0.75
Output: C

Test Case 4:
Input: 1.2
Output: Error: Score out of range. Please enter a value between 0.0 and 1.0

Test Case 5:
Input: -0.5
Output: Error: Score out of range. Please enter a value between 0.0 and 1.0"
35,Write a program to prompt the user for hours and rate per hour using input to compute gross pay. Pay should be the normal rate for hours up to 40 and time-and-a-half for the hourly rate for all hours worked above 40 hours. Put the logic to do the computation of pay in a function called computepay() and use the function to do the computation. The function should return a value. Use 45 hours and a rate of 10.50 per hour to test the program (the pay should be 498.75). You should use input to read a string and float() to convert the string to a number. Do not worry about error checking the user input unless you want to - you can assume the user types numbers properly. Do not name your variable sum or use the sum() function.,"Test Case 1:
Input: Hours = 45, Rate per Hour = 10.50
Output: Gross Pay = 498.75

Test Case 2:
Input: Hours = 40, Rate per Hour = 8.75
Output: Gross Pay = 350.0

Test Case 3:
Input: Hours = 50, Rate per Hour = 12.0
Output: Gross Pay = 630.0

Test Case 4:
Input: Hours = 38, Rate per Hour = 9.25
Output: Gross Pay = 350.5

Test Case 5:
Input: Hours = 55, Rate per Hour = 11.50
Output: Gross Pay = 632.5"
36,"Write a program that repeatedly prompts a user for integer numbers until the user enters 'done'. Once 'done' is entered, print out the largest and smallest of the numbers. If the user enters anything other than a valid number catch it with a try/except and put out an appropriate message and ignore the number. Enter 7, 2, bob, 10, and 4 and match the output below.","Test Case 1:
Input: 5, 8, 3, 1, 6, done
Output: Largest number: 8, Smallest number: 1

Test Case 2:
Input: 10, 12, 15, done
Output: Largest number: 15, Smallest number: 10

Test Case 3:
Input: 20, 30, 40, 50, 60, done
Output: Largest number: 60, Smallest number: 20

Test Case 4:
Input: 100, 200, 300, 400, 500, done
Output: Largest number: 500, Smallest number: 100

Test Case 5:
Input: done
Output: No numbers entered."
37,"old_balance = ""500.45""
deposit = ""10""

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Imagine you're writing code for an ATM that accepts cash
#deposits. You need to update the customer's balance based
#on a deposit amount. However, both the old balance and the
#deposit are given as strings.
#
#Write code below that will print the new balance after the
#deposit is processed. This should be printed along with
#the following text labeling the amount:
#
#The new balance is: 510.45
#
#Note that the old balance will always include change, but
#the deposit will never include change because the ATM has
#no coin slot, only a slot for paper money.
#
#With the initial values of the variables shown above, your
#code should print the text shown on line 17.


#Add your code here!","Test Case 1:
Input:
old_balance = ""100.00""
deposit = ""50""
Output:
""The new balance is: 150.00""

Test Case 2:
Input:
old_balance = ""500.45""
deposit = ""10""
Output:
""The new balance is: 510.45""

Test Case 3:
Input:
old_balance = ""0.00""
deposit = ""100""
Output:
""The new balance is: 100.00""

Test Case 4:
Input:
old_balance = ""1234.56""
deposit = ""200""
Output:
""The new balance is: 1434.56""

Test Case 5:
Input:
old_balance = ""1000.99""
deposit = ""0""
Output:
""The new balance is: 1000.99"""
38,"balance = 500
income = 200
price = 1000
months = 6

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#You're thinking of buying a new computer. The variables
#above represent the balance of your bank account, your
#monthly disposable income, the total price of the computer,
#and the number of months that the retailer will give you to
#pay off the computer.
#
#You can buy the computer if either (a) you can afford to
#buy the computer in cash right now (balance is greater than
#price), or (b) you can afford the monthly payments (income
#is greater than price divided by months).
#
#In other words, if a computer cost $1200 and you spread it
#out over 12 months, you would need your monthly available
#income to be at least $100 to buy the computer, or you
#would need your current bank balance to be at least $1200.
#
#Add some code below that will print True if you're able to
#afford the computer given the values above, and False if you
#are not.


#Add your code below!








","Test Case 1:
Input:
price = 1000
months = 6
balance = 1200
income = 100
Output:
True

Test Case 2:
Input:
price = 2000
months = 10
balance = 1500
income = 200
Output:
True

Test Case 3:
Input:
price = 5000
months = 10
balance = 4000
income = 400
Output:
False

Test Case 4:
Input:
price = 800
months = 4
balance = 500
income = 250
Output:
True

Test Case 5:
Input:
price = 1200
months = 12
balance = 1000
income = 80
Output:
False"
39,"hot = True
cold = False
rainy = True
windy = False
snowy = False

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Earlier, you wrote a program that made clothing
#recommendations based on the weather. Your program could
#specifically recommend a jacket, boots, flip-flips, or a
#tshirt based on whether it was hot, cold, rainy, windy, or
#snowy.
#
#Let's add some accessories to that program: a hat, gloves,
#umbrella, and a scarf.
#
#Specifically, the program should recommend:
#
# - a hat if it's cold, or if it's hot but not rainy (cold
#   and rainy still means a hat, though).
# - gloves if it's cold and either snowy or rainy.
# - an umbrella if it's hot, snowy, or rainy.
# - a scarf if it's cold and windy or cold and snowy
#   unless it's rainy. Rain means no scarf regardless of
#   whether it's cold, windy, or snowy.
#
#Write some code below that will print four lines, one for
#each of the four types of clothing. The lines should look
#like this:
#
#Hat: True
#Gloves: True
#Umbrella: False
#Scarf: False
#
#The values (True and False) will differ based on the
#values assigned to hot, cold, windy, snowy, and rainy
#at the start of the program.


#Add your code here!





















","Test Case 1:
Input:
hot = True
cold = False
rainy = True
windy = False
snowy = False
Output:
Hat: True
Gloves: False
Umbrella: True
Scarf: False

Test Case 2:
Input:
hot = False
cold = True
rainy = True
windy = True
snowy = False
Output:
Hat: True
Gloves: True
Umbrella: True
Scarf: False

Test Case 3:
Input:
hot = False
cold = True
rainy = False
windy = True
snowy = True
Output:
Hat: True
Gloves: True
Umbrella: True
Scarf: True

Test Case 4:
Input:
hot = True
cold = False
rainy = False
windy = False
snowy = False
Output:
Hat: True
Gloves: False
Umbrella: False
Scarf: False

Test Case 5:
Input:
hot = False
cold = True
rainy = False
windy = False
snowy = True
Output:
Hat: True
Gloves: True
Umbrella: True
Scarf: True"
40,"import datetime
start_date = datetime.date(2017, 2, 16)
end_date = datetime.date(2017, 2, 16)
start_time = datetime.time(4, 30, 0)
end_time = datetime.time(4, 30, 17)

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Above, there are four variables: start_date, end_date,
#start_time, and end_time. start_date and start_time together
#represent a certain time on a certain date, and end_date and
#end_time represent a different time on a different date.
#
#Add some code below that will print True if the end time
#occurs after the start time. Print False if the end time
#occurs before the start time. For example, 11:15:00 on
#01/01/2017 would be before 09:00:00 on 01/05/2017, which
#would be before 11:25:00 on 01/05/2017.
#
#Note that you may use dot notation to access the individual
#parts of the dates and times. You can access the hour,
#minute, and seconds from start_time with start_time.hour,
#start_time.minute, and start_time.second. You can access
#the year, month, and day of start_date with
#start_date.year, start_date.month, and start_date.day. You
#can use the same syntax to access the parts of end_date.
#Note that Python uses 24-hour time.
#
#Hint: You may use conditionals to solve this if you want,
#but you don't need to.
#
#Hint 2: You can use relational operators with both dates
#and times. start_time < end_time is True if start_time is
#before end_time. start_date >= end_date is True if
#start_date is later than end_date, or the same date. With
#this, you can avoid using dot notation altogether if
#you'd like.


#Add your code here!





















","Test Case 1:
Input:
start_date = datetime.date(2017, 2, 16)
end_date = datetime.date(2017, 2, 16)
start_time = datetime.time(4, 30, 0)
end_time = datetime.time(4, 30, 17)
Output:
True

Test Case 2:
Input:
start_date = datetime.date(2023, 1, 1)
end_date = datetime.date(2023, 1, 2)
start_time = datetime.time(22, 30, 0)
end_time = datetime.time(1, 30, 0)
Output:
True

Test Case 3:
Input:
start_date = datetime.date(2023, 1, 2)
end_date = datetime.date(2023, 1, 1)
start_time = datetime.time(1, 30, 0)
end_time = datetime.time(22, 30, 0)
Output:
False

Test Case 4:
Input:
start_date = datetime.date(2023, 1, 2)
end_date = datetime.date(2023, 1, 2)
start_time = datetime.time(12, 0, 0)
end_time = datetime.time(12, 0, 0)
Output:
False

Test Case 5:
Input:
start_date = datetime.date(2023, 1, 2)
end_date = datetime.date(2023, 1, 2)
start_time = datetime.time(1, 30, 0)
end_time = datetime.time(22, 30, 0)
Output:
True"
41,"goal = 50000
rate = 0.05
years = 5

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Earlier, we created a program that would calculate the
#value of an investment account after a certain period of
#time using the formula Amount = Principal * e^(Rate * Time).
#
#Let's revisit that, but let's flip the question around.
#Instead of asking, ""What will the value of this account
#be?"", let's instead ask, ""How much do I need to invest to
#have a certain amount by a certain year?"" For example,
#""How much do I need to invest to have $50,000 in 5 years
#at 5% (0.05) interest?""
#
#Mathematically, the formula for this is:
#
#  goal / e ^ (rate * number of years) = principal
#
#Add some code below that will print the amount of principal
#needed to reach the given savings goal within the number of
#years and interest rate specified.
#
#In printing your response, you should round the answer to
#two decimal places. Remember, you can do this with this
#code (assuming that your principal is stored in a variable
#called 'principal'): rounded_principal = round(principal, 2)
#
#Remember, you can access e using math.e as long as you don't
#change the next line.","Test Case 1:
Input:
goal = 50000
rate = 0.05
years = 5
Output:
Principal needed: 39283.56

Test Case 2:
Input:
goal = 100000
rate = 0.07
years = 10
Output:
Principal needed: 50834.86

Test Case 3:
Input:
goal = 5000
rate = 0.03
years = 3
Output:
Principal needed: 4596.05

Test Case 4:
Input:
goal = 150000
rate = 0.06
years = 7
Output:
Principal needed: 104499.31

Test Case 5:
Input:
goal = 20000
rate = 0.02
years = 2
Output:
Principal needed: 19269.25"
42,"principal = 40000
rate = 0.05
years = 5
goal = 50000

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Last problem, we calculated how much money a person would
#have to invest to reach a certain savings goal. Now, let's
#modify that to instead take a principal, interest rate,
#number of years, and savings goal, and report whether or not
#the person will meet their savings goal.
#
#Add some code below that will calculate whether the
#investment described by the values above will meet the given
#goal. If it will, print True. If it will not, print False.
#
#As a reminder, the formula for the value of an account after
#a given time (in number of years) is:
#
#  Current Value = principal * e ^ (rate * number of years)
#
#Remember, you can access e using math.e as long as you don't
#change the next line. You don't need to worry about rounding
#on this problem.","Test Case 1:
Input:
principal = 40000
rate = 0.05
years = 5
goal = 50000
Output:
True

Test Case 2:
Input:
principal = 40000
rate = 0.03
years = 10
goal = 50000
Output:
False

Test Case 3:
Input:
principal = 10000
rate = 0.07
years = 5
goal = 20000
Output:
True

Test Case 4:
Input:
principal = 50000
rate = 0.05
years = 7
goal = 70000
Output:
True

Test Case 5:
Input:
principal = 30000
rate = 0.04
years = 5
goal = 40000
Output:
False"
43,"spouse_1 = ""Caitlin""
spouse_2 = ""David""
month = ""November""
day = 3
year = 2012
time = ""5:00PM""

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.
#
#The variables above give some information about a wedding:
#the names of the spouses and the month, day, year, and time
#of the wedding.
#
#Add some code that will write the text to appear on a wedding
#invitation based on these values. For the values shown above,
#this would read:
#
#You are cordially invited to attend the wedding of Caitlin and David, to take place on November 3, 2012 at 5:00PM.
#
#Note that all components of this statement are required: start
#""You are cordially invited to attend the wedding of "", followed
#by spouse_1's name, followed by "" and "", followed by spouse_2's
#name, then a comma and space, followed by ""to take place on "",
#followed by the month, a space, the day, a comma and space, the
#year, a space, the word ""at"", a space, the time, and then a
#period.
#
#HINT: Copy the sentence below and replace the current values
#(Caitlin, David, November, etc.) with variables to reduce the
#risk of typoes throwing off your answers.","Test Case 1:
Input:
spouse_1 = ""Caitlin""
spouse_2 = ""David""
month = ""November""
day = 3
year = 2012
time = ""5:00PM""
Output:
""You are cordially invited to attend the wedding of Caitlin and David, to take place on November 3, 2012 at 5:00PM.""

Test Case 2:
Input:
spouse_1 = ""John""
spouse_2 = ""Emily""
month = ""June""
day = 10
year = 2022
time = ""3:00PM""
Output:
""You are cordially invited to attend the wedding of John and Emily, to take place on June 10, 2022 at 3:00PM.""

Test Case 3:
Input:
spouse_1 = ""Alice""
spouse_2 = ""Bob""
month = ""December""
day = 31
year = 2023
time = ""11:00AM""
Output:
""You are cordially invited to attend the wedding of Alice and Bob, to take place on December 31, 2023 at 11:00AM.""

Test Case 4:
Input:
spouse_1 = ""Emma""
spouse_2 = ""Jake""
month = ""March""
day = 5
year = 2024
time = ""2:30PM""
Output:
""You are cordially invited to attend the wedding of Emma and Jake, to take place on March 5, 2024 at 2:30PM.""

Test Case 5:
Input:
spouse_1 = ""Sophia""
spouse_2 = ""Liam""
month = ""August""
day = 15
year = 2025
time = ""4:00PM""
Output:
""You are cordially invited to attend the wedding of Sophia and Liam, to take place on August 15, 2025 at 4:00PM."""
44,"amount = 17

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.
#
#The variable above describes an amount of money measured in
#dollars. Imagine you want to select the bills (1-dollar bills,
#5-dollar bills, 10-dollar bills, etc.) that make up that
#amount of money. For example, 17 dollars is one $10, one $5,
#and two $1s.
#
#Write a program that will print out the bills needed to
#arrive at the amount shown above. Assume that we always want
#the maximum number of large bills: for example, for 17 dollars,
#we want one $10, one $5, and two $1s, not three $5s and two $1s.
#You may assume that the largest bill you have on hand is a
#$50-dollar bill.
#
#Your code should print the following (with the correct numbers
#based on the value of amount):
#
#Fifties: 0
#Twenties: 0
#Tens: 1
#Fives: 1
#Ones: 2","Test Case 1:
Input: amount = 88
Output:
Fifties: 1
Twenties: 1
Tens: 1
Fives: 1
Ones: 3

Test Case 2:
Input: amount = 121
Output:
Fifties: 2
Twenties: 1
Tens: 0
Fives: 0
Ones: 1

Test Case 3:
Input: amount = 53
Output:
Fifties: 1
Twenties: 0
Tens: 0
Fives: 0
Ones: 3

Test Case 4:
Input: amount = 3
Output:
Fifties: 0
Twenties: 0
Tens: 0
Fives: 0
Ones: 3

Test Case 5:
Input: amount = 0
Output:
Fifties: 0
Twenties: 0
Tens: 0
Fives: 0
Ones: 0"
45,"message = ""lol""
punct = ""!""
num = 3

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Using the values of message, punct, and num, print
#a string that looks like the one below if message = ""lol"",
#punct = ""!"", and num = 3:
#
# !!!lollollol!!!lollollol!!!lollollol!!!
#
#Specifically, it should start by printing punct num
#times, then print message num times, repeat that entire
#process num times, and then print punct num times
#again.
#
#Here are a couple other examples:
#
# message = ""bbl"", punct = "":"", num = 1 -> :bbl:
# message = ""bbq"", punct = ""?"", num = 2 -> ""??bbqbbq??bbqbbq??
# message = ""brb"", punct = ""."", num = 4 -> ....brbbrbbrbbrb....brbbrbbrbbrb....brbbrbbrbbrb....brbbrbbrbbrb....","Test Case 1:
Input:
message = ""hi""
punct = ""*""
num = 2
Output:
""hihihihi**""

Test Case 2:
Input:
message = ""bye""
punct = ""#""
num = 3
Output:
""###byebyebye###byebyebye###byebyebye###""

Test Case 3:
Input:
message = ""run""
punct = "".""
num = 1
Output:
"".run.""

Test Case 4:
Input:
message = ""jump""
punct = ""&""
num = 4
Output:
""&&&&jumpjumpjumpjump&&&&jumpjumpjumpjump&&&&jumpjumpjumpjump&&&&jumpjumpjumpjump&&&&""

Test Case 5:
Input:
message = ""play""
punct = ""%""
num = 5
Output:
""%%%%%playplayplayplayplay%%%%%playplayplayplayplay%%%%%playplayplayplayplay%%%%%playplayplayplayplay%%%%%playplayplayplayplay%%%%%"""
46,"num = 3

#-----------------------------------------------------------
#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Write some code that calculates the cube of the number
#given by num. Then, print that number num^2 (num squared)
#times in a row, with no spaces or line breaks in between.
#
#For example, if num is 3, then your code would print:
#
# 272727272727272727
#
#That 27 9 times. 3 squared is 9, 3 cubed is 27, and so
#it prints 27 9 times.
#
#Note: these directions are slightly different from the
#preview we posted! You should be printing num^3 num^2
#times, not printing num^2 num^3 times.","Test Case 1:
Input:
num = 2
Output:
""8888""

Test Case 2:
Input:
num = 4
Output:
""6464646464646464646464646464""

Test Case 3:
Input:
num = 1
Output:
""1""

Test Case 4:
Input:
num = 5
Output:
""125125125125125125125125125125125125125125125125125""

Test Case 5:
Input:
num = 6
Output:
""216216216216216216216216216216216216216216216216216216216216216216216216216216216216216216216216216216216216216216"""
47,"current_day = 31
current_month = 5
current_year = 2018
birth_day = 19
birth_month = 12
birth_year = 1990

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Given the current date and birth date held by the variables
#above, calculate and print this person's current age. Note
#that if their birth date has not yet passed this year, your
#result would be one less than if it has.
#
#For example, with the variables given above, the person
#would turn 28 on December 12th, 2018. So, as of May 31st,
#2018, they are 27.","Test Case 1:
Input:
current_day = 31
current_month = 5
current_year = 2018
birth_day = 19
birth_month = 12
birth_year = 1990
Output:
27

Test Case 2:
Input:
current_day = 31
current_month = 12
current_year = 2018
birth_day = 19
birth_month = 12
birth_year = 1990
Output:
28

Test Case 3:
Input:
current_day = 18
current_month = 12
current_year = 2018
birth_day = 19
birth_month = 12
birth_year = 1990
Output:
27

Test Case 4:
Input:
current_day = 1
current_month = 1
current_year = 2000
birth_day = 1
birth_month = 1
birth_year = 1990
Output:
10

Test Case 5:
Input:
current_day = 31
current_month = 12
current_year = 1999
birth_day = 1
birth_month = 1
birth_year = 1990
Output:
9"
48,"#Imagine you're writing the software that controls the speed
#of a ceiling fan. The user changes the fan's speed by
#pulling a string. Pulling the string increases the fan's =
#speed by 1, unless it's already at the maximum speed. If
#it's already at the maximum speed, it changes the speed
#back to 0.
#
#Write a function called pullString. pullString should take
#two parameters: a current speed, and a maximum speed, both
#integers. pullString should return the new fan speed
#according to the reasoning above.

#You may assume that the input will be integers. You should
#also assume that the fan's speed *can* equal the maximum
#speed, but it *cannot* exceed the maximum speed. You may
#thus assume that you will never be given a currentSpeed
#higher than maxSpeed.","Test Case 1:
Input:
currentSpeed = 0
maxSpeed = 3
Output:
1

Test Case 2:
Input:
currentSpeed = 3
maxSpeed = 3
Output:
0

Test Case 3:
Input:
currentSpeed = 2
maxSpeed = 3
Output:
3

Test Case 4:
Input:
currentSpeed = 0
maxSpeed = 0
Output:
0

Test Case 5:
Input:
currentSpeed = 5
maxSpeed = 10
Output:
6"
49,"#A common formula in probability and statistics is the
#formula for the number of possible combinations of r
#objects from a set of n objects. For example, the question,
#""How many possible 2-card hands can you deal from a deck of
#52 unique cards?"" is saying, ""How many combinations of 2
#can you make from a set of 52?""
#
#The formula for the number of combinations of length r from
#a set of n objects is:
#
#  numCombinations = n! / r!(n-r)!
#
#The ! mark is the symbol for factorial. Factorial means the
#product of the number times every number between itself and
#1. For example, 5! is 120: 5 * 4 * 3 * 2 * 1 = 120.
#
#Write a function called numCombinations with two parameters:
#n, the number of objects from which to choose, and r, the
#number of objects to choose. numCombinations should return
#the number of combinations according to the formula above.
#Don't worry if you don't fully understand what combinations
#are -- just focus on implementing a function that solves
#that formula given n and r.
#
#You may *not* use Python's built-in factorial method to
#complete this; you should implement that yourself.
#
#Hint: We'd suggest writing two functions: factorial() and
#numCombinations(). Then, call factorial() in your code for 
#numCombinations(). You don't have to do this, but it will
#make your answer a little easier!
#
#Hint 2: Remember to put parentheses around the denominator.","Test Case 1:
Input:
n = 5
r = 2
Output:
10

Test Case 2:
Input:
n = 52
r = 2
Output:
1326

Test Case 3:
Input:
n = 10
r = 5
Output:
252

Test Case 4:
Input:
n = 6
r = 6
Output:
1

Test Case 5:
Input:
n = 10
r = 0
Output:
1"
50,"#An object's weight is defined as its mass times the gravity
#on the planet where it sits. We tend to assume that the
#planet is earth and its gravity is 9.807 m/s^2. However,
#sometimes we might want to calculate an object's weight on
#a different planet.
#
#Write a function called calculateWeight. calculateWeight
#should have three parameters: mass, planet, and gravity.
#planet and gravity should be keyword parameters: by
#default, they should take the values ""Earth"" (a string) and
#9.807 (a float). However, they should be able to be
#overriden to let us calculate weights on other planets.
#
#The function should return a string that looks like this:
#""A [mass] kg object weighs [weight] Newtons on [planet].""
#You should round the weight to two decimal points. You
#can do this by calling round() on the weight, e.g.
#roundedWeight = round(weight, 2). The 2 dictates how
#many decimal points should be included.
#
#For example:
#
# calculateWeight(10.0) ->
#       ""A 10.0 kg object weighs 98.07 Newtons on Earth.""
#
# calculateWeight(5.0, planet=""Jupiter"", gravity=24.79) ->
#       ""A 5.0 kg object weighs 24.79 Newtons on Jupiter.""
#
#Hint: If you're having trouble with creating the string to
#return, here's the first part:
#result = ""A "" + str(mass) + "" kg object weighs "" ...","Test Case 1:
Input:
mass = 10.0
Output:
""A 10.0 kg object weighs 98.07 Newtons on Earth.""

Test Case 2:
Input:
mass = 5.0, planet=""Jupiter"", gravity=24.79
Output:
""A 5.0 kg object weighs 123.95 Newtons on Jupiter.""

Test Case 3:
Input:
mass = 50.0, planet=""Mars"", gravity=3.721
Output:
""A 50.0 kg object weighs 186.05 Newtons on Mars.""

Test Case 4:
Input:
mass = 100.0, planet=""Venus"", gravity=8.87
Output:
""A 100.0 kg object weighs 887.0 Newtons on Venus.""

Test Case 5:
Input:
mass = 7.5, planet=""Moon"", gravity=1.622
Output:
""A 7.5 kg object weighs 12.17 Newtons on Moon."""
51,"#Imagine you're writing a cash register application. To make
#interaction easier on the user, it doesn't have separate
#areas for passwords, PIN numbers, or cash totals --
#instead, it looks at what the cashier enters and infers
#whether it's their PIN number, their password, or the cash
#total for a transaction.
#
#The register makes this decision with the following rules:
#
# - If the cashier entered only digits, then it's a PIN
#   number.
# - If the cashier entered a decimal number, then it's the
#   transaction amount.
# - If the cashier entered anything else, then it's their
#   password.
#
#Write a function named interpretCashier. interpretCashier
#should take one parameter as input, which will always be
#a string initially.
#
# - If the string entered represents a PIN number, return
#   ""PIN"". 
# - If the string entered represents a transaction amount,
#   return ""Transaction"".
# - If the string entered represents a password, return
#   ""Password"".
#
#Hint: There is a very easy way to do this, and a very hard
#way to do this. Remember, this test is on control
#structures, not strings.","Test Case 1:
Input:
""1234""
Output:
""PIN""

Test Case 2:
Input:
""123.45""
Output:
""Transaction""

Test Case 3:
Input:
""hello123""
Output:
""Password""

Test Case 4:
Input:
""23.45.67""
Output:
""Password""

Test Case 5:
Input:
""0.0""
Output:
""Transaction"""
52,"#Write a function called remainder. remainder should take
#two parameters: a dividend and a divisor. It should return
#the remainder when you divide the dividend by the divisor.
#
#For example:
# remainder(9, 3) -> 0
# remainder(8, 3) -> 2
# remainder(7, 3) -> 1
# remainder(6, 3) -> 0
#
#You may not use Python's built-in modulus operator. The
#symbol for that operator should not appear anywhere in your
#code.
#
#You may assume both dividend and divisor will be greater
#than 0","Test Case 1:
Input:
(9, 3)
Output:
0

Test Case 2:
Input:
(8, 3)
Output:
2

Test Case 3:
Input:
(7, 3)
Output:
1

Test Case 4:
Input:
(6, 3)
Output:
0

Test Case 5:
Input:
(10, 2)
Output:
0"
53,"#Write a function called sortString. sortString should take
#one parameter as input, a string. If the input is not a
#string, sortString should return the string ""Not a string!""
#If the input is a string, sortString should return a four-
#line string according to the following directions:
#
# - On the first line should be each capital letter in the
#   string, in the order in which they appear.
# - On the second line should be each lower-case letter in
#   the string, in the order in which they appear.
# - On the third line should be each punctuation mark or
#   numeral in the string, in the order in which they
#   appear.
# - On the fourth line should be an integer representing
#   how many spaces were found in the string.
#
#There should be no other text in the string that you output
#besides these four lines and the line breaks between them.
#To insert a line break into a string, insert the character
#sequence ""\n"". For example, line1 + ""\n"" + line2 would give
#a string with the first two lines and a line break in
#between. You may assume that the string will only be
#letters, spaces, and punctuation -- no numbers, line breaks,
#tabs, etc.
#
#For example, calling sortString(""Hello, world!!1"" should
#return: ""H\nelloworld\n,!!1\n1"", which would look like this
#when printed:
#H
#elloworld
#,!!1
#1
#
#Hint: Use the ord() function! Remember, when you pass a
#one-character string into ord(), it returns a number.
#
# - Lower-case letters will return a number from 97 to 122.
# - Upper-case letters will return a number from 65 to 90.
# - Puncutation marks and numbers will return a number from
#   33 to 64.
# - Spaces will return the number 32.
#
#So, you can check if a letter is lowercase by seeing if
#ord(letter) is between 97 and 122 (inclusive; 97 is 'a',
#122 is 'z'), and so on for uppercase and punctuation.
#
#Hint 2: Build up three separate strings (one for
#uppercase, one for lowercase, and one for punctuation),
#then combine them and the count of the number of spaces
#into a string to return at the end.","Test Case 1:
Input:
""Hello, world!!1""
Output:
""H\nelloworld\n,!!1\n1""

Test Case 2:
Input:
""Good Morning, John!""
Output:
""GMJ\noodorningohn\n,!\n2""

Test Case 3:
Input:
""Bye Bye, Baby!""
Output:
""BBB\nyebyeaby\n,!\n3""

Test Case 4:
Input:
""I Love Python Programming!""
Output:
""ILPP\noveythonrogramming\n!\n4""

Test Case 5:
Input:
12345
Output:
""Not a string!"""
54,"int1 = 7
int2 = 5

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Write a conditional that will print one of the following
#messages:
#
# - If the value of int1 is greater than the value of int2,
#   print ""int1 is greater"" (without the quotes).
# - If the value of int2 is greater than the value of int1,
#   print ""int2 is greater"" (without the quotes).
# - If the two values are equal, print ""int1 and int2 are
#   equal"" (without the quotes).
#
#With the initial values above, this should print ""int1 is
#greater"".","Test Case 1:
Input:
int1 = 7
int2 = 5
Output:
""int1 is greater""

Test Case 2:
Input:
int1 = 5
int2 = 7
Output:
""int2 is greater""

Test Case 3:
Input:
int1 = 5
int2 = 5
Output:
""int1 and int2 are equal""

Test Case 4:
Input:
int1 = 0
int2 = 0
Output:
""int1 and int2 are equal""

Test Case 5:
Input:
int1 = -1
int2 = 1
Output:
""int2 is greater"""
55,"driver_speed = 57
speed_limit = 55
school_zone = True

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Write a conditional that decides the price of a speed ticket
#depending on the driver's speed, the speed limit, and
#whether or not they were in a school zone.
#
#The reasoning that determines the price of the ticket is:
#
# - $100 for speeding at all (any instance where driver_speed
#   is greater than speed limit).
# - $10 dollars per mile over the speed limit the driver was
#   going.
# - 2x the value otherwise if the violation occurred in a
#   school zone, as represented by the value of school_zone.
#
#Print the cost of the speeding ticket. If the driver was not
#speeding, print $0.
#
#Under the original values above, this should print $240:
#$100 for speeding, $20 for going 2mph above the speed limit,
#and x2 for it occurring in a school zone.","Test Case 1:
Input:
driver_speed = 57
speed_limit = 55
school_zone = True
Output:
240

Test Case 2:
Input:
driver_speed = 57
speed_limit = 55
school_zone = False
Output:
120

Test Case 3:
Input:
driver_speed = 55
speed_limit = 55
school_zone = True
Output:
0

Test Case 4:
Input:
driver_speed = 70
speed_limit = 55
school_zone = True
Output:
450

Test Case 5:
Input:
driver_speed = 70
speed_limit = 55
school_zone = False
Output:
250"
56,"minimum = 5
maximum = 10

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.
#
#Write a loop (we suggest a for loop) that prints all the
#numbers from minimum to maximum. Each number should be
#printed on its own line, and you should print both minimum
#and maxmimum themselves. You may assume minimum will always
#be less than maximum.
#
#With the initial values for minimum and maximum above, this
#should print 5, 6, 7, 8, 9, 10 -- each number would be on
#its own line, no commas.","Test Case 1:
Input:
minimum = 1
maximum = 5
Output:
1
2
3
4
5

Test Case 2:
Input:
minimum = 7
maximum = 7
Output:
7

Test Case 3:
Input:
minimum = -5
maximum = 0
Output:
-5
-4
-3
-2
-1
0

Test Case 4:
Input:
minimum = 0
maximum = 3
Output:
0
1
2
3

Test Case 5:
Input:
minimum = 10
maximum = 12
Output:
10
11
12"
57,"n = 5

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Write some code that will find and print the factorial of
#the number given by n above. You may not import anything
#from the Python math library.
#
#Hint: Use a while loop, but be careful to avoid an infinite
#loop!","Test Case 1:
Input:
n = 5
Output:
120

Test Case 2:
Input:
n = 1
Output:
1

Test Case 3:
Input:
n = 0
Output:
1

Test Case 4:
Input:
n = 7
Output:
5040

Test Case 5:
Input:
n = 10
Output:
3628800"
58,"#Write a function called find_weight. find_weight should
#take one parameter, a float that represents the mass of
#an object in kilograms. It should return the weight of
#the object on earth.
#
#Remember, the formula for weight is mass * gravity. You
#should use 9.81 as the value for gravity on earth. If
#you find Python is making rounding errors, try reversing
#the order in which you multiply the numbers.","Test Case 1:
Input:
find_weight(10.0)
Output:
98.1

Test Case 2:
Input:
find_weight(0.0)
Output:
0.0

Test Case 3:
Input:
find_weight(5.5)
Output:
53.955

Test Case 4:
Input:
find_weight(100.0)
Output:
981.0

Test Case 5:
Input:
find_weight(76.2)
Output:
747.662"
59,"#Write a function called find_weight. find_weight should
#take one positional parameter, a float that represents
#the mass of an object in kilograms. It should return the
#weight of the object.
#
#You should assume that the planet is earth and that the
#acceleration due to gravity is 9.81; however, find_weight
#should also have a keyword parameter called gravity that
#allows this value to be overriden to calculate an
#object's weight on other planets.
#
#Remember, the formula for weight is mass * gravity. If
#you find Python is making rounding errors, try reversing
#the order in which you multiply the numbers.","Test Case 1:
Input:
find_weight(10.0)
Output:
98.1

Test Case 2:
Input:
find_weight(0.0)
Output:
0.0

Test Case 3:
Input:
find_weight(5.5, gravity=24.79) # Jupiter's gravity
Output:
136.345

Test Case 4:
Input:
find_weight(100.0, gravity=3.7) # Mars's gravity
Output:
370.0

Test Case 5:
Input:
find_weight(76.2, gravity=1.622) # Moon's gravity
Output:
123.6924"
60,"list_sum = 7
list_count = 0

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.
#
#The variables above give the sum of all numbers in a list,
#and the count of how many numbers were in the list. Your
#goal is to find their average.
#
#However, if list_count is 0, then we can't divide list_sum
#by list_count. In this case, you should print ""Can't divide
#by zero!"" Otherwise, you should print the average.
#
#Note that you may not use any conditionals in your answer.
#Note also that you should not assume that every error that
#occurs is a divide-by-zero error: any other errors should
#not be caught.","Test Case 1:
Input:
list_sum = 15
list_count = 3
Output:
5.0

Test Case 2:
Input:
list_sum = 0
list_count = 0
Output:
""Can't divide by zero!""

Test Case 3:
Input:
list_sum = 100
list_count = 25
Output:
4.0

Test Case 4:
Input:
list_sum = -50
list_count = 5
Output:
-10.0

Test Case 5:
Input:
list_sum = 123456
list_count = 1
Output:
123456.0"
61,"input_string = ""1234""

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Imagine that you're writing some software for a check-out
#register. The software tries to guess what information was
#entered based on its structure:
#
# - If the information entered as all numbers, then it's a
#   PIN number.
# - If the information entered was a number with a decimal,
#   it's a transaction amount.
# - If the information entered was neither, it's a password.
#
#Write some code to figure out which of these types of
#information the inputted string is. Print ""PIN"" for PIN
#number, ""amount"" for transaction amount, or ""password"" for
#password. You may assume these are the only three possible
#outcomes.
#
#Hint: You can do this however you want, but error handling
#will be easier than using conditionals.","Test Case 1:
Input:
input_string = ""1234""
Output:
""PIN""

Test Case 2:
Input:
input_string = ""12.34""
Output:
""amount""

Test Case 3:
Input:
input_string = ""password123""
Output:
""password""

Test Case 4:
Input:
input_string = ""7890""
Output:
""PIN""

Test Case 5:
Input:
input_string = ""word123.45""
Output:
""password"""
62,"#Write a function called check_date. check_date should
#require two positional parameters: a string representing
#the name of a month, and an integer representing a date.
#check_date should also have a keyword parameter called
#is_leap_year, assumed to be False, representing whether or
#not it's a leap year.
#
#Return True if the date is a valid calendar date. Return
#False if it is not. A date may not be a valid calendar
#date if the month isn't a real month, or if that date does
#not exist for that month. You can see some examples at the
#end of this file.
#
#Remember: 30 days has September, April, June, and November.
#All the rest have 31, except February, which has 28, until
#Leap Year gives it 29.
#
#You may assume that day will be greater than 0 (you don't
#need to check negative or zero values for day).","Test Case 1:
Input:
month = ""February"", day = 29, is_leap_year = True
Output:
True

Test Case 2:
Input:
month = ""February"", day = 29, is_leap_year = False
Output:
False

Test Case 3:
Input:
month = ""April"", day = 30, is_leap_year = False
Output:
True

Test Case 4:
Input:
month = ""April"", day = 31, is_leap_year = False
Output:
False

Test Case 5:
Input:
month = ""September"", day = 31, is_leap_year = False
Output:
False
"
63,"#Write a function called get_capitals. get_capitals should
#accept one parameter, a string. It should return a string
#containing only the capital letters from the original
#string: no lower-case letters, numbers, punctuation marks,
#or spaces.
#
#Remember, capital letters have ordinal numbers between 65
#(""A"") and 90 (""Z""). You may use the ord() function to get
#a letter's ordinal number.
#
#Your function should be able to handle strings with no
#capitals (return an empty string) and strings with all
#capitals (return the original string). You may assume
#we'll only use regular characters (no emojis, formatting
#characters, etc.).","Test Case 1:
Input:
""HelloWorld""
Output:
""HW""

Test Case 2:
Input:
""Python""
Output:
""P""

Test Case 3:
Input:
""JAVA""
Output:
""JAVA""

Test Case 4:
Input:
""languagemodel""
Output:
""""

Test Case 5:
Input:
""OpenAI""
Output:
""OAI"""
64,"#Write a function called sum_evens. sum_evens should take
#two parameters: a minimum and a maximum. It should add up
#all the even numbers between minimum and maximum and
#return the sum.
#
#sum_evens should work inclusively: both the minimum and
#the maximum should be added if they are even. For example,
#sum_evens(2, 6) -> 12 (2 + 4 + 6 = 12)","Test Case 1:
Input:
2, 6
Output:
12

Test Case 2:
Input:
1, 10
Output:
30

Test Case 3:
Input:
7, 9
Output:
8

Test Case 4:
Input:
0, 0
Output:
0

Test Case 5:
Input:
20, 30
Output:
150"
65,"#The Collatz Conjecture is a famous sequence in mathematics
#proposed by Lothar Collatz. It proceeds as follows:
#
#Start with any number. If the number is even, divide it by
#2. If the number is odd, triple it and add one. Repeat.
#Eventually, no matter what number you begin with, this
#sequence will converge on 1 (and if you continue repeating
#it, you'll repeat 1-4-2 infinitely).
#
#For example, imagine we started with the number 21:
#5 is odd, so 5 * 3 + 1 = 16
#16 is even, so 16 / 2 = 8
#8 is even, so 8 / 2 = 4
#4 is even, so 4 / 2 = 2
#2 is even, so 2 / 1 = 1
#
#Starting with 5, this sequence converges on 1 in 5
#iterations: 5 to 16, 16 to 8, 8 to 4, 4 to 2, and 2 to 1.
#
#Implement a function called collatz. collatz should take
#as input an integer, and return the number of iterations
#it takes for the Collatz sequence to reach 1 from that
#number. For example, collatz(5) would return 5 because
#it took 5 iterations to converge on 1.","Test Case 1:
Input: 5
Output: 5

Test Case 2:
Input: 10
Output: 6

Test Case 3:
Input: 1
Output: 0

Test Case 4:
Input: 6
Output: 8

Test Case 5:
Input: 11
Output: 14"
66,"#Write a function called is_prime. is_prime should take
#as input one integer. It should return True if the integer
#is prime, False if the integer is not prime. You may
#assume the integer will be greater than 2 and less than
#1000.
#
#Remember, a prime number is one into which no number is
#divisible besides 1 and itself. For example, 6 is not
#prime because it is divisible by 2 and 3. 7 is prime
#because it is only divisible by 1 and itself.
#
#HINT: Remember, once you find a _single_ factor of the
#number, you can return False: it only takes one factor
#to make the number not prime.","Test Case 1:
Input: 7
Output: True

Test Case 2:
Input: 12
Output: False

Test Case 3:
Input: 13
Output: True

Test Case 4:
Input: 100
Output: False

Test Case 5:
Input: 997
Output: True"
67,"#Write a function called password_check. password_check should
#take as input a single string. It should return a boolean:
#True if the password is a valid password according to the rules
#below, False if it is not.
#
#A string is a valid password if it meets ALL the following
#conditions:
#
# - It must be at least 8 characters long.
# - It must contain at least one character from each of the
#   following categories: capital letters, lower-case letters,
#   numbers, and punctuation. For punctuation, the following
#   punctuation marks are acceptable: !@#$%&()-_[]{};':"",./<>?
# - It may not contain any characters that do not fit into the
#   four categories above. This includes any punctuation marks
#   not listed in the bullet point above, spaces, and any other
#   character.","Test Case 1:
Input: ""Password1!""
Output: True

Test Case 2:
Input: ""password1""
Output: False

Test Case 3:
Input: ""PASSWORD1!""
Output: False

Test Case 4:
Input: ""Password!""
Output: False

Test Case 5:
Input: ""Pass1!""
Output: False"
68,"#Write a function called count_characters. count_characters
#should take as input a single string, and return a
#dictionary. In the dictionary, the keys should be
#characters, and the values should be the number of times
#each character appeared in the string.
#
#For example:
#
#  count_characters(""aabbccc"") -> {'a': 2, 'b': 2, 'c': 3}
#  count_characters(""AaBbbb"") -> {'A': 1, 'B': 1, 'a': 1, 'b': 3}
#
#You should not need to make any assumptions about the
#characters in the string: spaces, punctuation, line breaks,
#and any other characters should be handled automatically.
#You may count upper and lower case separately.","Test Case 1:
Input: ""hello""
Output: {'h': 1, 'e': 1, 'l': 2, 'o': 1}

Test Case 2:
Input: ""Aardvark""
Output: {'A': 1, 'a': 2, 'r': 2, 'd': 1, 'v': 1, 'k': 1}

Test Case 3:
Input: ""Spaces are also characters""
Output: {'S': 1, 'p': 1, 'a': 4, 'c': 2, 'e': 3, 's': 2, ' ': 3, 'r': 2, 'l': 1, 'o': 1, 'h': 1}

Test Case 4:
Input: ""!@#$%^&()""
Output: {'!': 1, '@': 1, '#': 1, '$': 1, '%': 1, '^': 1, '&': 1, '': 1, '(': 1, ')': 1}

Test Case 5:
Input: ""1234567890""
Output: {'1': 1, '2': 1, '3': 1, '4': 1, '5': 1, '6': 1, '7': 1, '8': 1, '9': 1, '0': 1}"
69,"#Write a function called pivot_library. pivot_library takes
#as input one parameter, a list of 3-tuples. Each tuple in
#the list has three items: the first item is a book title
#(a string), the second item is the book's author (a
#string), and the third item is the book's ISBN number (a
#string).
#
#pivot_library should return a dictionary. In the dictionary
#that it returns, the keys should be the ISBN numbers, and
#the values should be 2-item tuples. In each tuple, the first
#item should be the book title, and the second item should
#be the author's name.
#
#Hint: Unpack the tuple to variables first, then create the
#new dictionary item.
#
#For example:
#
# books = [(""Of Mice and Men"", ""John Steinbeck"", ""978-0-140-17739-8""),
#          (""Introduction to Computing"", ""David Joyner"", ""978-1-260-08227-2"")]
# pivot_library(books)
#   -> {""978-0-140-17739-8"": (""Of Mice and Men"", ""John Steinbeck""),
#       ""978-1-260-08227-2"": (""Introduction to Computing"", ""David Joyner"")}","Test Case 1:
Input: [(""To Kill a Mockingbird"", ""Harper Lee"", ""978-0-06-093546-7""), (""1984"", ""George Orwell"", ""978-0-452-28423-4"")]
Output: {""978-0-06-093546-7"": (""To Kill a Mockingbird"", ""Harper Lee""), ""978-0-452-28423-4"": (""1984"", ""George Orwell"")}

Test Case 2:
Input: []
Output: {}

Explanation: An empty list as input should return an empty dictionary as no books are provided.

Test Case 3:
Input: [(""The Great Gatsby"", ""F. Scott Fitzgerald"", ""978-0-7432-7356-5"")]
Output: {""978-0-7432-7356-5"": (""The Great Gatsby"", ""F. Scott Fitzgerald"")}

Explanation: Even with a single book, the function should return a dictionary with the ISBN as the key and the title and author as values.

Test Case 4:
Input: [(""Moby Dick"", ""Herman Melville"", ""978-0-14-243724-7""), (""Moby Dick"", ""Herman Melville"", ""978-0-14-243724-7"")]
Output: {""978-0-14-243724-7"": (""Moby Dick"", ""Herman Melville"")}

Explanation: In case of duplicate books, the function should still behave the same, not creating duplicate dictionary entries.

Test Case 5:
Input: [(""Brave New World"", ""Aldous Huxley"", ""978-0-06-085052-4""), (""Slaughterhouse-Five"", ""Kurt Vonnegut"", ""978-0-385-33384-9""), (""The Catcher in the Rye"", ""J.D. Salinger"", ""978-0-316-76948-1"")]
Output: {""978-0-06-085052-4"": (""Brave New World"", ""Aldous Huxley""), ""978-0-385-33384-9"": (""Slaughterhouse-Five"", ""Kurt Vonnegut""), ""978-0-316-76948-1"": (""The Catcher in the Rye"", ""J.D. Salinger"")}

Explanation: The function should work correctly for any number of books."
70,"#APA citation style cites author names like this:
#
#  Last, F., Joyner, D., Burdell, G.
#
#Note the following:
#
# - Each individual name is listed as the last name, then a
#   comma, then the first initial, then a period.
# - The names are separated by commas, including the last
#   two.
# - There is no space or comma following the last period.
#
#Write a function called names_to_apa. names_to_apa should
#take as input one string, and return a reformatted string
#according to the style given above. You can assume that
#the input string will be of the following format:
#
#  First Last, David Joyner, and George Burdell
#
#You may assume the following:
#
# - There will be at least three names, with ""and"" before
#   the last name.
# - Each name will have exactly two words.
# - There will be commas between each pair of names.
# - The word 'and' will precede the last name.
# - The names will only be letters (no punctuation, special
#   characters, etc.), and first and last name will both be
#   capitalized.
#
#Hint: You can use the string replace() method to delete
#text from a string. For example, a_string.replace(""hi"", """")
#will delete all instances of ""hi"". There are multiple ways
#you might choose to use this.","Test Case 1:
Input:
""John Doe, Jane Smith, and Sarah Brown""
Output:
""Doe, J., Smith, J., Brown, S.""

Test Case 2:
Input:
""Tom Hanks, Jerry Seinfeld, and Julia Louis""
Output:
""Hanks, T., Seinfeld, J., Louis, J.""

Test Case 3:
Input:
""Barack Obama, George Bush, and Bill Clinton""
Output:
""Obama, B., Bush, G., Clinton, B.""

Test Case 4:
Input:
""Elon Musk, Jeff Bezos, and Mark Zuckerberg""
Output:
""Musk, E., Bezos, J., Zuckerberg, M.""

Test Case 5:
Input:
""Albert Einstein, Isaac Newton, and Galileo Galilei""
Output:
""Einstein, A., Newton, I., Galilei, G."""
71,"#Write a function called check_formula. The check_formula
#function should take as input one parameter, a string. It
#should return True if the string holds a correctly
#formatted arithmetic integer formula according to the rules
#below, or False if it does not.
#
#For this problem, here are the rules that define a
#correctly-formatted arithmetic string:
#
# - The only characters in the string should be digits or
#   the five arithmetic operators: +, -, *, /, and =. Any
#   other characters, including spaces, periods, commas,
#   or any letters, are not permitted.
# - There may not be any consecutive arithmetic operators.
#   Any arithmetic operator must have a number on either
#   side of it.
# - There must be an equals sign in the formula.
#
#You do not need to worry about negative numbers or
#parentheses, and you do not need to worry about whether
#the equation is accurate. You may also assume all the
#numbers in the string will be only one digit.
#
#Here are some examples of valid and invalid arithmetic
#formulas:
#
#   Valid     Invalid
#   5*3=5+2   5*3+5+2 (no equals)
#   5=7       5= (equals sign isn't in the middle)
#   5=2-5     50=-5 (consecutive arithmetic operators)
#   6/2=5/2   a=51 (illegal character)
#             -5=5+2 (starts with an operator)
#
#Hint: Remember, as soon as you find *one* thing wrong
#with the string, you know it's invalid and can return
#False. So, go character-by-character through the string
#checking everything that could be wrong. If you don't
#find anything wrong, return True!","Test Case 1:
Input:
""5*3=5+2""
Output:
True

Test Case 2:
Input:
""5*3+5+2""
Output:
False

Test Case 3:
Input:
""5=7""
Output:
True

Test Case 4:
Input:
""5=""
Output:
False

Test Case 5:
Input:
""5=2-5""
Output:
True"
72,"#In the game tic-tac-toe, two players take turns drawing
#Xs and Os on a 3x3 grid. If one player can place three of
#their symbols side-by-side in a row, column, or diagonal,
#they win the game.
#
#For example:
#
# X Wins:   X Wins:   X Wins:   No Winner:
# X|O|X     O|X|X     O|O|      X|O|O
# -+-+-     -+-+-     -+-+-     -+-+-
# O|O|X     X|O|      X|X|X     O|X|X
# -+-+-     -+-+-     -+-+-     -----
# O|X|X      | |O      | |      X|X|O
#
#Write a function called check_winner. check_winner will
#take one parameter as input, a 2D tuple (that is, a tuple
#of tuples). The 2D tuple represents the game board: each
#smaller tuple in the larger tuple is a row of the board,
#and each item in the smaller tuple is a spot on the
#board. There will always be three tuples in the larger
#tuple, and three items in each of the smaller tuples.
#
#Each item in the smaller tuple will always be one of three
#values: the string ""X"", the string ""O"", or the value None.
#
#check_winner should return one of three values: the string
#""X"" if X has won the game; the string ""O"" if O has won the
#game; or the value None if there is no winner. None should
#NOT be the string ""None""; it should be the value None,
#like the boolean values True and False.
#
#You may assume a player has won the game if and only if
#the board has three of their symbols in a row: you do not
#need to worry about whether the input is a valid game
#otherwise (e.g. a board of nine Xs still counts as X
#winning). You may assume that there will only be one
#winner per board.
#
#Hint: There are only eight possible places to win (three
#rows, three columns, two diagonals).
#
#Hint 2: If you're comfortable on time, you may want to
#check out the last problem before doing this one. It's
#only worth 1 point, but you might be able to design
#one solution that works for both problems!","Test Case 1:
Input:
((""X"", ""O"", ""X""),
(""O"", ""O"", ""X""),
(""O"", ""X"", ""X""))
Output:
""X""

Test Case 2:
Input:
((""O"", ""X"", ""X""),
(""X"", ""O"", ""None""),
(""None"", ""None"", ""O""))
Output:
""X""

Test Case 3:
Input:
((""O"", ""O"", ""None""),
(""X"", ""X"", ""X""),
(""None"", ""None"", ""None""))
Output:
""X""

Test Case 4:
Input:
((""X"", ""O"", ""O""),
(""O"", ""X"", ""X""),
(""X"", ""X"", ""O""))
Output:
None

Test Case 5:
Input:
((""X"", ""X"", ""X""),
(""O"", ""O"", ""None""),
(""None"", ""None"", ""None""))
Output:
""X"""
73,"#Last problem, you implemented a function that could find if
#someone had won a particular game of tic-tac-toe based on a
#2D tuple representing the current game board.
#
#In this problem, you'll do the same thing, but for Connect
#4 instead of tic-tac-toe. Write another function called
#check_winner which takes as input a 2D list. It should
#return ""X"" if there are four adjacent ""X"" values anywhere
#in the list (row, column, diagonal); ""O"" if there are four
#adjacent ""O"" values anywhere in the list; and None if
#there are neither.
#
#Here are the ways Connect-4 is different from tic-tac-toe:
#
# - Connect-4 is played with 6 rows and 7 columns, not 3
#   rows and 3 columns.
# - You must have 4 in a row (or column or diagonal) to win
#   instead of 3.
# - You may only place pieces in the bottom-most empty
#   space in a column (e.g. you ""drop"" the pieces in the
#   column and they fall to the first empty spot). Note,
#   though, that this shouldn't affect your reasoning.
#
#To keep things simple, we'll still use ""X"" and ""O"" to
#represent the players, and None to represent empty spots.
#You may make the same assumptions as the previous
#problem: only one winner per board, no characters besides
#""X"", ""O"", and None, and you don't have to worry about
#whether the board is actually a valid game of Connect 4.
#
#Hints:
# - Don't forget both kinds of diagonals!
# - This board is too large to check every possible place
#   for a winner: there are 69 places a player could win.
# - Remember, if you put a negative index in a list,
#   Python ""wraps around"" and checks the last value. You
#   may have to control for this.","Test Case 1:
Input:
((""O"", ""O"", ""X"", ""X"", ""O"", ""O"", ""O""),
(""O"", ""X"", ""O"", ""X"", ""O"", ""X"", ""X""),
(""X"", ""X"", ""O"", ""O"", ""X"", ""O"", ""O""),
(""O"", ""O"", ""X"", ""X"", ""O"", ""O"", ""X""),
(""O"", ""X"", ""O"", ""X"", ""O"", ""X"", ""O""),
(""X"", ""X"", ""O"", ""O"", ""X"", ""O"", ""X""))
Output:
None

Test Case 2:
Input:
((""O"", ""O"", ""X"", ""X"", ""O"", ""O"", ""O""),
(""O"", ""X"", ""O"", ""X"", ""O"", ""X"", ""X""),
(""X"", ""X"", ""O"", ""O"", ""X"", ""O"", ""O""),
(""O"", ""O"", ""X"", ""X"", ""O"", ""O"", ""X""),
(""O"", ""X"", ""O"", ""X"", ""X"", ""X"", ""X""),
(""X"", ""X"", ""O"", ""O"", ""X"", ""O"", ""X""))
Output:
""X""

Test Case 3:
Input:
((""O"", ""O"", ""X"", ""X"", ""O"", ""O"", ""O""),
(""O"", ""X"", ""O"", ""X"", ""O"", ""X"", ""O""),
(""X"", ""X"", ""O"", ""O"", ""X"", ""O"", ""O""),
(""O"", ""O"", ""X"", ""X"", ""O"", ""O"", ""X""),
(""O"", ""X"", ""O"", ""X"", ""O"", ""X"", ""O""),
(""X"", ""X"", ""O"", ""O"", ""O"", ""O"", ""O""))
Output:
""O""

Test Case 4:
Input:
((""None"", ""None"", ""None"", ""None"", ""None"", ""None"", ""None""),
(""None"", ""None"", ""None"", ""None"", ""None"", ""None"", ""None""),
(""None"", ""None"", ""None"", ""None"", ""None"", ""None"", ""None""),
(""None"", ""None"", ""None"", ""None"", ""None"", ""None"", ""None""),
(""None"", ""None"", ""None"", ""None"", ""None"", ""None"", ""None""),
(""X"", ""X"", ""X"", ""X"", ""None"", ""None"", ""None""))
Output:
""X""

Test Case 5:
Input:
((""O"", ""O"", ""O"", ""X"", ""O"", ""O"", ""O""),
(""O"", ""X"", ""O"", ""X"", ""O"", ""X"", ""X""),
(""X"", ""X"", ""O"", ""O"", ""X"", ""O"", ""O""),
(""O"", ""O"", ""X"", ""X"", ""O"", ""O"", ""X""),
(""O"", ""X"", ""O"", ""X"", ""O"", ""X"", ""O""),
(""X"", ""X"", ""O"", ""O"", ""X"", ""O"", ""X""))
Output:
""X"""
74,"#Write a function called average_rainfall. average_rainfall
#should have one parameter, a list of integers. The list
#represents daily rainfall measurements for a certain area.
#
#However, at some point in the list, there will be a -1.
#This indicates that you should stop averaging, and ignore
#any subsequent values.
#
#For example:
#
#average_rainfall([1, 2, 3, 4, 5, -1, 6, 7]) -> 3.0
#
#The function would only average 1, 2, 3, 4, and 5, and
#ignore any values after the -1.
#
#You may assume all the items in the list are integers,
#that -1 is guaranteed to occur somewhere in the list,
#and that -1 will not be the first item in the list.","Test Case 1:
Input:
[5, 10, 15, -1, 20, 25]
Output:
10.0

Test Case 2:
Input:
[1, 2, 3, 4, 5, -1, 6, 7]
Output:
3.0

Test Case 3:
Input:
[100, 200, 300, 400, -1, 500, 600]
Output:
250.0

Test Case 4:
Input:
[8, 7, 6, 5, 4, 3, 2, 1, -1, 0]
Output:
4.5

Test Case 5:
Input:
[50, 100, -1, 150, 200]
Output:
75.0"
75,"#Write a function called volume_and_area. volume_and_area
#will take in a dictionary. This dictionary is guaranteed to
#have three keys: ""length"", ""width"", and ""height"", whose
#values are integers representing three attributes of a
#rectangular prism (also known as a box).
#
#Modify this dictionary to add two keys: ""volume"" and ""area"".
#The values associated with these keys should be the volume
#and surface area of the box.
#
#The formula for volume is:
#  length * width * height
#
#The formula for surface area is:
#  2 * ((length * width) + (length*height) + (width*height))
#
#Because length, width, and height are integers, and because
#these formulas have no division, your results should be
#integers as well.","Test Case 1:
Input:
{""length"": 2, ""width"": 3, ""height"": 4}
Output:
{""length"": 2, ""width"": 3, ""height"": 4, ""volume"": 24, ""area"": 52}

Test Case 2:
Input:
{""length"": 5, ""width"": 5, ""height"": 5}
Output:
{""length"": 5, ""width"": 5, ""height"": 5, ""volume"": 125, ""area"": 150}

Test Case 3:
Input:
{""length"": 7, ""width"": 6, ""height"": 5}
Output:
{""length"": 7, ""width"": 6, ""height"": 5, ""volume"": 210, ""area"": 214}

Test Case 4:
Input:
{""length"": 10, ""width"": 8, ""height"": 2}
Output:
{""length"": 10, ""width"": 8, ""height"": 2, ""volume"": 160, ""area"": 216}

Test Case 5:
Input:
{""length"": 3, ""width"": 4, ""height"": 2}
Output:
{""length"": 3, ""width"": 4, ""height"": 2, ""volume"": 24, ""area"": 52}




"
76,"#Write a function called digit_count. digit_count should
#take as input a number, which could be either a float or an
#integer. It should return a dictionary whose keys are digits,
#and whose values are the number of times that digit appears
#in the number.
#
#The dictionary should NOT contain any numerals that do not
#occur at all in the number, and it should also note contain
#the decimal point character if the number is a decimal.
#
#For example:
#
#  digit_count(11223) -> {1: 2, 2: 2, 3: 1}
#  digit_count(3.14159) -> {3: 1, 1: 2, 4: 1, 5: 1, 9: 1}
#
#Hint: You should probably convert the number to a string to
#count the digits, but convert the individual digits back to
#integers to use as keys to the dictionary.","Test Case 1:
Input:
11223
Output:
{1: 2, 2: 2, 3: 1}

Test Case 2:
Input:
3.14159
Output:
{3: 1, 1: 2, 4: 1, 5: 1, 9: 1}

Test Case 3:
Input:
444.888
Output:
{4: 3, 8: 3}

Test Case 4:
Input:
0.123456789
Output:
{0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1}

Test Case 5:
Input:
123456789123456789
Output:
{1: 2, 2: 2, 3: 2, 4: 2, 5: 2, 6: 2, 7: 2, 8: 2, 9: 2}"
77,"#Write a function called complete_profile. complete_profile
#will take as input a dictionary. This dictionary will have
#four keys: first, middle, last, and title. The function
#should return a dictionary with those four keys, and three
#more: name, full_name, short_name. The values for those
#keys should be:
#
# - name: the first and last name, separated by a space
# - full_name: the title, first, middle, and last names,
#   with a space between each pair of strings
# - short_name: the first letter of the first name, a space,
#   and their last name
#
#For example:
#
# complete_profile({""first"": ""David"", ""middle"": ""Andrew"",
#                   ""last"": ""Joyner"", ""title"": ""Dr.""})
#
# would return:
#
# {""first"": ""David"", ""middle"": ""Andrew"", ""last"": ""Joyner"",
#  ""title"": ""Dr."", ""name"": ""David Joyner"",
#  ""full_name"": ""Dr. David Andrew Joyner"",
#  ""short_name"": ""D Joyner""}
#
#You may either modify the dictionary that is passed in,
#or create a new one. Either way, make sure to return the
#dictionary at the end of the function.","Test Case 1:
Input:
{""first"": ""David"", ""middle"": ""Andrew"", ""last"": ""Joyner"", ""title"": ""Dr.""}
Output:
{""first"": ""David"", ""middle"": ""Andrew"", ""last"": ""Joyner"", ""title"": ""Dr."", ""name"": ""David Joyner"", ""full_name"": ""Dr. David Andrew Joyner"", ""short_name"": ""D Joyner""}

Test Case 2:
Input:
{""first"": ""John"", ""middle"": ""Jacob"", ""last"": ""Jingleheimer"", ""title"": ""Mr.""}
Output:
{""first"": ""John"", ""middle"": ""Jacob"", ""last"": ""Jingleheimer"", ""title"": ""Mr."", ""name"": ""John Jingleheimer"", ""full_name"": ""Mr. John Jacob Jingleheimer"", ""short_name"": ""J Jingleheimer""}

Test Case 3:
Input:
{""first"": ""Jane"", ""middle"": ""Quincy"", ""last"": ""Doe"", ""title"": ""Ms.""}
Output:
{""first"": ""Jane"", ""middle"": ""Quincy"", ""last"": ""Doe"", ""title"": ""Ms."", ""name"": ""Jane Doe"", ""full_name"": ""Ms. Jane Quincy Doe"", ""short_name"": ""J Doe""}

Test Case 4:
Input:
{""first"": ""Albert"", ""middle"": ""Einstein"", ""last"": """", ""title"": ""Prof.""}
Output:
{""first"": ""Albert"", ""middle"": ""Einstein"", ""last"": """", ""title"": ""Prof."", ""name"": ""Albert "", ""full_name"": ""Prof. Albert Einstein "", ""short_name"": ""A ""}

Test Case 5:
Input:
{""first"": ""Sigmund"", ""middle"": """", ""last"": ""Freud"", ""title"": ""Dr.""}
Output:
{""first"": ""Sigmund"", ""middle"": """", ""last"": ""Freud"", ""title"": ""Dr."", ""name"": ""Sigmund Freud"", ""full_name"": ""Dr. Sigmund Freud"", ""short_name"": ""S Freud""}"
78,"#Write a function called pivot_library. pivot_library takes
#as input one parameter, a list of 3-tuples. Each tuple in
#the list has three items: the first item is a book title
#(a string), the second item is the book's author (a
#string), and the third item is the book's ISBN number (a
#string).
#
#pivot_library should return a dictionary. In the dictionary
#that it returns, the keys should be the ISBN numbers, and
#the values should be new dictionaries. Each new dictionary
#should have two keys: ""title"" and ""author"". Their values
#should correspond to the first and second items from the
#original 3-tuple.
#
#For example:
#
# books = [(""Of Mice and Men"", ""John Steinbeck"", ""978-0-140-17739-8""),
#          (""Introduction to Computing"", ""David Joyner"", ""978-1-260-08227-2"")]
# pivot_library(books)
#   -> {""978-0-140-17739-8"": {""title"": ""Of Mice and Men"", ""author"": ""John Steinbeck""},
#       ""978-1-260-08227-2"": {""title"": ""Introduction to Computing"", ""author"": ""David Joyner""}}","Test Case 1:
Input:
[(""Of Mice and Men"", ""John Steinbeck"", ""978-0-140-17739-8"")]
Output:
{""978-0-140-17739-8"": {""title"": ""Of Mice and Men"", ""author"": ""John Steinbeck""}}

Test Case 2:
Input:
[(""Introduction to Computing"", ""David Joyner"", ""978-1-260-08227-2"")]
Output:
{""978-1-260-08227-2"": {""title"": ""Introduction to Computing"", ""author"": ""David Joyner""}}

Test Case 3:
Input:
[(""Harry Potter and the Philosopher's Stone"", ""J.K. Rowling"", ""978-0-7475-3269-6""),
(""The Great Gatsby"", ""F. Scott Fitzgerald"", ""978-0-7432-7356-5"")]
Output:
{""978-0-7475-3269-6"": {""title"": ""Harry Potter and the Philosopher's Stone"", ""author"": ""J.K. Rowling""},
""978-0-7432-7356-5"": {""title"": ""The Great Gatsby"", ""author"": ""F. Scott Fitzgerald""}}

Test Case 4:
Input:
[(""To Kill a Mockingbird"", ""Harper Lee"", ""978-0-06-112008-4""),
(""1984"", ""George Orwell"", ""978-0-452-28423-4"")]
Output:
{""978-0-006-112008-4"": {""title"": ""To Kill a Mockingbird"", ""author"": ""Harper Lee""},
""978-0-452-28423-4"": {""title"": ""1984"", ""author"": ""George Orwell""}}

Test Case 5:
Input:
[(""The Lord of the Rings"", ""J.R.R. Tolkien"", ""978-0-618-57472-6""),
(""Pride and Prejudice"", ""Jane Austen"", ""978-0-14-143951-8"")]
Output:
{""978-0-618-57472-6"": {""title"": ""The Lord of the Rings"", ""author"": ""J.R.R. Tolkien""},
""978-0-014-143951-8"": {""title"": ""Pride and Prejudice"", ""author"": ""Jane Austen""}}"
79,"#It's a well-known and indisputable fact that if you want
#to make your name sound fancy, you should list it as only
#your first two initials followed by your last name. For
#example, my full name is David Andrew Joyner, and therefore
#my fancy name is D. A. Joyner. (If you have two middle names,
#it's even better, but we'll assume we have only one -- we're
#C. S. Lewis, not J. R. R. Tolkien).
#
#Write a function called fancy_me. fancy_me should take as
#input a list of strings, each representing a full name (e.g.
#""David Andrew Joyner"" or ""First Middle Last"". fancy_me should
#return a single string, formatting that list of names in this
#fancy style, like this:
#
#  F. M. Last, D. A. Joyner, G. P. Burdell
#
#Each individual name is the first initial, then a period, then
#a space, then the second initial, then a period, then a space,
#then the last name, then a comma. There is no comma after the
#last name in the list.
#
#For example:
#
#  fancy_me([""First Middle Last"", ""David Andrew Joyner"", ""George P Burdell""])
#
#...would return ""F. M. Last, D. A. Joyner, G. P. Burdell""","Test Case 1:
Input:
[""First Middle Last"", ""David Andrew Joyner"", ""George P Burdell""]
Output:
""F. M. Last, D. A. Joyner, G. P. Burdell""

Test Case 2:
Input:
[""John Jacob Jingleheimer"", ""James Richard Doe"", ""Jane Quincy Public""]
Output:
""J. J. Jingleheimer, J. R. Doe, J. Q. Public""

Test Case 3:
Input:
[""Albert Einstein"", ""Isaac Newton"", ""Charles Darwin""]
Output:
""A. Einstein, I. Newton, C. Darwin""

Test Case 4:
Input:
[""Emily Dickinson"", ""Robert Frost"", ""Walt Whitman""]
Output:
""E. Dickinson, R. Frost, W. Whitman""

Test Case 5:
Input:
[""Thomas Alva Edison"", ""Nikola Tesla"", ""Alexander Graham Bell""]
Output:
""T. A. Edison, N. Tesla, A. G. Bell"""
80,"#In the game Rock-Paper-Scissors, two opponents
#simultaneously choose to throw either ""Rock"", ""Paper"",
#or ""Scissors"". Rock beats Scissors, Scissors beats Paper,
#and Paper beats Rock. If both players throw the same
#object, the round is a tie.
#
#Write a function called find_winner. find_winner will take
#as input a list of 2-tuples, each representing a round of
#Rock-Paper-Scissors. Each 2-tuple will contain two strings.
#Each string will be either ""Rock"", ""Paper"", or ""Scissors"".
#The first item in the 2-tuple will represent what Player 1
#chooses in each round, and the second item in the 2-tuple
#will represent what Player 2 chooses in each round.
#
#find_winner should return the string ""Player 1 wins!"" if
#Player 1 wins more games than Player 2. It should return the
#string ""Player 2 wins!"" if Player 2 wins more games than
#Player 1. It should return the string ""It's a tie!"" if the
#two players win an equal number of times. 
#
#The number of times the two players tie is irrelevant to the
#result: all that matters is who wins more rounds than the
#other.
#
#For example:
#
# find_winner([(""Rock"", ""Rock""), (""Rock"", ""Scissors""),
#              (""Paper"", ""Rock""), (""Scissors"", ""Rock"")])
#
#...would return ""Player 1 wins!"" because Player 1 wins
#two round and Player 2 wins one round.","Test Case 1:
Input:
[(""Rock"", ""Rock""), (""Rock"", ""Scissors""), (""Paper"", ""Rock""), (""Scissors"", ""Rock"")]
Output:
""Player 1 wins!""

Test Case 2:
Input:
[(""Paper"", ""Scissors""), (""Scissors"", ""Rock""), (""Rock"", ""Scissors""), (""Paper"", ""Rock"")]
Output:
""Player 2 wins!""

Test Case 3:
Input:
[(""Rock"", ""Rock""), (""Scissors"", ""Scissors""), (""Paper"", ""Paper"")]
Output:
""It's a tie!""

Test Case 4:
Input:
[(""Rock"", ""Scissors""), (""Scissors"", ""Paper""), (""Paper"", ""Rock"")]
Output:
""Player 1 wins!""

Test Case 5:
Input:
[(""Rock"", ""Scissors""), (""Scissors"", ""Rock""), (""Rock"", ""Rock"")]
Output:
""It's a tie!"""
81,"#Imagine you are trying to choose what restaurant to visit.
#You have a list of restaurants, each with a collection of
#star ratings. You also have a minimum standard; you will
#only go to a restaurant whose star rating is at least your
#minimum standard.
#
#Write a function called restaurant_rating. restaurant_rating
#has two parameters. The first is a dictionary, where the keys
#are restaurant names and the values are lists of ratings. The
#second parameter is your minimum rating. If a restaurant's
#average rating is above your minimum rating, you might visit
#it. If it is not, you won't.
#
#restaurant_rating should return a list of restaurants eligible
#for you to visit. That is, it should return a list of
#restaurant names from the dictionary whose average ratings
#(the average of the ratings in their lists) is greater than or
#equal to your minimum rating.
#
#For example:
#rest_and_rating = {'burger king':[4,5,3,4,3], 'moes':[4,5,5,5,5], 'taco bell':[1,2,3,4,5]}
#value = 4.5
#restaurant_rating(rest_and_rating, value) -> ['moes']","Test Case 1:
Input:
rest_and_rating = {'burger king': [4, 5, 3, 4, 3], 'moes': [4, 5, 5, 5, 5], 'taco bell': [1, 2, 3, 4, 5]}
value = 4.5
Output:
['moes']

Test Case 2:
Input:
rest_and_rating = {'pizza hut': [3, 4, 3, 4, 3], 'papa johns': [4, 4, 5, 5, 4], 'dominos': [2, 3, 2, 2, 3]}
value = 4.0
Output:
['papa johns']

Test Case 3:
Input:
rest_and_rating = {'subway': [3, 4, 3, 2, 3], 'quiznos': [2, 2, 2, 2, 2], 'jimmy johns': [4, 5, 5, 5, 4]}
value = 2.5
Output:
['subway', 'jimmy johns']

Test Case 4:
Input:
rest_and_rating = {'kfc': [4, 3, 4, 4, 3], 'popeyes': [5, 4, 4, 5, 5], 'chick-fil-a': [5, 5, 5, 5, 5]}
value = 4.2
Output:
['kfc', 'popeyes', 'chick-fil-a']

Test Case 5:
Input:
rest_and_rating = {'mcdonalds': [2, 2, 3, 3, 2], 'wendys': [3, 3, 3, 4, 3], 'sonic': [4, 4, 5, 4, 4]}
value = 3.3
Output:
['wendys', 'sonic']"
82,"#-----------------------------------------------------------
#Write a function called no_you_pick. no_you_pick should
#have two parameters. The first parameter is a dictionary
#where the keys are restaurant names and the values are lists
#of attributes of those restaurants as strings, such as
#""vegetarian"", ""vegan"", and ""gluten-free"".
#
#The second parameter is a list of strings representing of
#necessary attributes of the restaurant you select.
#
#Return a list of restaurants from the dictionary who each
#contain all the diet restrictions listed in the list,
#sorted alphabetically. If there are no restaurants that
#meet all the restrictions, return the string ""Sorry, no
#restaurants meet your restrictions"". Types of diet
#restrictions that exist in this question's universe are:
#vegetarian, vegan, kosher, gluten-free, dairy-free
#
#For example:
#grading_scale = {""blossom"": [""vegetarian"", ""vegan"", ""kosher"", ""gluten-free"", ""dairy-free""], \
#                 ""jacob's pickles"": [""vegetarian"", ""gluten-free""], \
#                 ""sweetgreen"": [""vegetarian"", ""vegan"", ""gluten-free"", ""kosher""]}
#guests_diet = [""dairy-free""]
#no_you_pick(grading_scale, guests_diet) -> [""blossom""]","Test Case 1:
Input:
grading_scale = {
""blossom"": [""vegetarian"", ""vegan"", ""kosher"", ""gluten-free"", ""dairy-free""],
""jacob's pickles"": [""vegetarian"", ""gluten-free""],
""sweetgreen"": [""vegetarian"", ""vegan"", ""gluten-free"", ""kosher""]
}
guests_diet = [""dairy-free""]
Output:
[""blossom""]

Test Case 2:
Input:
grading_scale = {
""pizza hut"": [""vegetarian"", ""kosher"", ""dairy-free""],
""dominos"": [""vegetarian"", ""vegan"", ""gluten-free"", ""dairy-free""],
""papa johns"": [""vegetarian"", ""dairy-free""],
""popeyes"": [""gluten-free"", ""dairy-free""]
}
guests_diet = [""vegetarian"", ""dairy-free""]
Output:
[""dominos"", ""papa johns"", ""pizza hut""]

Test Case 3:
Input:
grading_scale = {
""mcdonalds"": [""vegetarian""],
""wendys"": [""vegetarian"", ""gluten-free""],
""burger king"": [""gluten-free"", ""dairy-free""],
""subway"": [""vegetarian"", ""vegan"", ""gluten-free"", ""dairy-free""]
}
guests_diet = [""vegan"", ""dairy-free""]
Output:
[""subway""]

Test Case 4:
Input:
grading_scale = {
""chipotle"": [""vegetarian"", ""vegan"", ""gluten-free"", ""dairy-free""],
""taco bell"": [""vegetarian"", ""gluten-free""],
""qdoba"": [""gluten-free"", ""dairy-free""]
}
guests_diet = [""vegetarian"", ""vegan"", ""dairy-free""]
Output:
[""chipotle""]

Test Case 5:
Input:
grading_scale = {
""panera"": [""vegetarian"", ""vegan"", ""gluten-free"", ""dairy-free""],
""starbucks"": [""vegetarian"", ""gluten-free""],
""dunkin"": [""gluten-free"", ""dairy-free""]
}
guests_diet = [""kosher""]
Output:
""Sorry, no restaurants meet your restrictions"""
83,"#Your goal in this question is to create a playlist (that is, a list of songs) by your friend's favorite artists.
#
#Write a function called playlist. playlist should have two parameters. The first parameter is a dictionary, where the keys are band names and the values are song names. The second parameter is a list of strings, where each string is an artist.
#
#playlist should return a list of all songs by the bands listed in the second parameter, sorted alphabetically. If there are no matching artists, return ""I guess I don't mind ads on the radio that much""
#
#For example:
#artists_and_songs = {""Beyonce"": [""Halo"", ""Run the World"", ""Irreplaceable""],\
#                     ""Maroon 5"": [""Sugar"", ""Payphone"", ""Memories""], ""Harry Styles"": \
#                     [""Sign of the Times"", ""Adore You"", ""Falling""], ""AC/DC"":\
#                     [""TNT"", ""It's a long way to the top"", ""Thunderstruck""]}
#friends_artists = [""Maroon 5"", ""AC/DC"", ""Tame Impala""]
#playlist(artists_and_songs, friends_artists) -> [""It's a long way to the top"", ""Memories"", ""Payphone"", ""Sugar"", ""TNT"", ""Thunderstruck""]","Test Case 1:
Input:
artists_and_songs = {
""Beyonce"": [""Halo"", ""Run the World"", ""Irreplaceable""],
""Maroon 5"": [""Sugar"", ""Payphone"", ""Memories""],
""Harry Styles"": [""Sign of the Times"", ""Adore You"", ""Falling""],
""AC/DC"": [""TNT"", ""It's a long way to the top"", ""Thunderstruck""]
}
friends_artists = [""Maroon 5"", ""AC/DC"", ""Tame Impala""]
Output:
[""It's a long way to the top"", ""Memories"", ""Payphone"", ""Sugar"", ""TNT"", ""Thunderstruck""]

Test Case 2:
Input:
artists_and_songs = {
""Taylor Swift"": [""Love Story"", ""Blank Space"", ""Shake It Off""],
""Ed Sheeran"": [""Shape of You"", ""Thinking Out Loud"", ""Photograph""],
""Adele"": [""Hello"", ""Rolling in the Deep"", ""Someone Like You""],
""Imagine Dragons"": [""Believer"", ""Radioactive"", ""Demons""]
}
friends_artists = [""Ed Sheeran"", ""Adele"", ""Justin Bieber""]
Output:
""I guess I don't mind ads on the radio that much""

Test Case 3:
Input:
artists_and_songs = {
""Coldplay"": [""Yellow"", ""Clocks"", ""Viva la Vida""],
""U2"": [""With or Without You"", ""Beautiful Day"", ""One""],
""Queen"": [""Bohemian Rhapsody"", ""Another One Bites the Dust"", ""We Will Rock You""],
""The Beatles"": [""Hey Jude"", ""Let It Be"", ""Yesterday""]
}
friends_artists = [""Coldplay"", ""U2"", ""The Beatles""]
Output:
[""Clocks"", ""Viva la Vida"", ""Yellow"", ""Hey Jude"", ""Let It Be"", ""Yesterday""]

Test Case 4:
Input:
artists_and_songs = {
""Drake"": [""Hotline Bling"", ""God's Plan"", ""In My Feelings""],
""Kendrick Lamar"": [""HUMBLE."", ""DNA."", ""Alright""],
""Post Malone"": [""Circles"", ""Congratulations"", ""Rockstar""]
}
friends_artists = [""Drake"", ""Kendrick Lamar"", ""Post Malone""]
Output:
[""Alright"", ""Circles"", ""Congratulations"", ""DNA."", ""God's Plan"", ""Hotline Bling"", ""HUMBLE."", ""In My Feelings"", ""Rockstar""]

Test Case 5:
Input:
artists_and_songs = {
""Michael Jackson"": [""Thriller"", ""Billie Jean"", ""Beat It""],
""Prince"": [""Purple Rain"", ""When Doves Cry"", ""Kiss""],
""Madonna"": [""Like a Virgin"", ""Material Girl"", ""Vogue""]
}
friends_artists = [""Madonna"", ""Britney Spears"", ""Justin Timberlake""]
Output:
""I guess I don't mind ads on the radio that much"""
84,"#You are going through your refrigerator at home and trying to determine whether you have the proper ingredients to cook a meal.
#
#Write a function called food_at_home. food_at_home should have one parameter, a list of foods in your house as strings. In order to cook a meal, the list must contain ""cooking oil"" and at least one other item. If this criteria is not met, return the string ""I guess it's pizza tonight"". If you do have cooking oil and at least one other food, return the string, ""You do have food, your options are ... or ... or ..."", where the ...s are replaced by the food names in the list in the order in which they appear. ""cooking oil"" should not be one of the foods listed under options.
#
#For example:
#food_list = [""chicken"", ""mixed veggies"", ""greens"", ""beans"", ""corn"", ""cooking oil""]
#food_at_home(food_list) -> ""You do have food, your options are chicken or mixed veggies or greens or beans or corn""","Test Case 1:
Input:
food_list = [""chicken"", ""mixed veggies"", ""greens"", ""beans"", ""corn"", ""cooking oil""]
Output:
""You do have food, your options are chicken or mixed veggies or greens or beans or corn""

Test Case 2:
Input:
food_list = [""pasta"", ""tomato sauce"", ""cheese""]
Output:
""I guess it's pizza tonight""

Test Case 3:
Input:
food_list = [""eggs"", ""milk"", ""bread"", ""butter"", ""cooking oil""]
Output:
""You do have food, your options are eggs or milk or bread or butter""

Test Case 4:
Input:
food_list = [""salmon"", ""asparagus"", ""lemon"", ""olive oil"", ""salt"", ""pepper""]
Output:
""You do have food, your options are salmon or asparagus or lemon or salt or pepper""

Test Case 5:
Input:
food_list = [""rice"", ""soy sauce""]
Output:
""I guess it's pizza tonight"""
85,"#In ping-pong (table tennis), the first person to score 21
#points wins. However, they must win by 2. So, if the score
#is 21-20, they keep playing until someone is ahead by 2
#points.
#
#Write a function called check_pingpong_winner. This
#function will take as input a 2-tuple of two integers: the
#first integer is Player 1's score, and the second integer
#is Player 2's score. check_pingpong_winner should return a
#string:
#
# - If Player 1 has won, return ""Player 1 wins!""
# - If Player 2 has won, return ""Player 2 wins!""
# - If neither player has won, return ""Keep playing!""
#
#For example:
# check_pingpong_winner((19, 13)) -> ""Keep playing!""
# check_pingpong_winner((21, 13)) -> ""Player 1 wins!""
# check_pingpong_winner((19, 21)) -> ""Player 2 wins!""
# check_pingpong_winner((21, 20)) -> ""Keep playing!""
# check_pingpong_winner((25, 25)) -> ""Keep playing!""
# check_pingpong_winner((25, 27)) -> ""Player 2 wins!""
#
#Remember, the function should RETURN these strings, not
#print them.","Test Case 1:
Input: (19, 13)
Output: ""Keep playing!""

Test Case 2:
Input: (21, 13)
Output: ""Player 1 wins!""

Test Case 3:
Input: (19, 21)
Output: ""Player 2 wins!""

Test Case 4:
Input: (21, 20)
Output: ""Keep playing!""

Test Case 5:
Input: (25, 25)
Output: ""Keep playing!"""
86,"#Write a function called count_positive_evens. This function
#should take as input a list of integers, and return as
#output a single integer. The number the function returns
#should be the count of numbers from the list that were both
#positive and even.
#
#For example:
#
# count_positive_evens([5, 7, 9, 8, -1, -2, -3]) -> 1
# count_positive_evens([2, 4, 6, 8, 10, 12, 15]) -> 6
# count_positive_evens([-2, -4, -6, -8, -10, 1]) -> 0
#
#0 should be not counted as a positive even number.
#
#Hint: Remember, even numbers are numbers that have a
#remainder of 0 when divided by 2.","Test Case 1:
Input: [5, 7, 9, 8, -1, -2, -3]
Output: 1

Test Case 2:
Input: [2, 4, 6, 8, 10, 12, 15]
Output: 6

Test Case 3:
Input: [-2, -4, -6, -8, -10, 1]
Output: 0

Test Case 4:
Input: [0, 2, 4, 6, 8, -10, 1, -12]
Output: 4

Test Case 5:
Input: [12, -10, 5, 7, 8, 9]
Output: 2"
87,"#Write a function called check_value. check_value should
#take as input two parameters: a dictionary and a string.
#Both the keys and the values in the dictionary will be
#strings. The string parameter will be the key to look up in
#the dictionary.
#
#check_value should look up the string in the dictionary and
#get its value. Its current value will always be a string;
#however, check_value should try to convert it to an integer
#and a float, then return a message indicating the success
#of those conversions:
#
# - If the key is not found in the dictionary, check_value
#   should return the string: ""Not found!""
# - If the value corresponding to the key can be converted
#   to an integer, check_value should return the string:
#   ""Integer!""
# - Otherwise, if the value corresponding to the key can be
#   converted to a float, check_value should return the
#   string: ""Float!""
# - Otherwise, check_value should return the string:
#   ""String!""
#
#You do not need to check for any other types. We suggest
#using error handling to try to convert the values to the
#corresponding data types.
#
#For example, given this dictionary:
#
# d = {""k1"": ""1.1"", ""k2"": ""1"", ""k3"": ""1.4.6"", ""k4"": ""a""}
#
#Here are some calls and their results:
#
# - check_value(d, ""k1"") -> ""Float!""
# - check_value(d, ""k2"") -> ""Integer!""
# - check_value(d, ""k3"") -> ""String!""
# - check_value(d, ""k4"") -> ""String!""
# - check_value(d, ""k5"") -> ""Not found!""
#
#Hint: The error that arises when trying to convert a
#string to a type it can't convert to (e.g. ""ABC"" to a
#float) is a ValueError. The error that arises when
#trying to access a key that doesn't exist in a
#dictionary is a KeyError.","Test Case 1:
Input:
d = {""k1"": ""1.1"", ""k2"": ""1"", ""k3"": ""1.4.6"", ""k4"": ""a""}
key = ""k1""
Output:
""Float!""

Test Case 2:
Input:
d = {""k1"": ""1.1"", ""k2"": ""1"", ""k3"": ""1.4.6"", ""k4"": ""a""}
key = ""k2""
Output:
""Integer!""

Test Case 3:
Input:
d = {""k1"": ""1.1"", ""k2"": ""1"", ""k3"": ""1.4.6"", ""k4"": ""a""}
key = ""k3""
Output:
""String!""

Test Case 4:
Input:
d = {""k1"": ""1.1"", ""k2"": ""1"", ""k3"": ""1.4.6"", ""k4"": ""a""}
key = ""k4""
Output:
""String!""

Test Case 5:
Input:
d = {""k1"": ""1.1"", ""k2"": ""1"", ""k3"": ""1.4.6"", ""k4"": ""a""}
key = ""k5""
Output:
""Not found!"""
88,"#Write a function called is_palindrome. The function should
#have one parameter, a string. The function should return
#True if the string is a palindrome, False if not.
#
#A palindrome is a sequence of letters that is the same
#forward and backward. For example, ""racecar"" is a
#palindrome. In determining whether a string is a palindrome
#or not, you should ignore punctuation, capitalization and
#spaces. For example, ""Madam in Eden, I'm Adam"" is a
#palindrome.
#
#You may assume that the only characters in the string will
#be letters, spaces, apostrophes, commas, periods, and
#question marks.
#
#Hint: Before checking if the string is a palindrome, get
#rid of the spaces and punctuation marks using the replace()
#method and convert the entire string to upper or lower
#case using the upper() or lower() methods.
#
#Hint 2: There are multiple ways to do this! If you're stuck
#on one way, try a different one. You could use string
#slicing, a for loop, or some string methods. Or, try
#printing the string at different stages to see what's going
#wrong!","Test Case 1:
Input:
""racecar""
Output:
True

Test Case 2:
Input:
""Madam in Eden, I'm Adam""
Output:
True

Test Case 3:
Input:
""Able was I ere I saw Elba""
Output:
True

Test Case 4:
Input:
""hello""
Output:
False

Test Case 5:
Input:
""Was it a car or a cat I saw?""
Output:
True"
89,"#Write a function called not_list. not_list should have two
#parameters: a list of booleans and a list of integers.
#
#The list of integers will represent indices for the list of
#booleans. not_list should switch the values of all the
#booleans located at those indices.
#
#For example:
#
# bool_list = [True, False, False]
# index_list = [0, 2]
# not_list(bool_list, index_list) -> [False, False, True]
#
#After calling not_list, the booleans at indices 0 and 2
#have been switched.
#
#Note that it may be the case that the same index is present
#in the second twice. If this happens, you should switch the
#boolean at that index twice. For example:
#
# bool_list = [True, False, False]
# index_list = [0, 2, 2]
# not_list(bool_list, index_list) -> [False, False, False]
#
#2 is in index_list twice, so the boolean at index 2 is
#switched twice: False to True, then True back to False.
#
#Hint: Remember you can change a list in place! You don't
#need to create a new list. a_list[1] = False, for example,
#changes the item in a_list at index 1 to False.","Test Case 1:
Input:
bool_list = [True, False, False]
index_list = [0, 2]
Output:
[False, False, True]

Test Case 2:
Input:
bool_list = [True, True, True, True]
index_list = [0, 2, 3]
Output:
[False, True, False, False]

Test Case 3:
Input:
bool_list = [False, False, False, False]
index_list = [1, 2, 3]
Output:
[False, True, True, True]

Test Case 4:
Input:
bool_list = [True, True, True]
index_list = [1, 1, 1]
Output:
[True, False, True]

Test Case 5:
Input:
bool_list = [True, True, True, True, True]
index_list = [0, 1, 2, 3, 4]
Output:
[False, False, False, False, False]"
90,"#Create a class called RightTriangle. RightTriangle should
#have two attributes (instance variables): opposite and
#adjacent. Make sure the variable names match those words.
#Both will be floats.
#
#RightTriangle should have a constructor with two required
#parameters, one for each of those attributes (opposite and
#adjacent, in that order).
#
#RightTriangle should also have a method called
#find_hypotenuse. find_hypotenuse should calculate the
#hypotenuse of the triangle based on the current values for
#opposite and adjacent.
#
#hypotenuse should NOT be an attribute of the class;
#instead, hypotenuse should be calculated and returned live
#when the method find_hypotenuse is called.
#
#The find_hypotenuse method should have NO parameters
#besides self. Instead, it should calculate the hypotenuse
#based on the current values for the opposite and adjacent
#attributes.
#
#Hint: In other words: opposite and adjacent will be
#attributes similar to guacamole and cheese in the Burrito
#class from Problem Set 5.1. find_hypotenuse will be a
#method similar to the get_cost method from the Burrito
#class.
#
#Hint 2: The formula for hypotenuse is the square root of
#opposite squared plus adjacent squared. The easiest way to
#find the square root is to use the exponent operator to
#raise the sum to the 0.5 power (e.g. sum**0.5).","Suppose you are an online judge for coding problems. 
I will give you some coding prompts or coding exercises (may be accompanied by a little code snippet sometimes).
You will write me 5 test cases for them. Here's the format:

Test Case 1:
Input:
Output:

..and so on
also rememner, I want the test cases in plain text.

Here's the first problem:

#Create a class called RightTriangle. RightTriangle should
#have two attributes (instance variables): opposite and
#adjacent. Make sure the variable names match those words.
#Both will be floats.
#
#RightTriangle should have a constructor with two required
#parameters, one for each of those attributes (opposite and
#adjacent, in that order).
#
#RightTriangle should also have a method called
#find_hypotenuse. find_hypotenuse should calculate the
#hypotenuse of the triangle based on the current values for
#opposite and adjacent.
#
#hypotenuse should NOT be an attribute of the class;
#instead, hypotenuse should be calculated and returned live
#when the method find_hypotenuse is called.
#
#The find_hypotenuse method should have NO parameters
#besides self. Instead, it should calculate the hypotenuse
#based on the current values for the opposite and adjacent
#attributes.
#
#Hint: In other words: opposite and adjacent will be
#attributes similar to guacamole and cheese in the Burrito
#class from Problem Set 5.1. find_hypotenuse will be a
#method similar to the get_cost method from the Burrito
#class.
#
#Hint 2: The formula for hypotenuse is the square root of
#opposite squared plus adjacent squared. The easiest way to
#find the square root is to use the exponent operator to
#raise the sum to the 0.5 power (e.g. sum**0.5)."
91,"#Remember that Fibonacci's sequence is a sequence of numbers
#where every number is the sum of the previous two numbers.
#
#There exists a variant of Fibonacci's sequence called
#Fibonacci's multiplicative sequence. Fibonacci's
#multiplicative sequence is identical to Fibonacci's
#sequence, except that each number is the PRODUCT of the
#previous two numbers instead of the sum. Let's call these
#FibMult numbers.
#
#In order to make this interesting, we set the first two
#FibMult numbers to 1 and 2. So, the 1st FibMult number is
#1, and the second FibMult number is 2.
#
#So, here are the first few FibMult numbers:
#
#         n  = 1 2 3 4 5  6   7    8       9          10
# FibMult(n) = 1 2 2 4 8 32 256 8192 2097152 17179869184
#
#The sequence gets large fast!
#
#Write the function fib_mult using recursion. fib_mult
#takes as input an integer, and returns the FibMult
#number corresponding to that integer. For example:
#
# - fib_mult(1) = 1
# - fib_mult(2) = 2
# - fib_mult(3) = 2
# - fib_mult(9) = 2097152
# - fib_mult(12) = 618970019642690137449562112
#
#fib_mult MUST be implemented recursively.
#
#Hint: You will actually have two separate base cases,
#one for n = 1 and one for n = 2.","Test Case 1:
Input: 1
Output: 1

Test Case 2:
Input: 2
Output: 2

Test Case 3:
Input: 3
Output: 2

Test Case 4:
Input: 9
Output: 2097152

Test Case 5:
Input: 12
Output: 618970019642690137449562112"
92,"#Write a function called inverted_sort. inverted_ should
#take as input a list of integers, and return as output a
#list with the integers sorted from HIGHEST to LOWEST.
#
#You may use any sorting algorithm you want: bubble, merge,
#insertion, selection, a new sort that you learned on your
#own, or even one you created yourself. You may use loops,
#or you may use recursion.
#
#You may not use Python's native list sort or reverse 
#methods; you must write your own sort.","Test Case 1:
Input: [5, 2, 8, 1, 7]
Output: [8, 7, 5, 2, 1]

Test Case 2:
Input: [10, 5, 20, 15, 25]
Output: [25, 20, 15, 10, 5]

Test Case 3:
Input: [3, 1, 4, 1, 5, 9, 2]
Output: [9, 5, 4, 3, 2, 1, 1]

Test Case 4:
Input: [100, 90, 80, 70, 60]
Output: [100, 90, 80, 70, 60]

Test Case 5:
Input: [2, 1, 3, 5, 4]
Output: [5, 4, 3, 2, 1]"
93,"#Create a class called Rectangle. Rectangle should
#have two attributes (instance variables): length and
#width. Make sure the variable names match those words.
#Both will be floats.
#
#Rectangle should have a constructor with two required
#parameters, one for each of those attributes (length and
#width, in that order).
#
#Rectangle should also have a method called
#find_perimeter. find_perimeter should calculate the
#perimeter of the rectangle based on the current values for
#length and width.
#
#perimeter should NOT be an attribute of the class; instead,
#perimeter should be calculated and returned live when the
#ethod find_perimeter is called.
#
#The find_perimeter method should have NO parameters
#besides self. Instead, it should calculate the perimeter
#based on the current values for the opposite and adjacent
#attributes.
#
#Hint: The formula for perimeter is 2 * length + 2 * width.","Test Case 1:
Input: Rectangle(5.0, 3.0)
Output: 16.0

Test Case 2:
Input: Rectangle(10.5, 7.2)
Output: 35.4

Test Case 3:
Input: Rectangle(2.5, 2.5)
Output: 10.0

Test Case 4:
Input: Rectangle(8.0, 4.0)
Output: 24.0

Test Case 5:
Input: Rectangle(12.3, 4.7)
Output: 34.0"
94,"#In volleyball, the first team to score 25 points wins.
#However, they must win by 2. So, if the score is 25-24,
#they keep playing until someone is ahead by 2 points.
#
#Write a function called check_volleyball_winner. This
#function will take as input a 2-tuple of two integers: the
#first integer is Team 1's score, and the second integer
#is Team 2's score. check_volleyball_winner should return a
#string:
#
# - If Team 1 has won, return ""Team 1 wins!""
# - If Team 2 has won, return ""Team 2 wins!""
# - If neither player has won, return ""Keep playing!""
#
#For example:
# check_volleyball_winner((23, 17)) -> ""Keep playing!""
# check_volleyball_winner((25, 17)) -> ""Team 1 wins!""
# check_volleyball_winner((23, 25)) -> ""Team 2 wins!""
# check_volleyball_winner((25, 24)) -> ""Keep playing!""
# check_volleyball_winner((29, 29)) -> ""Keep playing!""
# check_volleyball_winner((29, 30)) -> ""Keep playing!""
# check_volleyball_winner((29, 31)) -> ""Team 2 wins!""
#
#Remember, the function should RETURN these strings, not
#print them.","Test Case 1:
Input: check_volleyball_winner((23, 17))
Output: ""Keep playing!""

Test Case 2:
Input: check_volleyball_winner((25, 17))
Output: ""Team 1 wins!""

Test Case 3:
Input: check_volleyball_winner((23, 25))
Output: ""Team 2 wins!""

Test Case 4:
Input: check_volleyball_winner((25, 24))
Output: ""Keep playing!""

Test Case 5:
Input: check_volleyball_winner((29, 29))
Output: ""Keep playing!"""
95,"#Write a function called count_squares. This function
#should take as input a list of integers, and return as
#output a single integer. The number the function returns
#should be the number of perfect squares it found in the
#list of integers. You may assume every number in the list
#is between 1 and 1 billion (1,000,000,000).
#
#For example:
#
# count_squares([1, 2, 3, 4, 5, 6, 7, 8, 9]) -> 3
# count_squares([1, 4, 9, 16, 25, 36, 49, 64]) -> 8
# count_squares([2, 3, 5, 6, 7, 8, 10, 11]) -> 0
#
#For this problem, 0 is considered a square.
#
#Hint: Don't get caught up trying to ""remember"" how to
#calculate if a number is a square: we've never done it
#before, but we've covered all the tools you need to do it
#in one of several different ways.","Test Case 1:
Input: 1, 2, 3, 4, 5, 6, 7, 8, 9
Output: 3

Test Case 2:
Input: 1, 4, 9, 16, 25, 36, 49, 64
Output: 8

Test Case 3:
Input: 2, 3, 5, 6, 7, 8, 10, 11
Output: 0

Test Case 4:
Input: 0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100
Output: 11

Test Case 5:
Input: 1000000000
Output: 1"
96,"#A palindrome is a sequence of letters that is the same
#forward and backward. For example, ""racecar"" is a
#palindrome.
#
#Write a function called create_palindrome. The function should
#have one parameter, a string. The function should return the
#string as a palindrome.
#
#If the string was not already a palindrome, the function should
#return a new string made from the original string and the
#reverse of the original string. For example:
#
# create_palindrome(""abc"") -> ""abccba""
#
#However, if the string _is_ already a palindrome, the function
#should just return the original string by itself. For example:
#
# create_palindrome(""racecar"") -> ""racecar""
#
#In determining whether a string is a palindrome or not, you
#should ignore punctuation, capitalization and spaces. For
#example:
#
# create_palindrome(""Madam in Eden, I'm Adam"") -> ""Madam in Eden, I'm Adam""
#
#In creating a palindrome, though, you should use the original
#formatting:
#
# create_palindrome(""Hello there!"") -> ""Hello there!!ereht olleH""
#
#You may assume that the only characters in the string will
#be letters, spaces, apostrophes, commas, periods, and
#question marks.
#
#Hint: Before checking if the string is a palindrome, get
#rid of the spaces and punctuation marks using the replace()
#method and convert the entire string to upper or lower
#case using the upper() or lower() methods. Remember, though,
#to keep the original string as your result should preserve
#the original punctuation and capitalization.
#
#Hint 2: There are multiple ways to do this! If you're stuck
#on one way, try a different one. You could use string
#slicing, a for loop, or some string methods. Or, try
#printing the string at different stages to see what's going
#wrong!","Test Case 1:
Input: ""abc""
Output: ""abccba""

Test Case 2:
Input: ""racecar""
Output: ""racecar""

Test Case 3:
Input: ""Madam in Eden, I'm Adam""
Output: ""Madam in Eden, I'm Adam""

Test Case 4:
Input: ""Hello there!""
Output: ""Hello there!!ereht olleH""

Test Case 5:
Input: ""Was it a car or a cat I saw?""
Output: ""Was it a car or a cat I saw?was I tac a ro rac a ti saW"""
97,"#The game Uno is a card game where each player's goal is
#to get rid of all their cards. A round ends when one player
#has gotten rid of all their cards. They then receive a
#number of points based on the cards left in their opponents'
#hands. The first player to reach 500 points across multiple
#rounds wins the game.
#
#Write a function called check_uno_winner. This function will
#take as input a tuple with at least 2 integers, but up to 8.
#Each integer will represent one player's score.
#
#If any player has more than 500 points, check_uno_winner
#should return the string, ""Player X wins!"", where X refers
#to the position of the player in the list who has more than
#500 points. Because Uno is played in the real world, the
#first player in the list should be referred to as Player 1,
#the second player as Player 2, and so on.
#
#If no player has more than 500 points, check_uno_winner
#should return the string, ""Keep playing!""
#
#For example:
# check_uno_winner((0, 0)) -> ""Keep playing!""
# check_uno_winner((505, 250)) -> ""Player 1 wins!""
# check_uno_winner((250, 505)) -> ""Player 2 wins!""
# check_uno_winner((25, 101, 362, 415)) -> ""Keep playing!""
# check_uno_winner((25, 101, 426, 515)) -> ""Player 4 wins!""
#
#Remember, the function should RETURN these strings, not
#print them. You may assume that only one player will have
#a score above 500.","Test Case 1:
Input: (0, 0)
Output: ""Keep playing!""

Test Case 2:
Input: (505, 250)
Output: ""Player 1 wins!""

Test Case 3:
Input: (250, 505)
Output: ""Player 2 wins!""

Test Case 4:
Input: (25, 101, 362, 415)
Output: ""Keep playing!""

Test Case 5:
Input: (25, 101, 426, 515)
Output: ""Player 4 wins!"""
98,"#Remember that Fibonacci's sequence is a sequence of numbers
#where every number is the sum of the previous two numbers.
#
#Let's write a variant of Fibonacci's sequence called fib_skip.
#Here, every number will be the sum of the previous number,
#and the number two steps earlier. So, the fourth number is
#the sum of the third and first number; the fifth number is
#the sum of the second and fourth number; and so on.
#
#To do this, we must define the first three numbers of the
#sequence as 1, 1, 1. From there, the sequence continues:
#
# 1, 1, 1, 2, 3, 4, 6, 9, 13, 19, 28...
#
#For example, the last number is 28 because it is the sum
#of the previous number (19) and the number two steps before
#the previous number (9). So, fib_skip(11) = fib_skip(10) +
#fib_skip(8).
#
#Write the function fib_skip using recursion. fib_skip
#takes as input an integer, and returns the fib_skip
#number corresponding to that integer. For example:
#
# - fib_skip(1) = 1
# - fib_skip(2) = 1
# - fib_skip(3) = 1
# - fib_skip(4) = 3
# - fib_skip(9) = 13
# - fib_skip(11) = 28
#
#fib_skip MUST be implemented recursively.
#
#Hint: Think first about how many base cases you have!
#The base cases are the numbers for which the answer
#to fib_skip is _defined_, not _calculated_.","Test Case 1:
Input: 1
Output: 1

Test Case 2:
Input: 2
Output: 1

Test Case 3:
Input: 3
Output: 1

Test Case 4:
Input: 4
Output: 3

Test Case 5:
Input: 9
Output: 13"
99,"#The Greatest Common Factor (GCF) of two numbers is the
#largest number that divides evenly into those two
#numbers. For example, the Greatest Common Factor of 48
#and 18 is 6. 6 is the largest number that divides evenly
#into 48 (48 / 6 = 8) and 18 (18 / 6 = 3).
#
#Write a function called find_gcf. find_gcf should have
#two parameters, both integers. find_gcf should return
#the greatest common factor of those two numbers.
#
#For example:
#
# find_gcf(48, 18) -> 6
# find_gcf(21, 7) -> 7
# find_gcf(47, 17) -> 1
#
#If one number is a multiple of the other, the greatest
#common factor is the smaller number (e.g. 21 and 7). If
#the numbers have no common factors, then their greatest
#common factor is 1 (e.g. 47 and 17).","Test Case 1:
Input: (48, 18)
Output: 6

Test Case 2:
Input: (21, 7)
Output: 7

Test Case 3:
Input: (47, 17)
Output: 1

Test Case 4:
Input: (60, 45)
Output: 15

Test Case 5:
Input: (100, 25)
Output: 25"
100,"#Pig Latin is a fictitious language. To translate a word into
#Pig Latin, you would take the consonants up until the first
#vowel, move them to the end, and add ""ay"" to the end.
#
#For example:
#
# pig -> igpay
# david -> avidday
# trash -> ashtray
# scram -> amscray
# translate -> anslatetray
#
#Write a function called to_pig_latin. to_pig_latin will take
#as input a single word, and return the Pig Latin version of
#the word.
#
#For the purposes of this problem, only a, e, i, o, and u are
#vowels: y is a consonant. You may assume that the word will 
#start with at least one consonant, that the letters to move to
#the end will always be the consonants until the first vowel,
#and that the string will be all lower-case.","Test Case 1:
Input: ""pig""
Output: ""igpay""

Test Case 2:
Input: ""david""
Output: ""avidday""

Test Case 3:
Input: ""trash""
Output: ""ashtray""

Test Case 4:
Input: ""scram""
Output: ""amscray""

Test Case 5:
Input: ""translate""
Output: ""anslatetray"""
101,"#Write a function called add_to_dictionary. add_to_dictionary
#should have three parameters: a dictionary, a potential new
#key, and a potential new value.
#
#add_to_dictionary should add the given key and value to the
#dictionary if the key is of a legal type to be used as a
#dictionary key.
#
#If the key is a legal type to be used as a dictionary key,
#return the resultant dictionary.
#
#If the key is _not_ a legal type to be used as a dictionary
#key, return the string ""Error!""
#
#Remember, only immutable types can be used as dictionary
#keys. If you don't remember which types are immutable or
#how to check a value's type, don't fret: there's a way
#to do this without checking them directly!","Test Case 1:
Input: {}, 5, ""five""
Output: {5: ""five""}

Test Case 2:
Input: {1: ""one"", 2: ""two""}, ""three"", 3
Output: {1: ""one"", 2: ""two"", ""three"": 3}

Test Case 3:
Input: {""a"": 1, ""b"": 2}, [""c""], 3
Output: ""Error!""

Test Case 4:
Input: {1: ""one"", 2: ""two""}, 3, ""three""
Output: {1: ""one"", 2: ""two""}

Test Case 5:
Input: {1: ""one"", ""two"": 2}, (""three"",), 3
Output: {1: ""one"", ""two"": 2, (""three"",): 3}"
