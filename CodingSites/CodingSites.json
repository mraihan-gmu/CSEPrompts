{"#":1,"Prompt":"Write a function named capital_indexes. The function takes a single parameter, which is a string. Your function should return a list of all the indexes in the string that have capital letters.","Test Cases":"Test Case 1:\nInput: \"Hello World\"\nOutput: [0, 6]\n\nTest Case 2:\nInput: \"wElcOmE To ChatGPT\"\nOutput: [1, 4, 7, 9, 14]\n\nTest Case 3:\nInput: \"allsmallletters\"\nOutput: []\n\nTest Case 4:\nInput: \"CAPSLOCKON\"\nOutput: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nTest Case 5:\nInput: \"First, Second, Third.\"\nOutput: [0, 7, 15]"}
{"#":2,"Prompt":"Write a function named mid that takes a string as its parameter. Your function should extract and return the middle letter. If the length of the string is even, you should return the middle two letters.","Test Cases":"Test Case 1:\nInput: \"hello\"\nOutput: \"l\"\n\nTest Case 2:\nInput: \"abcdef\"\nOutput: \"cd\"\n\nTest Case 3:\nInput: \"a\"\nOutput: \"a\"\n\nTest Case 4:\nInput: \"ChatGPT\"\nOutput: \"tG\"\n\nTest Case 5:\nInput: \"programming\"\nOutput: \"g\""}
{"#":3,"Prompt":"The aim of this challenge is, given a dictionary of people's online status, to count the number of people who are online.","Test Cases":"Test Case 1:\nInput: {\"Alice\": \"online\", \"Bob\": \"offline\", \"Charlie\": \"online\", \"David\": \"offline\"}\nOutput: 2\n\nTest Case 2:\nInput: {\"Eva\": \"online\", \"Frank\": \"online\", \"Grace\": \"online\"}\nOutput: 3\n\nTest Case 3:\nInput: {\"Henry\": \"offline\", \"Isabelle\": \"offline\", \"Jack\": \"offline\"}\nOutput: 0\n\nTest Case 4:\nInput: {}\nOutput: 0\n\nTest Case 5:\nInput: {\"Katie\": \"online\", \"Liam\": \"offline\", \"Mia\": \"online\", \"Nina\": \"offline\", \"Oscar\": \"online\", \"Paul\": \"online\"}\nOutput: 4"}
{"#":4,"Prompt":"Define a function, random_number, that takes no parameters. The function must generate a random integer between 1 and 100.","Test Cases":"Test Case 1:\nInput:\nOutput: (Any number between 1 and 100, e.g., 57)\n\nTest Case 2:\nInput:\nOutput: (Any number between 1 and 100, e.g., 23)\n\nTest Case 3:\nInput:\nOutput: (Any number between 1 and 100, e.g., 89)\n\nTest Case 4:\nInput:\nOutput: (Any number between 1 and 100, e.g., 1)\n\nTest Case 5:\nInput:\nOutput: (Any number between 1 and 100, e.g., 100)\n\n"}
{"#":5,"Prompt":"Write a function named only_ints that takes two parameters. Your function should return True if both parameters are integers, and False otherwise.","Test Cases":"Test Case 1:\nInput: (5, 10)\nOutput: True\n\nTest Case 2:\nInput: (5, \"10\")\nOutput: False\n\nTest Case 3:\nInput: (\"Hello\", \"World\")\nOutput: False\n\nTest Case 4:\nInput: (7.5, 10)\nOutput: False\n\nTest Case 5:\nInput: (-5, 0)\nOutput: True"}
{"#":6,"Prompt":"Write a function named add_dots that takes a string and adds \".\" in between each letter. For example, calling add_dots(\"test\") should return the string \"t.e.s.t\". Then, below the add_dots function, write another function named remove_dots that removes all dots from a string.","Test Cases":"Test Case 1:\nInput: \"test\"\nOutput: \"t.e.s.t\"\n\nTest Case 2:\nInput: \"hello\"\nOutput: \"h.e.l.l.o\"\n\nTest Case 3:\nInput: \"a\"\nOutput: \"a\"\n\nTest Case 4:\nInput: \"ab\"\nOutput: \"a.b\"\n\nTest Case 5:\nInput: \"dot\"\nOutput: \"d.o.t\"\n\nFor the remove_dots function:\n\nTest Case 1:\nInput: \"t.e.s.t\"\nOutput: \"test\"\n\nTest Case 2:\nInput: \"h.e.l.l.o\"\nOutput: \"hello\"\n\nTest Case 3:\nInput: \"a\"\nOutput: \"a\"\n\nTest Case 4:\nInput: \"..a.b..\"\nOutput: \"ab\"\n\nTest Case 5:\nInput: \"n.o.d.o.t.s\"\nOutput: \"nodots\""}
{"#":7,"Prompt":"The goal of this challenge is to analyze a binary string consisting of only zeros and ones. Your code should find the biggest number of consecutive zeros in the string.","Test Cases":"Test Case 1:\nInput: \"10000101111000\"\nOutput: 4\n\nTest Case 2:\nInput: \"11001110001111\"\nOutput: 3\n\nTest Case 3:\nInput: \"1111111\"\nOutput: 0\n\nTest Case 4:\nInput: \"10000001\"\nOutput: 6\n\nTest Case 5:\nInput: \"00110001001100010000\"\nOutput: 5"}
{"#":8,"Prompt":"Write a function called longest_word that takes one argument, a list of words, and returns the length of the longest word in the list.","Test Cases":"Test Case 1:\nInput: [\"apple\", \"banana\", \"cherry\"]\nOutput: 6\n\nTest Case 2:\nInput: [\"a\", \"ab\", \"abc\", \"abcd\"]\nOutput: 4\n\nTest Case 3:\nInput: [\"short\", \"longer\", \"longest\"]\nOutput: 7\n\nTest Case 4:\nInput: [\"one\", \"two\", \"three\", \"four\", \"five\"]\nOutput: 5\n\nTest Case 5:\nInput: [\"hippopotamus\", \"cat\", \"horse\"]\nOutput: 12"}
{"#":9,"Prompt":"Write a function that counts how many different countries are represented in a list of country IDs.","Test Cases":"Test Case 1:\nInput: [\"US\", \"CA\", \"US\", \"MX\", \"CA\"]\nOutput: 3\n\nTest Case 2:\nInput: [\"FR\", \"FR\", \"FR\", \"FR\"]\nOutput: 1\n\nTest Case 3:\nInput: [\"JP\", \"CN\", \"AU\", \"NZ\", \"IN\", \"SA\", \"ZA\"]\nOutput: 7\n\nTest Case 4:\nInput: []\nOutput: 0\n\nTest Case 5:\nInput: [\"BR\", \"AR\", \"VE\", \"CO\", \"PE\", \"BR\", \"AR\"]\nOutput: 5"}
{"#":10,"Prompt":"A palindrome is a word that is the same forwards as backwards. If the word is the same backwards as forwards, you should return True. Otherwise, you should return False.","Test Cases":"Test Case 1:\nInput: \"radar\"\nOutput: True\n\nTest Case 2:\nInput: \"apple\"\nOutput: False\n\nTest Case 3:\nInput: \"level\"\nOutput: True\n\nTest Case 4:\nInput: \"deified\"\nOutput: True\n\nTest Case 5:\nInput: \"palindrome\"\nOutput: False"}
{"#":11,"Prompt":"Print Hello, World! to stdout.","Test Cases":"Test Case 1:\nInput: (no input since the function doesn't take any parameters)\nOutput: \"Hello, World!\"\n\nTest Case 2:\nInput: (no input since the function doesn't take any parameters)\nOutput: \"Hello, World!\"\n\nTest Case 3:\nInput: (no input since the function doesn't take any parameters)\nOutput: \"Hello, World!\"\n\nTest Case 4:\nInput: (no input since the function doesn't take any parameters)\nOutput: \"Hello, World!\"\n\nTest Case 5:\nInput: (no input since the function doesn't take any parameters)\nOutput: \"Hello, World!\""}
{"#":12,"Prompt":"Given an integer, n, perform the following conditional actions: If n is odd, print Weird. If n is even and in the inclusive range of 2 to 5, print Not Weird. If n is even and in the inclusive range of 6 to 20, print Weird. If n is even and greater than 20, print Not Weird.","Test Cases":"Test Case 1:\nInput: 3\nOutput: \"Weird\"\n\nTest Case 2:\nInput: 4\nOutput: \"Not Weird\"\n\nTest Case 3:\nInput: 8\nOutput: \"Weird\"\n\nTest Case 4:\nInput: 22\nOutput: \"Not Weird\"\n\nTest Case 5:\nInput: 18\nOutput: \"Weird\""}
{"#":13,"Prompt":"Read two integers from STDIN and print three lines where: The first line contains the sum of the two numbers. The second line contains the difference of the two numbers (first - second). The third line contains the product of the two numbers.","Test Cases":"Test Case 1:\nInput:\n3 2\nOutput:\n5\n1\n6\n\nTest Case 2:\nInput:\n-5 4\nOutput:\n-1\n-9\n-20\n\nTest Case 3:\nInput:\n7 0\nOutput:\n7\n7\n0\n\nTest Case 4:\nInput:\n-3 -7\nOutput:\n-10\n4\n21\n\nTest Case 5:\nInput:\n10 5\nOutput:\n15\n5\n50"}
{"#":14,"Prompt":"Read two integers and print two lines. The first line should contain integer division, a\/\/b. The second line should contain float division, a\/b.","Test Cases":"Test Case 1:\nInput:\n4 3\nOutput:\n1\n1.3333333333333333\n\nTest Case 2:\nInput:\n10 2\nOutput:\n5\n5.0\n\nTest Case 3:\nInput:\n5 4\nOutput:\n1\n1.25\n\nTest Case 4:\nInput:\n22 7\nOutput:\n3\n3.142857142857143\n\nTest Case 5:\nInput:\n9 4\nOutput:\n2\n2.25"}
{"#":15,"Prompt":"Read an integer N. For all non-negative integers i<N, print i^2.","Test Cases":"Test Case 1:\nInput:\n3\nOutput:\n0\n1\n4\n\nTest Case 2:\nInput:\n5\nOutput:\n0\n1\n4\n9\n16\n\nTest Case 3:\nInput:\n0\nOutput:\n(No output as the range is empty for i<N)\n\nTest Case 4:\nInput:\n1\nOutput:\n0\n\nTest Case 5:\nInput:\n4\nOutput:\n0\n1\n4\n9"}
{"#":16,"Prompt":"Write a function to check if the given year is leap or not.","Test Cases":"Test Case 1:\nInput: 2000\nOutput: True\n\nTest Case 2:\nInput: 1900\nOutput: False\n\nTest Case 3:\nInput: 2004\nOutput: True\n\nTest Case 4:\nInput: 2100\nOutput: False\n\nTest Case 5:\nInput: 2023\nOutput: False"}
{"#":17,"Prompt":"Without using any string methods, try to print the following: 123...N","Test Cases":"Test Case 1:\nInput: 5\nOutput: 12345\n\nTest Case 2:\nInput: 3\nOutput: 123\n\nTest Case 3:\nInput: 1\nOutput: 1\n\nTest Case 4:\nInput: 10\nOutput: 12345678910\n\nTest Case 5:\nInput: 7\nOutput: 1234567"}
{"#":18,"Prompt":"Take a list of integers (positive or negative or both) and return the sum of the absolute value of each element.","Test Cases":"Test Case 1:\nInput: [2, -3, 4, -1]\nOutput: 10\n\nTest Case 2:\nInput: [-5, -4, -3, -2, -1]\nOutput: 15\n\nTest Case 3:\nInput: [5, 4, 3, 2, 1]\nOutput: 15\n\nTest Case 4:\nInput: [0, -1, 1, 0]\nOutput: 2\n\nTest Case 5:\nInput: [-10, 20, -30, 40]\nOutput: 100"}
{"#":19,"Prompt":"Create a function that takes a number as an argument. Add up all the numbers from 1 to the number you passed to the function.","Test Cases":"Test Case 1:\nInput: 4\nOutput: 10 (1 + 2 + 3 + 4)\n\nTest Case 2:\nInput: 5\nOutput: 15 (1 + 2 + 3 + 4 + 5)\n\nTest Case 3:\nInput: 1\nOutput: 1\n\nTest Case 4:\nInput: 10\nOutput: 55 (1 + 2 + 3 + ... + 10)\n\nTest Case 5:\nInput: 100\nOutput: 5050 (1 + 2 + 3 + ... + 100)\n\n"}
{"#":20,"Prompt":"Create a function that takes a number as an argument, increments the number by +1 and returns the result.","Test Cases":"Test Case 1:\nInput: 5\nOutput: 6\n\nTest Case 2:\nInput: -1\nOutput: 0\n\nTest Case 3:\nInput: 0\nOutput: 1\n\nTest Case 4:\nInput: 99\nOutput: 100\n\nTest Case 5:\nInput: -101\nOutput: -100"}
{"#":21,"Prompt":"Write a function that takes an integer minutes and converts it to seconds.","Test Cases":"Test Case 1:\nInput: 5\nOutput: 300 (5 minutes * 60 seconds\/minute)\n\nTest Case 2:\nInput: 1\nOutput: 60 (1 minute * 60 seconds\/minute)\n\nTest Case 3:\nInput: 45\nOutput: 2700 (45 minutes * 60 seconds\/minute)\n\nTest Case 4:\nInput: 0\nOutput: 0\n\nTest Case 5:\nInput: 120\nOutput: 7200 (120 minutes * 60 seconds\/minute)"}
{"#":22,"Prompt":"There is a single operator in Python, capable of providing the remainder of a division operation. Two numbers are passed as parameters. The first parameter divided by the second parameter will have a remainder, possibly zero. Return that value.","Test Cases":"Test Case 1:\nInput: 5, 2\nOutput: 1 (Because 5 divided by 2 leaves a remainder of 1)\n\nTest Case 2:\nInput: 7, 3\nOutput: 1 (Because 7 divided by 3 leaves a remainder of 1)\n\nTest Case 3:\nInput: 10, 4\nOutput: 2 (Because 10 divided by 4 leaves a remainder of 2)\n\nTest Case 4:\nInput: 8, 2\nOutput: 0 (Because 8 divided by 2 leaves no remainder)\n\nTest Case 5:\nInput: 15, 5\nOutput: 0 (Because 15 divided by 5 leaves no remainder)"}
{"#":23,"Prompt":"Create a function that takes length and width and finds the perimeter of a rectangle.","Test Cases":"Test Case 1:\nInput: 5, 3\nOutput: 16 (Because 2*(5+3) = 16)\n\nTest Case 2:\nInput: 7, 2\nOutput: 18 (Because 2*(7+2) = 18)\n\nTest Case 3:\nInput: 10, 4\nOutput: 28 (Because 2*(10+4) = 28)\n\nTest Case 4:\nInput: 6, 6\nOutput: 24 (Because 2*(6+6) = 24)\n\nTest Case 5:\nInput: 8, 5\nOutput: 26 (Because 2*(8+5) = 26)"}
{"#":24,"Prompt":"Given two numbers, return True if the sum of both numbers is less than 100. Otherwise return False.","Test Cases":"Test Case 1:\nInput: 45, 50\nOutput: False (Because 45 + 50 = 95, which is less than 100)\n\nTest Case 2:\nInput: 30, 20\nOutput: True (Because 30 + 20 = 50, which is less than 100)\n\nTest Case 3:\nInput: 90, 10\nOutput: False (Because 90 + 10 = 100, which is not less than 100)\n\nTest Case 4:\nInput: -10, 5\nOutput: True (Because -10 + 5 = -5, which is less than 100)\n\nTest Case 5:\nInput: 50, 49\nOutput: True (Because 50 + 49 = 99, which is less than 100)\n\n"}
{"#":25,"Prompt":"Create a function that takes a number as its only argument and returns True if it's less than or equal to zero, otherwise return False.","Test Cases":"Test Case 1:\nInput: -5\nOutput: True\n\nTest Case 2:\nInput: 1\nOutput: False\n\nTest Case 3:\nInput: 0\nOutput: True\n\nTest Case 4:\nInput: -0.1\nOutput: True\n\nTest Case 5:\nInput: 10\nOutput: False"}
{"#":26,"Prompt":"Create a function that takes a list and returns the first element.","Test Cases":"Test Case 1:\nInput: [5, 4, 3, 2, 1]\nOutput: 5\n\nTest Case 2:\nInput: [\"apple\", \"banana\", \"cherry\"]\nOutput: \"apple\"\n\nTest Case 3:\nInput: [1]\nOutput: 1\n\nTest Case 4:\nInput: [True, False, True]\nOutput: True\n\nTest Case 5:\nInput: [3.5, 4.6, 5.7]\nOutput: 3.5"}
{"#":27,"Prompt":"The parameter weekday is True if it is a weekday, and the parameter vacation is True if we are on vacation. We sleep in if it is not a weekday or we're on vacation. Return True if we sleep in.","Test Cases":"Test Case 1:\nInput: weekday = True, vacation = False\nOutput: False (It's a weekday and we're not on vacation)\n\nTest Case 2:\nInput: weekday = False, vacation = False\nOutput: True (It's not a weekday and we're not on vacation)\n\nTest Case 3:\nInput: weekday = False, vacation = True\nOutput: True (It's not a weekday and we're on vacation)\n\nTest Case 4:\nInput: weekday = True, vacation = True\nOutput: True (It's a weekday but we're on vacation)\n\nTest Case 5:\nInput: weekday = False, vacation = False\nOutput: True (It's not a weekday and we're not on vacation)"}
{"#":28,"Prompt":"We have two monkeys, a and b, and the parameters a_smile and b_smile indicate if each is smiling. We are in trouble if they are both smiling or if neither of them is smiling. Return True if we are in trouble.","Test Cases":"Test Case 1:\nInput: a_smile = True, b_smile = True\nOutput: True (Both are smiling)\n\nTest Case 2:\nInput: a_smile = False, b_smile = False\nOutput: True (Neither is smiling)\n\nTest Case 3:\nInput: a_smile = True, b_smile = False\nOutput: False (Only one is smiling)\n\nTest Case 4:\nInput: a_smile = False, b_smile = True\nOutput: False (Only one is smiling)\n\nTest Case 5:\nInput: a_smile = False, b_smile = False\nOutput: True (Neither is smiling)\n\n"}
{"#":29,"Prompt":"Given two int values, return their sum. Unless the two values are the same, then return double their sum.","Test Cases":"Test Case 1:\nInput: 5, 5\nOutput: 20 (Because 5 + 5 = 10 and 10*2 = 20)\n\nTest Case 2:\nInput: 3, 7\nOutput: 10 (Simply 3 + 7)\n\nTest Case 3:\nInput: 0, 0\nOutput: 0 (Because 0 + 0 = 0 and 0*2 = 0)\n\nTest Case 4:\nInput: -5, 5\nOutput: 0 (Simply -5 + 5)\n\nTest Case 5:\nInput: 6, 6\nOutput: 24 (Because 6 + 6 = 12 and 12*2 = 24)"}
{"#":30,"Prompt":"Given an int n, return the absolute difference between n and 21, except return double the absolute difference if n is over 21.","Test Cases":"Test Case 1:\nInput: 18\nOutput: 3 (Because 21 - 18 = 3)\n\nTest Case 2:\nInput: 25\nOutput: 8 (Because (25 - 21) * 2 = 8)\n\nTest Case 3:\nInput: 21\nOutput: 0 (No difference)\n\nTest Case 4:\nInput: 30\nOutput: 18 (Because (30 - 21) * 2 = 18)\n\nTest Case 5:\nInput: 15\nOutput: 6 (Because 21 - 15 = 6)"}
{"#":31,"Prompt":"We have a loud talking parrot. The \"hour\" parameter is the current hour time in the range 0..23. We are in trouble if the parrot is talking and the hour is before 7 or after 20. Return True if we are in trouble.","Test Cases":"Test Case 1:\nInput: talking = True, hour = 6\nOutput: True (The parrot is talking before 7)\n\nTest Case 2:\nInput: talking = True, hour = 7\nOutput: False (The parrot is talking but it's not before 7 or after 20)\n\nTest Case 3:\nInput: talking = True, hour = 21\nOutput: True (The parrot is talking after 20)\n\nTest Case 4:\nInput: talking = False, hour = 5\nOutput: False (The parrot isn't talking)\n\nTest Case 5:\nInput: talking = True, hour = 12\nOutput: False (The parrot is talking but it's during allowed hours)"}
{"#":32,"Prompt":"Given 2 ints, a and b, return True if one if them is 10 or if their sum is 10.","Test Cases":"Test Case 1:\nInput: a = 5, b = 5\nOutput: True (Because 5 + 5 = 10)\n\nTest Case 2:\nInput: a = 10, b = 3\nOutput: True (Because one of them is 10)\n\nTest Case 3:\nInput: a = 4, b = 3\nOutput: False (Neither is 10, and their sum isn't 10)\n\nTest Case 4:\nInput: a = 7, b = 10\nOutput: True (Because one of them is 10)\n\nTest Case 5:\nInput: a = 2, b = 8\nOutput: True (Because 2 + 8 = 10)"}
{"#":33,"Prompt":"Given an int n, return True if it is within 10 of 100 or 200. Note: abs(num) computes the absolute value of a number.","Test Cases":"Test Case 1:\nInput: 92\nOutput: True (Because it's within 10 of 100)\n\nTest Case 2:\nInput: 112\nOutput: True (Because it's within 10 of 100)\n\nTest Case 3:\nInput: 205\nOutput: True (Because it's within 10 of 200)\n\nTest Case 4:\nInput: 50\nOutput: False (It's not within 10 of either 100 or 200)\n\nTest Case 5:\nInput: 190\nOutput: True (Because it's within 10 of 200)"}
{"#":34,"Prompt":"Given 2 int values, return True if one is negative and one is positive. Except if the parameter \"negative\" is True, then return True only if both are negative.","Test Cases":"Test Case 1:\nInput: a = 5, b = -5, negative = False\nOutput: True (One is positive and one is negative)\n\nTest Case 2:\nInput: a = -5, b = -5, negative = True\nOutput: True (Both are negative and the \"negative\" parameter is True)\n\nTest Case 3:\nInput: a = 5, b = 5, negative = False\nOutput: False (Both are positive)\n\nTest Case 4:\nInput: a = -5, b = 5, negative = True\nOutput: False (One is negative, one is positive but the \"negative\" parameter is True)\n\nTest Case 5:\nInput: a = -5, b = -7, negative = False\nOutput: False (Both are negative but the \"negative\" parameter is False)"}
{"#":35,"Prompt":"Given a string, return a new string where \"not \" has been added to the front. However, if the string already begins with \"not\", return the string unchanged.","Test Cases":"Test Case 1:\nInput: \"happy\"\nOutput: \"not happy\"\n\nTest Case 2:\nInput: \"not bad\"\nOutput: \"not bad\" (Because it already begins with \"not\")\n\nTest Case 3:\nInput: \"sad\"\nOutput: \"not sad\"\n\nTest Case 4:\nInput: \"not good\"\nOutput: \"not good\" (Because it already begins with \"not\")\n\nTest Case 5:\nInput: \"okay\"\nOutput: \"not okay\""}
{"#":36,"Prompt":"Given a non-empty string and an int n, return a new string where the char at index n has been removed. The value of n will be a valid index of a char in the original string (i.e. n will be in the range 0..len(str)-1 inclusive).","Test Cases":"Test Case 1:\nInput: str = \"hello\", n = 1\nOutput: \"hllo\" (Because the character at index 1 is 'e')\n\nTest Case 2:\nInput: str = \"world\", n = 3\nOutput: \"worl\" (Because the character at index 3 is 'l')\n\nTest Case 3:\nInput: str = \"python\", n = 0\nOutput: \"ython\" (Because the character at index 0 is 'p')\n\nTest Case 4:\nInput: str = \"example\", n = 6\nOutput: \"exampl\" (Because the character at index 6 is 'e')\n\nTest Case 5:\nInput: str = \"remove\", n = 2\nOutput: \"remve\" (Because the character at index 2 is 'o')"}
{"#":37,"Prompt":"Add the numbers 1, 2, and 3 to the \"numbers\" list, and see what the \"print\" statement outputs","Test Cases":"Test Case 1:\nInput: numbers = []\nOutput: [1, 2, 3]\n\nTest Case 2:\nInput: numbers = [0]\nOutput: [0, 1, 2, 3]\n\nTest Case 3:\nInput: numbers = [4, 5, 6]\nOutput: [4, 5, 6, 1, 2, 3]\n\nTest Case 4:\nInput: numbers = [3, 2, 1]\nOutput: [3, 2, 1, 1, 2, 3]\n\nTest Case 5:\nInput: numbers = [-1, -2, -3]\nOutput: [-1, -2, -3, 1, 2, 3]"}
{"#":38,"Prompt":"Fix the last line so that it outputs the sum of 1 and 2","Test Cases":"Test Case 1:\nInput:\na = 1\nb = 2\nprint(a - b)\nOutput:\n3\n\nTest Case 2:\nInput:\nx = 1\ny = 2\nprint(x * y)\nOutput:\n3\n\nTest Case 3:\nInput:\nnum1 = 1\nnum2 = 2\nprint(num1 \/ num2)\nOutput:\n3\n\nTest Case 4:\nInput:\nfirst = 1\nsecond = 2\nprint(first)\nOutput:\n3\n\nTest Case 5:\nInput:\none = 1\ntwo = 2\nprint(one % two)\nOutput:\n3"}
{"#":39,"Prompt":"Use the 'format' method to print out the specified string with the correct values inserted","Test Cases":"Test Case 1:\nInput:\n\"Hello, {}!\"\nOutput:\n\"Hello, World!\"\n\nTest Case 2:\nInput:\n\"I have {} apples and {} oranges.\"\nOutput:\n\"I have 5 apples and 6 oranges.\"\n\nTest Case 3:\nInput:\n\"My favorite color is {}.\"\nOutput:\n\"My favorite color is blue.\"\n\nTest Case 4:\nInput:\n\"{} + {} = {}\"\nOutput:\n\"3 + 4 = 7\"\n\nTest Case 5:\nInput:\n\"{} is the capital of {}.\"\nOutput:\n\"Paris is the capital of France.\""}
{"#":40,"Prompt":"Loop through and print out all even numbers from the numbers list in the same order they are received. Don't print any numbers that come after 237 in the sequence","Test Cases":"Test Case 1:\nInput:\n[2, 4, 6, 8, 237, 10, 12]\nOutput:\n2\n4\n6\n8\n\nTest Case 2:\nInput:\n[1, 3, 5, 7, 9, 2, 4, 6, 237, 238, 240]\nOutput:\n2\n4\n6\n\nTest Case 3:\nInput:\n[237, 2, 4, 6, 8, 10]\nOutput:\n\n(Note: No numbers should be printed since 237 is the first in the sequence)\n\nTest Case 4:\nInput:\n[2, 4, 6, 237, 8, 10, 12, 14, 16]\nOutput:\n2\n4\n6\n\nTest Case 5:\nInput:\n[1, 3, 237, 5, 238, 240, 242, 244]\nOutput:\n\n(Note: No even numbers before 237 in this sequence)"}
{"#":41,"Prompt":"Add a function named list_benefits() that returns the following list of strings: \"More organized code\", \"More readable code\", \"Easier code reuse\", \"Allowing programmers to share and connect code together\". Add a function named build_sentence(info) which receives a single argument containing a string and returns a sentence starting with the given string and ending with the string \" is a benefit of functions!\"","Test Cases":"Test Case 1:\nFunction Call:\nlist_benefits()\nOutput:\n[\"More organized code\", \"More readable code\", \"Easier code reuse\", \"Allowing programmers to share and connect code together\"]\n\nTest Case 2:\nFunction Call:\nbuild_sentence(\"More organized code\")\nOutput:\n\"More organized code is a benefit of functions!\"\n\nTest Case 3:\nFunction Call:\nbuild_sentence(\"More readable code\")\nOutput:\n\"More readable code is a benefit of functions!\"\n\nTest Case 4:\nFunction Call:\nbuild_sentence(\"Easier code reuse\")\nOutput:\n\"Easier code reuse is a benefit of functions!\"\n\nTest Case 5:\nFunction Call:\nbuild_sentence(\"Allowing programmers to share and connect code together\")\nOutput:\n\"Allowing programmers to share and connect code together is a benefit of functions!\""}
{"#":42,"Prompt":"You are given a function f(X) = X^2. You are also given K lists. The ith list consists of Ni elements. You have to pick one element from each list so that the value from the equation below is maximized: S = (f(X1) + f(X2) + ... + f(Xk)) % M. Xi denotes the element picked from the ith list. Compute the maximum value of S % M.","Test Cases":"Test Case 1:\nInput:\nK = 2, M = 1000\nLists:\n[2, 5, 4]\n[8, 3]\nOutput:\n897\n\nExplanation:\nThe optimal solution is to pick 5 from the first list and 8 from the second list.\nS = (5^2 + 8^2) % 1000 = (25 + 64) % 1000 = 89 % 1000 = 89.\nHowever, we are looking for the maximum S % M which is 897 (since 1000 - 89 = 911).\n\nTest Case 2:\nInput:\nK = 2, M = 100\nLists:\n[1, 7]\n[6, 9]\nOutput:\n130\n\nExplanation:\nThe optimal solution is 7 from the first list and 9 from the second list.\nS = (7^2 + 9^2) % 100 = (49 + 81) % 100 = 130 % 100 = 30.\nBut, the maximum S % M is 130.\n\nTest Case 3:\nInput:\nK = 3, M = 1000\nLists:\n[1, 2]\n[3, 4]\n[5, 6]\nOutput:\n161\n\nExplanation:\nThe optimal solution is 2 from the first list, 4 from the second, and 5 from the third.\nS = (2^2 + 4^2 + 5^2) % 1000 = (4 + 16 + 25) % 1000 = 45 % 1000 = 45.\nThe maximum S % M is 955.\n\nTest Case 4:\nInput:\nK = 1, M = 10\nLists:\n[3, 4, 5]\nOutput:\n25\n\nExplanation:\nThe optimal solution is 5 from the list.\nS = 5^2 % 10 = 25 % 10 = 5.\nThe maximum S % M is 25.\n\nTest Case 5:\nInput:\nK = 3, M = 100\nLists:\n[10]\n[10]\n[10]\nOutput:\n300\n\nExplanation:\nThe optimal solution is to pick 10 from all three lists.\nS = (10^2 + 10^2 + 10^2) % 100 = (100 + 100 + 100) % 100 = 300 % 100 = 0.\nThe maximum S % M is 300.\n\n"}
{"#":43,"Prompt":"You are given the coefficients of a polynomial P. Your task is to find the value of P at point x.","Test Cases":"Test Case 1:\nInput:\nCoefficients: [1, 0, -1]\nx = 2\nOutput:\n3\n\nTest Case 2:\nInput:\nCoefficients: [1, -3, 2]\nx = 1\nOutput:\n0\n\nTest Case 3:\nInput:\nCoefficients: [1, 0, 0, 0, -1]\nx = -1\nOutput:\n0\n\nTest Case 4:\nInput:\nCoefficients: [3, 0, 2]\nx = 0\nOutput:\n2\n\nTest Case 5:\nInput:\nCoefficients: [2, -4, 1, -5]\nx = 3\nOutput:\n16"}
{"#":44,"Prompt":"You are given a square matrix A with dimensions N x N. Your task is to find the determinant.","Test Cases":"Test Case 1:\nInput:\nMatrix A:\n[[1]]\nOutput:\n1\n\nTest Case 2:\nInput:\nMatrix A:\n[[1, 2],\n[3, 4]]\nOutput:\n-2\n\nTest Case 3:\nInput:\nMatrix A:\n[[1, 2, 3],\n[0, 1, 4],\n[5, 6, 0]]\nOutput:\n5\n\nTest Case 4:\nInput:\nMatrix A:\n[[2, 1, 1],\n[1, 3, 2],\n[1, 0, 0]]\nOutput:\n3\n\nTest Case 5:\nInput:\nMatrix A:\n[[3, 2, 0, 1],\n[1, 1, 2, 1],\n[1, 3, 9, 7],\n[5, 2, 0, 9]]\nOutput:\n-376"}
{"#":45,"Prompt":"You are given two arrays A and B. Both have dimensions of N x N. Your task is to compute their matrix product.","Test Cases":"Test Case 1:\nInput:\nMatrix A:\n[[1]]\nMatrix B:\n[[2]]\nOutput:\n[[2]]\n\nTest Case 2:\nInput:\nMatrix A:\n[[1, 2],\n[3, 4]]\nMatrix B:\n[[2, 0],\n[1, 3]]\nOutput:\n[[4, 6],\n[10, 12]]\n\nTest Case 3:\nInput:\nMatrix A:\n[[1, 0, 2],\n[0, 1, 1],\n[1, 1, 0]]\nMatrix B:\n[[1, 2, 1],\n[0, 1, 0],\n[1, 3, 2]]\nOutput:\n[[3, 8, 5],\n[1, 4, 2],\n[1, 3, 1]]\n\nTest Case 4:\nInput:\nMatrix A:\n[[1, 2, 1],\n[0, 1, 0],\n[2, 3, 4]]\nMatrix B:\n[[2, 5, 1],\n[6, 7, 1],\n[0, 8, 1]]\nOutput:\n[[14, 21, 4],\n[6, 7, 1],\n[8, 63, 6]]\n\nTest Case 5:\nInput:\nMatrix A:\n[[3, 0, 2],\n[2, 0, -2],\n[0, 1, 1]]\nMatrix B:\n[[0, 0, 1],\n[3, -1, 0],\n[1, 2, 1]]\nOutput:\n[[6, 4, 5],\n[-2, -4, 0],\n[4, 1, 1]]"}
{"#":46,"Prompt":"You are given two arrays: A and B. Your task is to compute their inner and outer product.","Test Cases":"Test Case 1:\nInput:\nArray A: [1]\nArray B: [2]\nOutput:\nInner Product: 2\nOuter Product:\n[[2]]\n\nTest Case 2:\nInput:\nArray A: [1, 2]\nArray B: [3, 4]\nOutput:\nInner Product: 11\nOuter Product:\n[[3, 4],\n[6, 8]]\n\nTest Case 3:\nInput:\nArray A: [1, 2, 3]\nArray B: [4, 5, 6]\nOutput:\nInner Product: 32\nOuter Product:\n[[ 4, 5, 6],\n[ 8, 10, 12],\n[12, 15, 18]]\n\nTest Case 4:\nInput:\nArray A: [2, 4, 6]\nArray B: [1, 3, 5]\nOutput:\nInner Product: 44\nOuter Product:\n[[ 2, 6, 10],\n[ 4, 12, 20],\n[ 6, 18, 30]]\n\nTest Case 5:\nInput:\nArray A: [1, 0, -1]\nArray B: [0, 1, 2]\nOutput:\nInner Product: -1\nOuter Product:\n[[ 0, 1, 2],\n[ 0, 0, 0],\n[ 0, -1, -2]]"}
{"#":47,"Prompt":"You are given a 2-D array of size N x M. Your task is to find: The mean along axis 1. The var along axis 0. The std along axis None.","Test Cases":"Test Case 1:\nInput:\nArray:\n[[1, 2, 3],\n[4, 5, 6]]\nOutput:\nMean along axis 1: [2. 5.]\nVariance along axis 0: [2.25 2.25 2.25]\nStandard Deviation along axis None: 1.8708286933869707\n\nTest Case 2:\nInput:\nArray:\n[[10, 20, 30, 40],\n[50, 60, 70, 80]]\nOutput:\nMean along axis 1: [ 25. 65.]\nVariance along axis 0: [625. 625. 625. 625.]\nStandard Deviation along axis None: 27.386127875258307\n\nTest Case 3:\nInput:\nArray:\n[[1, 2],\n[3, 4],\n[5, 6]]\nOutput:\nMean along axis 1: [1.5 3.5 5.5]\nVariance along axis 0: [4.66666667 4.66666667]\nStandard Deviation along axis None: 1.8708286933869707\n\nTest Case 4:\nInput:\nArray:\n[[1, 1, 1],\n[2, 2, 2],\n[3, 3, 3]]\nOutput:\nMean along axis 1: [1. 2. 3.]\nVariance along axis 0: [0.66666667 0.66666667 0.66666667]\nStandard Deviation along axis None: 0.816496580927726\n\nTest Case 5:\nInput:\nArray:\n[[4, 8],\n[12, 16]]\nOutput:\nMean along axis 1: [ 6. 14.]\nVariance along axis 0: [16. 16.]\nStandard Deviation along axis None: 5.656854249492381\n\n"}
{"#":48,"Prompt":"You are given a 2-D array with dimensions N x M. Your task is to perform the min function over axis 1 and then find the max of that.","Test Cases":"Test Case 1:\nInput:\nArray:\n[[1, 3, 5],\n[2, 4, 6]]\nOutput:\nResult after min along axis 1: [1, 2]\nMax of the result: 2\n\nTest Case 2:\nInput:\nArray:\n[[10, 20, 30],\n[5, 15, 25]]\nOutput:\nResult after min along axis 1: [10, 5]\nMax of the result: 10\n\nTest Case 3:\nInput:\nArray:\n[[1, 0, -1],\n[2, -2, 4],\n[5, 6, -3]]\nOutput:\nResult after min along axis 1: [-1, -2, -3]\nMax of the result: -1\n\nTest Case 4:\nInput:\nArray:\n[[4, 8],\n[1, 2]]\nOutput:\nResult after min along axis 1: [4, 1]\nMax of the result: 4\n\nTest Case 5:\nInput:\nArray:\n[[0, 0, 0],\n[0, 0, 0],\n[0, 0, 0]]\nOutput:\nResult after min along axis 1: [0, 0, 0]\nMax of the result: 0"}
{"#":49,"Prompt":"You are given a 2-D array with dimensions N x M. Your task is to perform the sum function over axis 0 and then find the product of that result.","Test Cases":"Test Case 1:\nInput:\n2 3\n1 2 3\n4 5 6\nOutput:\n5 7 9\n315\n\nTest Case 2:\nInput:\n3 2\n1 2\n3 4\n5 6\nOutput:\n9 12\n108\n\nTest Case 3:\nInput:\n1 1\n7\nOutput:\n7\n7\n\nTest Case 4:\nInput:\n3 3\n1 2 3\n4 5 6\n7 8 9\nOutput:\n12 15 18\n3240\n\nTest Case 5:\nInput:\n2 4\n-1 2 -3 4\n1 -2 3 -4\nOutput:\n0 0 0 0\n0"}
{"#":50,"Prompt":"Write a function named capital_indexes. The function takes a single parameter, which is a string. Your function should return a list of all the indexes in the string that have capital letters.","Test Cases":"Test Case 1:\nInput:\n\"HelloWorld\"\nOutput:\n[0, 5]\n\nTest Case 2:\nInput:\n\"PythonIsFun\"\nOutput:\n[0, 6, 8]\n\nTest Case 3:\nInput:\n\"JAVA\"\nOutput:\n[0, 1, 2, 3]\n\nTest Case 4:\nInput:\n\"capitalIndexes\"\nOutput:\n[]\n\nTest Case 5:\nInput:\n\"mIxEdCaSe\"\nOutput:\n[1, 4, 6]"}
{"#":51,"Prompt":"Write a function named mid that takes a string as its parameter. Your function should extract and return the middle letter. If the length of the string is even, you should return the middle two letters.","Test Cases":"Test Case 1:\nInput:\n\"hello\"\nOutput:\n\"l\"\n\nTest Case 2:\nInput:\n\"worlds\"\nOutput:\n\"rl\"\n\nTest Case 3:\nInput:\n\"python\"\nOutput:\n\"th\"\n\nTest Case 4:\nInput:\n\"A\"\nOutput:\n\"A\"\n\nTest Case 5:\nInput:\n\"middle\"\nOutput:\n\"d\""}
{"#":52,"Prompt":"The aim of this challenge is to write a function that determines who is online, offline and away. If your function is called without any arguments, it should return \"no one online\".","Test Cases":"Test Case 1:\nInput:\n{}\nOutput:\n\"no one online\"\n\nTest Case 2:\nInput:\n{\n\"Alice\": \"online\",\n\"Bob\": \"offline\",\n\"Charlie\": \"away\"\n}\nOutput:\nOnline: [\"Alice\"], Offline: [\"Bob\"], Away: [\"Charlie\"]\n\nTest Case 3:\nInput:\n{\n\"David\": \"online\",\n\"Eve\": \"online\",\n\"Frank\": \"away\",\n\"Grace\": \"away\"\n}\nOutput:\nOnline: [\"David\", \"Eve\"], Offline: [], Away: [\"Frank\", \"Grace\"]\n\nTest Case 4:\nInput:\n{\n\"Hannah\": \"offline\",\n\"Isaac\": \"offline\"\n}\nOutput:\nOnline: [], Offline: [\"Hannah\", \"Isaac\"], Away: []\n\nTest Case 5:\nInput:\n{\n\"Jack\": \"away\"\n}\nOutput:\nOnline: [], Offline: [], Away: [\"Jack\"]"}
{"#":53,"Prompt":"Define a function random_number that takes no parameters, and returns a random integer between 1 and 100 (inclusive).","Test Cases":"Test Case 1:\nCall:\nrandom_number()\nExpected Output:\nAn integer between 1 and 100 (inclusive).\n\nTest Case 2:\nCall:\nrandom_number()\nExpected Output:\nAn integer between 1 and 100 (inclusive).\n\nTest Case 3:\nCall:\nrandom_number()\nExpected Output:\nAn integer between 1 and 100 (inclusive).\n\nTest Case 4:\nCall:\nrandom_number()\nExpected Output:\nAn integer between 1 and 100 (inclusive).\n\nTest Case 5:\nCall:\nrandom_number()\nExpected Output:\nAn integer between 1 and 100 (inclusive)."}
{"#":54,"Prompt":"Write a function named only_ints that takes two parameters. Your function should return True if both parameters are integers, and False otherwise.","Test Cases":"Test Case 1:\nInput:\n5, 10\nOutput:\nTrue\n\nTest Case 2:\nInput:\n5, \"hello\"\nOutput:\nFalse\n\nTest Case 3:\nInput:\n\"10\", 20\nOutput:\nFalse\n\nTest Case 4:\nInput:\n-5, 0\nOutput:\nTrue\n\nTest Case 5:\nInput:\n3.5, 4\nOutput:\nFalse"}
{"#":55,"Prompt":"Write a function named add_dots that takes a string and adds \".\" in between each letter. Write another function named remove_dots that removes all dots.","Test Cases":"Test Case 1:\nInput (for add_dots):\n\"test\"\nOutput:\n\"t.e.s.t\"\n\nInput (for remove_dots):\n\"t.e.s.t\"\nOutput:\n\"test\"\n\nTest Case 2:\nInput (for add_dots):\n\"hello\"\nOutput:\n\"h.e.l.l.o\"\n\nInput (for remove_dots):\n\"h.e.l.l.o\"\nOutput:\n\"hello\"\n\nTest Case 3:\nInput (for add_dots):\n\"a\"\nOutput:\n\"a\"\n\nInput (for remove_dots):\n\"a.b.c\"\nOutput:\n\"abc\"\n\nTest Case 4:\nInput (for add_dots):\n\"dot\"\nOutput:\n\"d.o.t\"\n\nInput (for remove_dots):\n\"d.o.t\"\nOutput:\n\"dot\"\n\nTest Case 5:\nInput (for add_dots):\n\"abc\"\nOutput:\n\"a.b.c\"\n\nInput (for remove_dots):\n\"a..b..c\"\nOutput:\n\"abc\""}
{"#":56,"Prompt":"The goal of this challenge is to analyze a binary string consisting of only zeros and ones. Your code should find the biggest number of consecutive zeros in the string.","Test Cases":"Test Case 1:\nInput:\n\"1000111011100\"\nOutput:\n3\n\nTest Case 2:\nInput:\n\"1100111111001101\"\nOutput:\n4\n\nTest Case 3:\nInput:\n\"1001\"\nOutput:\n2\n\nTest Case 4:\nInput:\n\"1111111\"\nOutput:\n0\n\nTest Case 5:\nInput:\n\"01111000001111\"\nOutput:\n5"}
{"#":57,"Prompt":"Define a function named all_equal that takes a list and checks whether all elements in the list are the same.","Test Cases":"Test Case 1:\nInput:\n[1, 1, 1, 1]\nOutput:\nTrue\n\nTest Case 2:\nInput:\n[\"hello\", \"hello\", \"hello\"]\nOutput:\nTrue\n\nTest Case 3:\nInput:\n[10, 10, 15, 10]\nOutput:\nFalse\n\nTest Case 4:\nInput:\n[]\nOutput:\nTrue\n\nTest Case 5:\nInput:\n[7]\nOutput:\nTrue"}
{"#":58,"Prompt":"Write a function that takes a list of lists and flattens it into a one-dimensional list.","Test Cases":"Test Case 1:\nInput:\n[[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nOutput:\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nTest Case 2:\nInput:\n[[\"a\", \"b\", \"c\"], [\"d\", \"e\"], [\"f\"]]\nOutput:\n[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n\nTest Case 3:\nInput:\n[[1, 2], [3, 4], [5, 6], [7, 8]]\nOutput:\n[1, 2, 3, 4, 5, 6, 7, 8]\n\nTest Case 4:\nInput:\n[[], [], [1, 2, 3], [], [4, 5]]\nOutput:\n[1, 2, 3, 4, 5]\n\nTest Case 5:\nInput:\n[[1], [2], [3], [4], [5]]\nOutput:\n[1, 2, 3, 4, 5]\n\n"}
{"#":59,"Prompt":"Create a function that finds how many steps it takes from a number to reach 1 by following Collatz Conjecture rules.","Test Cases":"Test Case 1:\nInput:\n6\nOutput:\n8\n(Explanation: 6 \u2192 3 \u2192 10 \u2192 5 \u2192 16 \u2192 8 \u2192 4 \u2192 2 \u2192 1)\n\nTest Case 2:\nInput:\n1\nOutput:\n0\n(Explanation: 1 is already at the target)\n\nTest Case 3:\nInput:\n12\nOutput:\n9\n(Explanation: 12 \u2192 6 \u2192 3 \u2192 10 \u2192 5 \u2192 16 \u2192 8 \u2192 4 \u2192 2 \u2192 1)\n\nTest Case 4:\nInput:\n19\nOutput:\n20\n(Explanation: 19 \u2192 58 \u2192 29 \u2192 88 \u2192 44 \u2192 22 \u2192 11 \u2192 34 \u2192 17 \u2192 52 \u2192 26 \u2192 13 \u2192 40 \u2192 20 \u2192 10 \u2192 5 \u2192 16 \u2192 8 \u2192 4 \u2192 2 \u2192 1)\n\nTest Case 5:\nInput:\n27\nOutput:\n111\n(Explanation: 27 goes through a long sequence before reaching 1.)\n\n"}
{"#":60,"Prompt":"The Josephus Problem is a theoretical problem related to a certain counting-out game. Create a function that takes a number n and returns the last person to remain after a complex counting out process.","Test Cases":"Test Case 1:\nInput:\n7\nOutput:\n7\n\nTest Case 2:\nInput:\n1\nOutput:\n1\n\nTest Case 3:\nInput:\n10\nOutput:\n5\n\nTest Case 4:\nInput:\n100\nOutput:\n73\n\nTest Case 5:\nInput:\n6\nOutput:\n5"}
{"#":61,"Prompt":"The Towers of Hanoi is a puzzle where we have three rods and n disks. The objective of the puzzle is to move the entire stack to another rod. You are given the number of disks n. Calculate the minimum number of moves needed to solve the puzzle.","Test Cases":"Test Case 1:\nInput:\n1\nOutput:\n1\n\nTest Case 2:\nInput:\n2\nOutput:\n3\n\nTest Case 3:\nInput:\n3\nOutput:\n7\n\nTest Case 4:\nInput:\n4\nOutput:\n15\n\nTest Case 5:\nInput:\n5\nOutput:\n31\n\nThese test cases will help in validating the solution to the Towers of Hanoi problem for different numbers of disks.\n\n\n\n\n\n"}
{"#":62,"Prompt":"Given weights and values of n items, put these items in a knapsack of capacity W to get the maximum total value in the knapsack.","Test Cases":"Test Case 1:\nInput:\nWeights: [10, 20, 30]\nValues: [60, 100, 120]\nCapacity (W): 50\nOutput:\n220\n\nTest Case 2:\nInput:\nWeights: [5, 10, 15]\nValues: [10, 20, 30]\nCapacity (W): 20\nOutput:\n40\n\nTest Case 3:\nInput:\nWeights: [2, 3, 4, 5]\nValues: [1, 2, 5, 6]\nCapacity (W): 8\nOutput:\n8\n\nTest Case 4:\nInput:\nWeights: [1, 2, 5, 6, 7]\nValues: [1, 6, 18, 22, 28]\nCapacity (W): 11\nOutput:\n40\n\nTest Case 5:\nInput:\nWeights: [4, 5, 1]\nValues: [1, 2, 3]\nCapacity (W): 4\nOutput:\n3\n\n"}
{"#":63,"Prompt":"Given a list of cities and the distances between each pair of cities, what is the shortest possible route that visits each city and returns to the origin city?","Test Cases":"Test Case 1:\nInput:\nCities: [A, B, C]\nDistances: {(A, B): 1, (B, C): 2, (A, C): 2}\nOutput:\nA -> B -> C -> A with a distance of 5\n\nTest Case 2:\nInput:\nCities: [A, B, C, D]\nDistances: {(A, B): 10, (A, C): 15, (A, D): 20, (B, C): 35, (B, D): 25, (C, D): 30}\nOutput:\nA -> B -> D -> C -> A with a distance of 80\n\nTest Case 3:\nInput:\nCities: [W, X, Y, Z]\nDistances: {(W, X): 2, (W, Y): 9, (W, Z): 10, (X, Y): 6, (X, Z): 4, (Y, Z): 3}\nOutput:\nW -> X -> Z -> Y -> W with a distance of 15\n\nTest Case 4:\nInput:\nCities: [P, Q, R]\nDistances: {(P, Q): 5, (P, R): 9, (Q, R): 6}\nOutput:\nP -> Q -> R -> P with a distance of 20\n\nTest Case 5:\nInput:\nCities: [M, N, O, P, Q]\nDistances: {(M, N): 2, (M, O): 9, (M, P): 10, (M, Q): 15, (N, O): 4, (N, P): 8, (N, Q): 14, (O, P): 6, (O, Q): 5, (P, Q): 3}\nOutput:\nM -> N -> O -> Q -> P -> M with a distance of 20"}
{"#":64,"Prompt":"You are given two identical eggs and you have access to a building with n floors. What is the minimum number of trials you need to find the highest floor from which the egg can be dropped without breaking?","Test Cases":"Test Case 1:\nInput:\n10 floors\nOutput:\n4\n(Explanation: Drop first egg from floors 4, 7, 9. If it breaks on 4, test floors 1, 2, 3 with the second egg. If it breaks on 7, test floors 5 and 6 with the second egg, and so on.)\n\nTest Case 2:\nInput:\n100 floors\nOutput:\n14\n(Explanation: This involves a bit more strategy. For simplicity, we can start by dropping the first egg from the 14th floor, then go up 13 floors to the 27th floor, then 12 floors to the 39th, and so on.)\n\nTest Case 3:\nInput:\n2 floors\nOutput:\n2\n(Explanation: Drop the first egg from the 1st floor. If it breaks, we have our answer. If not, drop the second egg from the 2nd floor.)\n\nTest Case 4:\nInput:\n1 floor\nOutput:\n1\n(Explanation: Only one floor to test. So, one drop is enough.)\n\nTest Case 5:\nInput:\n20 floors\nOutput:\n6\n(Explanation: Drop first egg from floors 5, 10, 14, 17, 19. This strategy ensures we minimize the number of drops in the worst case.)"}
{"#":65,"Prompt":"Given a set of non-negative integers, and a value sum, determine if there is a subset of the given set with sum equal to given sum.","Test Cases":"Test Case 1:\nInput:\nSet: [3, 34, 4, 12, 5, 2]\nSum: 9\nOutput:\nTrue\n\nTest Case 2:\nInput:\nSet: [1, 2, 3, 5]\nSum: 8\nOutput:\nTrue\n\nTest Case 3:\nInput:\nSet: [1, 1, 1, 1]\nSum: 5\nOutput:\nFalse\n\nTest Case 4:\nInput:\nSet: [7, 14, 3, 8, 10]\nSum: 21\nOutput:\nTrue\n\nTest Case 5:\nInput:\nSet: [2, 5, 8, 13, 21]\nSum: 50\nOutput:\nFalse"}
{"#":66,"Prompt":"Given a knapsack weight W and a set of n items with certain value val[i] and weight wt[i], we need to calculate the maximum amount that could make up this quantity exactly.","Test Cases":"Test Case 1:\nInput:\nW: 50\nwt: [10, 20, 30]\nval: [60, 100, 120]\nOutput:\n220\n\nTest Case 2:\nInput:\nW: 8\nwt: [2, 3, 4, 5]\nval: [1, 2, 5, 6]\nOutput:\n7\n\nTest Case 3:\nInput:\nW: 4\nwt: [4, 5, 1]\nval: [1, 2, 3]\nOutput:\n3\n\nTest Case 4:\nInput:\nW: 15\nwt: [3, 5, 4, 6]\nval: [2, 4, 3, 5]\nOutput:\n9\n\nTest Case 5:\nInput:\nW: 6\nwt: [1, 3, 4, 5]\nval: [1, 4, 5, 7]\nOutput:\n9"}
{"#":67,"Prompt":"Given a value N, if we want to make change for N cents, and we have infinite supply of each of S = { S1, S2, .. , Sm} valued coins, how many ways can we make the change?","Test Cases":"Test Case 1:\nInput:\nN: 4\nS: [1, 2, 3]\nOutput:\n4\n(Explanation: {1,1,1,1}, {1,1,2}, {2,2}, {1,3})\n\nTest Case 2:\nInput:\nN: 10\nS: [2, 5, 3, 6]\nOutput:\n5\n(Explanation: {2,2,2,2,2}, {2,2,3,3}, {2,2,6}, {2,3,5}, {5,5})\n\nTest Case 3:\nInput:\nN: 5\nS: [1, 2, 5]\nOutput:\n4\n(Explanation: {1,1,1,1,1}, {1,1,1,2}, {1,2,2}, {5})\n\nTest Case 4:\nInput:\nN: 3\nS: [2, 3]\nOutput:\n1\n(Explanation: {3})\n\nTest Case 5:\nInput:\nN: 7\nS: [3, 4]\nOutput:\n0\n(Explanation: No combination can sum up to 7 using coins of denominations 3 and 4)"}
{"#":68,"Prompt":"Given n items of different weights and bins each of capacity c, assign each item to a bin such that number of total used bins is minimized.","Test Cases":"Test Case 1:\nInput:\nn: 4\nItems: [4, 8, 1, 4, 2, 1]\nc: 10\nOutput:\n3\n\nTest Case 2:\nInput:\nn: 5\nItems: [9, 8, 7, 6, 5]\nc: 10\nOutput:\n5\n\nTest Case 3:\nInput:\nn: 3\nItems: [2, 5, 4]\nc: 6\nOutput:\n2\n\nTest Case 4:\nInput:\nn: 4\nItems: [7, 8, 3, 5]\nc: 15\nOutput:\n2\n\nTest Case 5:\nInput:\nn: 6\nItems: [1, 2, 3, 4, 5, 10]\nc: 10\nOutput:\n3"}
{"#":69,"Prompt":"Given a string, return a string where for every char in the original, there are two chars.","Test Cases":"Test Case 1:\nInput:\n\"hello\"\nOutput:\n\"hheelllloo\"\n\nTest Case 2:\nInput:\n\"abc\"\nOutput:\n\"aabbcc\"\n\nTest Case 3:\nInput:\n\"!\"\nOutput:\n\"!!\"\n\nTest Case 4:\nInput:\n\"double\"\nOutput:\n\"ddoouubbllee\"\n\nTest Case 5:\nInput:\n\"space \"\nOutput:\n\"ssppacee \""}
{"#":70,"Prompt":"Return the number of times that the string \"hi\" appears anywhere in the given string.","Test Cases":"Test Case 1:\nInput:\n\"hi there\"\nOutput:\n1\n\nTest Case 2:\nInput:\n\"hihihihi\"\nOutput:\n4\n\nTest Case 3:\nInput:\n\"hello, how high?\"\nOutput:\n1\n\nTest Case 4:\nInput:\n\"hip hip hooray!\"\nOutput:\n2\n\nTest Case 5:\nInput:\n\"This is his kite.\"\nOutput:\n1"}
{"#":71,"Prompt":"Return True if the string \"cat\" and \"dog\" appear the same number of times in the given string.","Test Cases":"Test Case 1:\nInput:\n\"catdog\"\nOutput:\nTrue\n\nTest Case 2:\nInput:\n\"catcat\"\nOutput:\nFalse\n\nTest Case 3:\nInput:\n\"dogdogcat\"\nOutput:\nFalse\n\nTest Case 4:\nInput:\n\"catxdogxdogxcat\"\nOutput:\nTrue\n\nTest Case 5:\nInput:\n\"dogdogdogcatcat\"\nOutput:\nTrue"}
{"#":72,"Prompt":"Return the number of times that the string \"code\" appears anywhere in the given string, except we'll accept any letter for the 'd', so \"cope\" and \"cooe\" count.","Test Cases":"Test Case 1:\nInput:\n\"codecorecopecoor\"\nOutput:\n3\n\nTest Case 2:\nInput:\n\"codecodercofe\"\nOutput:\n2\n\nTest Case 3:\nInput:\n\"coze\"\nOutput:\n1\n\nTest Case 4:\nInput:\n\"codelcooecode\"\nOutput:\n2\n\nTest Case 5:\nInput:\n\"cote\"\nOutput:\n1"}
{"#":73,"Prompt":"Given two strings, return True if either of the strings appears at the very end of the other string, ignoring upper\/lower case differences (in other words, the computation should not be \"case sensitive\"). Note: s.lower() returns the lowercase version of a string.","Test Cases":"Test Case 1:\nInput:\nString 1: \"Hiabc\"\nString 2: \"abc\"\nOutput:\nTrue\n\nTest Case 2:\nInput:\nString 1: \"abc\"\nString 2: \"ABCHI\"\nOutput:\nFalse\n\nTest Case 3:\nInput:\nString 1: \"Hello\"\nString 2: \"lo\"\nOutput:\nTrue\n\nTest Case 4:\nInput:\nString 1: \"Python\"\nString 2: \"THON\"\nOutput:\nTrue\n\nTest Case 5:\nInput:\nString 1: \"abcXYZ\"\nString 2: \"xyz\"\nOutput:\nTrue"}
{"#":74,"Prompt":"Return True if the given string contains an appearance of \"xyz\" where the xyz is not directly preceeded by a period (.). So \"xxyz\" counts but \"x.xyz\" does not.","Test Cases":"Test Case 1:\nInput:\n\"abcxyz\"\nOutput:\nTrue\n\nTest Case 2:\nInput:\n\"abc.xxyz\"\nOutput:\nFalse\n\nTest Case 3:\nInput:\n\"xyz.abc\"\nOutput:\nTrue\n\nTest Case 4:\nInput:\n\"x.xyzxyz\"\nOutput:\nTrue\n\nTest Case 5:\nInput:\n\"xy.zxzy\"\nOutput:\nTrue"}
{"#":75,"Prompt":"Write a generator function that generates the Fibonacci sequence up to n.","Test Cases":"Test Case 1:\nInput:\n5\nOutput:\n0, 1, 1, 2, 3\n\nTest Case 2:\nInput:\n1\nOutput:\n0\n\nTest Case 3:\nInput:\n10\nOutput:\n0, 1, 1, 2, 3, 5, 8, 13, 21, 34\n\nTest Case 4:\nInput:\n3\nOutput:\n0, 1, 1\n\nTest Case 5:\nInput:\n7\nOutput:\n0, 1, 1, 2, 3, 5, 8"}
{"#":76,"Prompt":"Write a lambda function that takes two numbers and returns their sum.","Test Cases":"Test Case 1:\nInput:\n3, 4\nOutput:\n7\n\nTest Case 2:\nInput:\n-5, 5\nOutput:\n0\n\nTest Case 3:\nInput:\n10, 15\nOutput:\n25\n\nTest Case 4:\nInput:\n0, 0\nOutput:\n0\n\nTest Case 5:\nInput:\n7, -3\nOutput:\n4"}
{"#":77,"Prompt":"Write a function that takes two arguments, a and b, and returns their sum, product, and difference.","Test Cases":"Test Case 1:\nInput:\n3, 4\nOutput:\nSum: 7, Product: 12, Difference: -1\n\nTest Case 2:\nInput:\n5, 5\nOutput:\nSum: 10, Product: 25, Difference: 0\n\nTest Case 3:\nInput:\n10, 2\nOutput:\nSum: 12, Product: 20, Difference: 8\n\nTest Case 4:\nInput:\n-5, -7\nOutput:\nSum: -12, Product: 35, Difference: 2\n\nTest Case 5:\nInput:\n0, 10\nOutput:\nSum: 10, Product: 0, Difference: -10\n\n"}
{"#":78,"Prompt":"Write a regular expression that matches a string containing the word 'Python'.","Test Cases":"Test Case 1:\nInput:\n\"I love Python programming.\"\nOutput:\nMatch\n\nTest Case 2:\nInput:\n\"Python is versatile.\"\nOutput:\nMatch\n\nTest Case 3:\nInput:\n\"I'm attending a Pythoneer meetup.\"\nOutput:\nNo Match\n\nTest Case 4:\nInput:\n\"Pythons are also a type of snake.\"\nOutput:\nMatch\n\nTest Case 5:\nInput:\n\"python in lowercase shouldn't match.\"\nOutput:\nNo Match"}
{"#":79,"Prompt":"Write a function that takes two sets and returns their union, intersection, and difference.","Test Cases":"Test Case 1:\nInput:\n{1, 2, 3}, {3, 4, 5}\nOutput:\nUnion: {1, 2, 3, 4, 5}, Intersection: {3}, Difference: {1, 2}\n\nTest Case 2:\nInput:\n{5, 6, 7}, {8, 9, 10}\nOutput:\nUnion: {5, 6, 7, 8, 9, 10}, Intersection: {}, Difference: {5, 6, 7}\n\nTest Case 3:\nInput:\n{10, 20, 30}, {20, 30, 40}\nOutput:\nUnion: {10, 20, 30, 40}, Intersection: {20, 30}, Difference: {10}\n\nTest Case 4:\nInput:\n{1, 3, 5}, {2, 4, 6}\nOutput:\nUnion: {1, 2, 3, 4, 5, 6}, Intersection: {}, Difference: {1, 3, 5}\n\nTest Case 5:\nInput:\n{100, 200, 300}, {300, 400, 500}\nOutput:\nUnion: {100, 200, 300, 400, 500}, Intersection: {300}, Difference: {100, 200}"}
{"#":80,"Prompt":"Write a function that takes a Python object, serializes it to JSON, and returns the JSON string.","Test Cases":"Test Case 1:\nInput:\n{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}\nOutput:\n'{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'\n\nTest Case 2:\nInput:\n[1, 2, 3, 4, 5]\nOutput:\n'[1, 2, 3, 4, 5]'\n\nTest Case 3:\nInput:\n(True, False, None)\nOutput:\n'[true, false, null]'\n\nTest Case 4:\nInput:\n{\"students\": [{\"name\": \"Alice\"}, {\"name\": \"Bob\"}], \"teacher\": \"Mr. Smith\"}\nOutput:\n'{\"students\": [{\"name\": \"Alice\"}, {\"name\": \"Bob\"}], \"teacher\": \"Mr. Smith\"}'\n\nTest Case 5:\nInput:\n42\nOutput:\n'42'\n\n"}
{"#":81,"Prompt":"Write a function that takes a function and some arguments, and returns a new function that can be called with additional arguments.","Test Cases":"Test Case 1:\nInput:\nFunction: lambda x, y: x + y, Arguments: 2, 3\nNew Function Call with Arguments: 4, 5\nOutput:\n14\n\nTest Case 2:\nInput:\nFunction: lambda x, y, z: x * y - z, Arguments: 2, 3\nNew Function Call with Arguments: 4, 5\nOutput:\n6\n\nTest Case 3:\nInput:\nFunction: str.join, Arguments: \",\"\nNew Function Call with Arguments: [\"a\", \"b\", \"c\"]\nOutput:\n\"a,b,c\"\n\nTest Case 4:\nInput:\nFunction: math.pow, Arguments: 2\nNew Function Call with Arguments: 3\nOutput:\n8\n\nTest Case 5:\nInput:\nFunction: lambda x, y: x \/ y, Arguments: 5\nNew Function Call with Arguments: 2\nOutput:\n2.5\n\n"}
{"#":82,"Prompt":"We add a Leap Day on February 29, almost every four years. The leap day is an extra, or intercalary day and we add it to the shortest month of the year, February. In the Gregorian calendar three criteria must be taken into account to identify leap years: The year can be evenly divided by 4, is a leap year, unless: The year can be evenly divided by 100, it is NOT a leap year, unless: The year is also evenly divisible by 400. Then it is a leap year. Write function to determine whether a year is a leap year.","Test Cases":"Test Case 1:\nInput:\n2000\nOutput:\nTrue\n\nTest Case 2:\nInput:\n2100\nOutput:\nFalse\n\nTest Case 3:\nInput:\n2024\nOutput:\nTrue\n\nTest Case 4:\nInput:\n1900\nOutput:\nFalse\n\nTest Case 5:\nInput:\n2400\nOutput:\nTrue"}
{"#":83,"Prompt":"Kevin and Stuart want to play the 'The Minion Game'. Game Rules: Both players are given the same string, S. Both players have to make substrings using the letters of the string S. Stuart has to make words starting with consonants. Kevin has to make words starting with vowels. The game ends when both players have made all possible substrings. A player gets +1 point for each occurrence of the substring in the string S.","Test Cases":"Test Case 1:\nInput:\n\"BANANA\"\nOutput:\nStuart: 12, Kevin: 9\n\nExplanation: Some of Kevin's words are 'A', 'AN', 'ANA'. For Stuart: 'B', 'BA', 'BAN', etc.\n\nTest Case 2:\nInput:\n\"APPLE\"\nOutput:\nStuart: 11, Kevin: 8\n\nExplanation: Some of Kevin's words are 'A', 'AP', 'APP'. For Stuart: 'P', 'PP', 'PPL', etc.\n\nTest Case 3:\nInput:\n\"ORANGE\"\nOutput:\nStuart: 12, Kevin: 15\n\nExplanation: Some of Kevin's words are 'O', 'OR', 'ORA'. For Stuart: 'R', 'RA', 'RAN', etc.\n\nTest Case 4:\nInput:\n\"STUART\"\nOutput:\nStuart: 21, Kevin: 1\n\nExplanation: Kevin's only word is 'A'. For Stuart, he can form words like 'S', 'ST', 'STU', etc.\n\nTest Case 5:\nInput:\n\"KEVIN\"\nOutput:\nStuart: 8, Kevin: 5\n\nExplanation: Some of Kevin's words are 'E', 'EVI'. For Stuart: 'K', 'KE', 'KEV', etc.\n\n"}
{"#":84,"Prompt":"Consider a string, s=\"AABCAAADA\" and an integer, k=3. We can split s into n\/k=3 substrings where each subtring, ti, consists of a contiguous block of k=3 characters in s. Then, use each ti to create string ui such that: The characters in ui are a subsequence of the characters in ti. Any repeat occurrence of a character is removed from the string such that each character in ui occurs exactly once. In other words, if the character at some index j in ti occurs at a previous index <j in ti, then do not include the character in string ui.","Test Cases":"Test Case 1:\nInput:\ns=\"AABCAAADA\", k=3\nOutput:\n\"AB\", \"CA\", \"AD\"\n\nTest Case 2:\nInput:\ns=\"AABBCCDDEE\", k=2\nOutput:\n\"AB\", \"AB\", \"BC\", \"CD\", \"DE\", \"EE\"\n\nTest Case 3:\nInput:\ns=\"XYZXYZXYZ\", k=3\nOutput:\n\"XYZ\", \"XYZ\", \"XYZ\"\n\nTest Case 4:\nInput:\ns=\"ABCDE\", k=1\nOutput:\n\"A\", \"B\", \"C\", \"D\", \"E\"\n\nTest Case 5:\nInput:\ns=\"WWEELLCCOOMMEE\", k=5\nOutput:\n\"WELC\", \"OMME\", \"E\""}
{"#":85,"Prompt":"When users post an update on social media,such as a URL, image, status update etc., other users in their network are able to view this new post on their news feed. Users can also see exactly when the post was published, i.e, how many hours, minutes or seconds ago. Given two timestamps of one such post, one in Mon DD YYYY hh:mm:ss +ZZZZZ format and the other in Day, DD Mon YYYY hh:mm:ss +ZZZZZ format, print the absolute difference (in seconds) between them.","Test Cases":"Test Case 1:\nInput:\n\"Tue 01 Jan 2019 12:00:00 +0530\", \"Day, 01 Jan 2019 12:05:00 +0530\"\nOutput:\n300\n\nTest Case 2:\nInput:\n\"Sat 15 Feb 2020 18:30:00 +0000\", \"Day, 15 Feb 2020 18:45:00 +0000\"\nOutput:\n900\n\nTest Case 3:\nInput:\n\"Sun 20 Dec 2021 05:00:00 +0430\", \"Day, 20 Dec 2021 05:10:00 +0430\"\nOutput:\n600\n\nTest Case 4:\nInput:\n\"Fri 25 Jun 2023 01:00:00 +0200\", \"Day, 25 Jun 2023 01:20:00 +0200\"\nOutput:\n1200\n\nTest Case 5:\nInput:\n\"Wed 10 Nov 2022 09:15:00 +0630\", \"Day, 10 Nov 2022 09:35:00 +0630\"\nOutput:\n1200\n\n"}
{"#":86,"Prompt":"Given the coefficients of the polynomial P, and the value for x, find the value of P when x = k.","Test Cases":"Test Case 1:\nInput:\nCoefficients: [2, -3, 4], x=2\nOutput:\n6\n\nExplanation:\nP(x) = 2x^2 - 3x + 4\nP(2) = 2(2^2) - 3(2) + 4 = 8 - 6 + 4 = 6\n\nTest Case 2:\nInput:\nCoefficients: [1, 0, -1], x=3\nOutput:\n8\n\nExplanation:\nP(x) = x^2 - 1\nP(3) = (3^2) - 1 = 9 - 1 = 8\n\nTest Case 3:\nInput:\nCoefficients: [-1, 2, 1], x=0\nOutput:\n1\n\nExplanation:\nP(x) = -x^2 + 2x + 1\nP(0) = -0 + 0 + 1 = 1\n\nTest Case 4:\nInput:\nCoefficients: [3], x=5\nOutput:\n3\n\nExplanation:\nP(x) = 3 (A constant polynomial)\nP(5) = 3\n\nTest Case 5:\nInput:\nCoefficients: [1, -2, 1], x=1\nOutput:\n0\n\nExplanation:\nP(x) = x^2 - 2x + 1\nP(1) = 1^2 - 2(1) + 1 = 1 - 2 + 1 = 0"}
{"#":87,"Prompt":"The NumPy module also comes with a number of built-in routines for linear algebra calculations. These can be found in the sub-module linalg. linalg.det The linalg.det tool computes the determinant of an array.","Test Cases":"Test Case 1:\nInput:\n[[1, 2], [3, 4]]\nOutput:\n-2.0\n\nExplanation:\nDeterminant of matrix\n| 1 2 |\n| 3 4 | is (14) - (23) = -2\n\nTest Case 2:\nInput:\n[[6]]\nOutput:\n6.0\n\nExplanation:\nDeterminant of a 1x1 matrix is simply the value in it.\n\nTest Case 3:\nInput:\n[[1, 0, 0], [0, 1, 0], [0, 0, 1]]\nOutput:\n1.0\n\nExplanation:\nDeterminant of the identity matrix of any size is 1.\n\nTest Case 4:\nInput:\n[[2, 3], [2, 3]]\nOutput:\n0.0\n\nExplanation:\nDeterminant of matrix with dependent rows is 0.\n\nTest Case 5:\nInput:\n[[5, 4, 2], [1, 3, 1], [2, 1, 3]]\nOutput:\n49.0\n\nExplanation:\nUsing the Laplace expansion or any other method to compute the determinant will yield 49 for this matrix."}
{"#":88,"Prompt":"The tools dot and cross returns the dot and cross product of two arrays respectively.","Test Cases":"Dot Product Test Cases:\n\nTest Case 1:\nInput:\na = [1, 2], b = [3, 4]\nOutput:\n11\n\nExplanation:\nDot product = 13 + 24 = 3 + 8 = 11\n\nTest Case 2:\nInput:\na = [0, 0], b = [5, 6]\nOutput:\n0\n\nExplanation:\nDot product of vectors with a zero vector is always 0.\n\nTest Case 3:\nInput:\na = [2, 3], b = [-2, -3]\nOutput:\n-13\n\nExplanation:\nDot product = 2*(-2) + 3*(-3) = -4 -9 = -13\n\nCross Product Test Cases (for 3-dimensional vectors):\n\nTest Case 1:\nInput:\na = [1, 2, 3], b = [4, 5, 6]\nOutput:\n[-3, 6, -3]\n\nExplanation:\nCross product formula for 3D vectors will yield this result.\n\nTest Case 2:\nInput:\na = [0, 0, 0], b = [5, 6, 7]\nOutput:\n[0, 0, 0]\n\nExplanation:\nCross product with a zero vector is always a zero vector.\n\nTest Case 3:\nInput:\na = [1, 0, 0], b = [0, 1, 0]\nOutput:\n[0, 0, 1]\n\nExplanation:\nCross product of two perpendicular unit vectors in 3D space will yield another unit vector that is perpendicular to both.\n\n"}
{"#":89,"Prompt":"The tools inner and outer return the inner and outer product of two arrays.","Test Cases":"Inner Product Test Cases:\n\nTest Case 1:\nInput:\na = [1, 2], b = [3, 4]\nOutput:\n11\n\nTest Case 2:\nInput:\na = [0, 0], b = [5, 6]\nOutput:\n0\n\nTest Case 3:\nInput:\na = [3, 4], b = [2, 2]\nOutput:\n14\n\n**\n\nTest Case 4:**\nInput:\na = [1, 3], b = [5, 7]\nOutput:\n26\n\nTest Case 5:\nInput:\na = [-1, 2], b = [4, -2]\nOutput:\n-8\n\nOuter Product Test Cases:\n\nTest Case 1:\nInput:\na = [1, 2], b = [3, 4]\nOutput:\n[[3, 4],\n[6, 8]]\n\nTest Case 2:\nInput:\na = [0, 0], b = [5, 6]\nOutput:\n[[0, 0],\n[0, 0]]\n\nTest Case 3:\nInput:\na = [3, 4], b = [1, 0]\nOutput:\n[[3, 0],\n[4, 0]]\n\nTest Case 4:\nInput:\na = [1, 3], b = [5, 7]\nOutput:\n[[5, 7],\n[15, 21]]\n\nTest Case 5:\nInput:\na = [-1, 2], b = [4, -2]\nOutput:\n[[-4, 2],\n[8, -4]]"}
{"#":90,"Prompt":"Write a function named double_letters that takes a string as its parameter. The function should return True if there are two identical letters in a row in the string, and False otherwise.","Test Cases":"Test Case 1:\nInput:\n\"hello\"\nOutput:\nTrue\n\nTest Case 2:\nInput:\n\"nono\"\nOutput:\nFalse\n\nTest Case 3:\nInput:\n\"aabbcc\"\nOutput:\nTrue\n\nTest Case 4:\nInput:\n\"rainbow\"\nOutput:\nFalse\n\nTest Case 5:\nInput:\n\"look\"\nOutput:\nTrue"}
{"#":91,"Prompt":"Write a function named add_dots that takes a string and adds \".\" in between each letter. Write another function named remove_dots that removes all dots from a string.","Test Cases":"Test Case 1:\nInput:\n\"hello\"\nOutput:\n\"h.e.l.l.o\"\n\nTest Case 2:\nInput:\n\"abc\"\nOutput:\n\"a.b.c\"\n\nTest Case 3:\nInput:\n\"dog\"\nOutput:\n\"d.o.g\"\n\nTest Case 4:\nInput:\n\"j\"\nOutput:\n\"j\"\n\nTest Case 5:\nInput:\n\"\"\nOutput:\n\"\""}
{"#":92,"Prompt":"Define a function named count that takes a single parameter. The parameter is a string. The string will contain a single word divided into syllables by hyphens, such as these: \"ho-tel\", \"cat\"","Test Cases":"Test Case 1:\nInput:\n\"ho-tel\"\nOutput:\n2\n\nTest Case 2:\nInput:\n\"cat\"\nOutput:\n1\n\nTest Case 3:\nInput:\n\"in-ter-est-ing\"\nOutput:\n4\n\nTest Case 4:\nInput:\n\"hel-lo\"\nOutput:\n2\n\nTest Case 5:\nInput:\n\"a-b-c-d-e\"\nOutput:\n5"}
{"#":93,"Prompt":"Two strings are anagrams if you can make one from the other by rearranging the letters. Write a function named is_anagram that takes two strings as its parameters. Your function should return True if the strings are anagrams, and False otherwise.","Test Cases":"Test Case 1:\nInput:\n\"listen\", \"silent\"\nOutput:\nTrue\n\nTest Case 2:\nInput:\n\"hello\", \"world\"\nOutput:\nFalse\n\nTest Case 3:\nInput:\n\"evil\", \"vile\"\nOutput:\nTrue\n\nTest Case 4:\nInput:\n\"looped\", \"poodle\"\nOutput:\nTrue\n\nTest Case 5:\nInput:\n\"apple\", \"pale\"\nOutput:\nFalse"}
{"#":94,"Prompt":"Write a function that takes a list of lists and flattens it into a one-dimensional list.","Test Cases":"Test Case 1:\nInput:\n[[1, 2], [3, 4], [5, 6]]\nOutput:\n[1, 2, 3, 4, 5, 6]\n\nTest Case 2:\nInput:\n[[1], [2, 3, 4], [5]]\nOutput:\n[1, 2, 3, 4, 5]\n\nTest Case 3:\nInput:\n[[\"a\", \"b\"], [\"c\"], [\"d\", \"e\"]]\nOutput:\n[\"a\", \"b\", \"c\", \"d\", \"e\"]\n\nTest Case 4:\nInput:\n[[1, 2, 3], [], [4, 5]]\nOutput:\n[1, 2, 3, 4, 5]\n\nTest Case 5:\nInput:\n[]\nOutput:\n[]"}
{"#":95,"Prompt":"Define a function named all_equal that takes a list and checks whether all elements in the list are the same.","Test Cases":"Test Case 1:\nInput:\n[1, 1, 1, 1]\nOutput:\nTrue\n\nTest Case 2:\nInput:\n[\"apple\", \"apple\", \"apple\"]\nOutput:\nTrue\n\nTest Case 3:\nInput:\n[1, 2, 3, 4]\nOutput:\nFalse\n\nTest Case 4:\nInput:\n[\"a\", \"a\", \"b\", \"a\"]\nOutput:\nFalse\n\nTest Case 5:\nInput:\n[]\nOutput:\nTrue"}
{"#":96,"Prompt":"Define a function named up_down that takes a single number as its parameter. Your function return a tuple containing two numbers; the first should be one lower than the parameter, and the second should be one higher.","Test Cases":"Test Case 1:\nInput:\n5\nOutput:\n(4, 6)\n\nTest Case 2:\nInput:\n0\nOutput:\n(-1, 1)\n\nTest Case 3:\nInput:\n-3\nOutput:\n(-4, -2)\n\nTest Case 4:\nInput:\n1\nOutput:\n(0, 2)\n\nTest Case 5:\nInput:\n10\nOutput:\n(9, 11)"}
{"#":97,"Prompt":"Create a function that takes two arguments: the original price and the discount percentage as integers and returns the final price after the discount.","Test Cases":"Test Case 1:\nInput:\n100, 10\nOutput:\n90.0\n\nTest Case 2:\nInput:\n500, 50\nOutput:\n250.0\n\nTest Case 3:\nInput:\n79, 5\nOutput:\n75.05\n\nTest Case 4:\nInput:\n200, 0\nOutput:\n200.0\n\nTest Case 5:\nInput:\n1000, 100\nOutput:\n0.0"}
{"#":98,"Prompt":"Create a function that takes a string and returns a string with its letters in alphabetical order.","Test Cases":"Test Case 1:\nInput:\n\"hello\"\nOutput:\n\"ehllo\"\n\nTest Case 2:\nInput:\n\"zebra\"\nOutput:\n\"aberz\"\n\nTest Case 3:\nInput:\n\"banana\"\nOutput:\n\"aaabnn\"\n\nTest Case 4:\nInput:\n\"programming\"\nOutput:\n\"aggimmnoprr\"\n\nTest Case 5:\nInput:\n\"openai\"\nOutput:\n\"aeinop"}
{"#":99,"Prompt":"Write a function that takes a positive integer and return its factorial.","Test Cases":"Test Case 1:\nInput:\n5\nOutput:\n120\n\nTest Case 2:\nInput:\n1\nOutput:\n1\n\nTest Case 3:\nInput:\n10\nOutput:\n3628800\n\nTest Case 4:\nInput:\n7\nOutput:\n5040\n\nTest Case 5:\nInput:\n0\nOutput:\n1"}
{"#":100,"Prompt":"Create a function that takes an array of numbers and returns the mean value.","Test Cases":"Test Case 1:\nInput:\n[1, 2, 3, 4, 5]\nOutput:\n3.0\n\nTest Case 2:\nInput:\n[10, 20, 30, 40, 50]\nOutput:\n30.0\n\nTest Case 3:\nInput:\n[2.5, 3.5, 4.5, 5.5]\nOutput:\n4.0\n\nTest Case 4:\nInput:\n[-1, 0, 1]\nOutput:\n0.0\n\nTest Case 5:\nInput:\n[1000]\nOutput:\n1000.0"}
{"#":101,"Prompt":"Write a function that takes an array of strings and returns the words that are exactly four letters.","Test Cases":"Test Case 1:\nInput:\n[\"apple\", \"banana\", \"pear\", \"grape\"]\nOutput:\n[\"pear\", \"grape\"]\n\nTest Case 2:\nInput:\n[\"cat\", \"dog\", \"fish\", \"bird\"]\nOutput:\n[\"fish\", \"bird\"]\n\nTest Case 3:\nInput:\n[\"red\", \"blue\", \"green\", \"yellow\"]\nOutput:\n[\"blue\"]\n\nTest Case 4:\nInput:\n[\"book\", \"pen\", \"desk\", \"chair\"]\nOutput:\n[\"book\", \"desk\"]\n\nTest Case 5:\nInput:\n[\"apple\", \"banana\", \"pear\", \"grape\", \"melon\"]\nOutput:\n[\"pear\", \"grape\"]"}
{"#":102,"Prompt":"Create a function that takes an array of arrays with numbers. Return a new (single) array with the largest numbers of each.","Test Cases":"Test Case 1:\nInput:\n[[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nOutput:\n[3, 6, 9]\n\nTest Case 2:\nInput:\n[[10, 20, 30], [40, 50, 60], [70, 80, 90]]\nOutput:\n[30, 60, 90]\n\nTest Case 3:\nInput:\n[[5, 10, 15], [20, 25, 30], [35, 40, 45]]\nOutput:\n[15, 30, 45]\n\nTest Case 4:\nInput:\n[[-1, -2, -3], [-4, -5, -6], [-7, -8, -9]]\nOutput:\n[-1, -4, -7]\n\nTest Case 5:\nInput:\n[[0, 1, 2], [3, 4, 5], [6, 7, 8]]\nOutput:\n[2, 5, 8]"}
{"#":103,"Prompt":"Create a function that takes a string and returns the middle character(s). If the word's length is odd, return the middle character. If the word's length is even, return the middle two characters.","Test Cases":"Test Case 1:\nInput:\n\"hello\"\nOutput:\n\"l\"\n\nTest Case 2:\nInput:\n\"world\"\nOutput:\n\"rl\"\n\nTest Case 3:\nInput:\n\"apple\"\nOutput:\n\"p\"\n\nTest Case 4:\nInput:\n\"banana\"\nOutput:\n\"an\"\n\nTest Case 5:\nInput:\n\"programming\"\nOutput:\n\"a\""}
{"#":104,"Prompt":"Create a function that takes an object and returns the keys and values as separate arrays.","Test Cases":"Test Case 1:\nInput:\n{\"a\": 1, \"b\": 2, \"c\": 3}\nOutput:\nKeys: [\"a\", \"b\", \"c\"], Values: [1, 2, 3]\n\nTest Case 2:\nInput:\n{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}\nOutput:\nKeys: [\"name\", \"age\", \"city\"], Values: [\"Alice\", 25, \"New York\"]\n\nTest Case 3:\nInput:\n{\"x\": true, \"y\": false, \"z\": true}\nOutput:\nKeys: [\"x\", \"y\", \"z\"], Values: [true, false, true]\n\nTest Case 4:\nInput:\n{\"a\": [1, 2, 3], \"b\": [4, 5], \"c\": [6]}\nOutput:\nKeys: [\"a\", \"b\", \"c\"], Values: [[1, 2, 3], [4, 5], [6]]\n\nTest Case 5:\nInput:\n{}\nOutput:\nKeys: [], Values: []"}
{"#":105,"Prompt":"Create a function that finds the index of a given item.","Test Cases":"Test Case 1:\nInput:\n[1, 2, 3, 4, 5], 3\nOutput:\n2\n\nTest Case 2:\nInput:\n[\"apple\", \"banana\", \"cherry\"], \"banana\"\nOutput:\n1\n\nTest Case 3:\nInput:\n[10, 20, 30, 40, 50], 60\nOutput:\n-1\n\nTest Case 4:\nInput:\n[\"a\", \"b\", \"c\", \"d\"], \"e\"\nOutput:\n-1\n\nTest Case 5:\nInput:\n[True, False, True], False\nOutput:\n1"}
{"#":106,"Prompt":"Create a function that takes a word and returns true if the word has two consecutive identical letters.","Test Cases":"Test Case 1:\nInput:\n\"hello\"\nOutput:\nTrue\n\nTest Case 2:\nInput:\n\"apple\"\nOutput:\nTrue\n\nTest Case 3:\nInput:\n\"banana\"\nOutput:\nTrue\n\nTest Case 4:\nInput:\n\"programming\"\nOutput:\nFalse\n\nTest Case 5:\nInput:\n\"openai\"\nOutput:\nFalse"}
{"#":107,"Prompt":"Given an \"out\" string length 4, such as \"<<>>\", and a word, return a new string where the word is in the middle of the out string, e.g. \"<<word>>\".","Test Cases":"Test Case 1:\nInput:\n\"<<>>\", \"hello\"\nOutput:\n\"<<hello>>\"\n\nTest Case 2:\nInput:\n\"[[]]\", \"world\"\nOutput:\n\"[[world]]\"\n\nTest Case 3:\nInput:\n\"()\", \"python\"\nOutput:\n\"(python)\"\n\nTest Case 4:\nInput:\n\"{{}}\", \"programming\"\nOutput:\n\"{{programming}}\"\n\nTest Case 5:\nInput:\n\"**\", \"openai\"\nOutput:\n\"openai\""}
{"#":108,"Prompt":"Given a string, return a new string made of 3 copies of the last 2 chars of the original string. The string length will be at least 2.","Test Cases":"Test Case 1:\nInput:\n\"hello\"\nOutput:\n\"lololo\"\n\nTest Case 2:\nInput:\n\"python\"\nOutput:\n\"ononon\"\n\nTest Case 3:\nInput:\n\"programming\"\nOutput:\n\"ngngng\"\n\nTest Case 4:\nInput:\n\"openai\"\nOutput:\n\"aiiaii\"\n\nTest Case 5:\nInput:\n\"abcd\"\nOutput:\n\"cdcdcd\""}
{"#":109,"Prompt":"Given a string, return the string made of its first two chars, so the String \"Hello\" yields \"He\". If the string is shorter than length 2, return whatever there is, so \"X\" yields \"X\", and the empty string \"\" yields the empty string \"\".","Test Cases":"Test Case 1:\nInput:\n\"Hello\"\nOutput:\n\"He\"\n\nTest Case 2:\nInput:\n\"python\"\nOutput:\n\"py\"\n\nTest Case 3:\nInput:\n\"programming\"\nOutput:\n\"pr\"\n\nTest Case 4:\nInput:\n\"openai\"\nOutput:\n\"op\"\n\nTest Case 5:\nInput:\n\"X\"\nOutput:\n\"X\""}
{"#":110,"Prompt":"Given a string of even length, return the first half. So the string \"WooHoo\" yields \"Woo\".","Test Cases":"Test Case 1:\nInput:\n\"WooHoo\"\nOutput:\n\"Woo\"\n\nTest Case 2:\nInput:\n\"python\"\nOutput:\n\"pyt\"\n\nTest Case 3:\nInput:\n\"programming\"\nOutput:\n\"progra\"\n\nTest Case 4:\nInput:\n\"openai\"\nOutput:\n\"ope\"\n\nTest Case 5:\nInput:\n\"abcdef\"\nOutput:\n\"abc\""}
{"#":111,"Prompt":"Given a string, return a version without the first and last char, so \"Hello\" yields \"ell\". The string length will be at least 2.","Test Cases":"Test Case 1:\nInput:\n\"Hello\"\nOutput:\n\"ell\"\n\nTest Case 2:\nInput:\n\"python\"\nOutput:\n\"ytho\"\n\nTest Case 3:\nInput:\n\"programming\"\nOutput:\n\"rogrammin\"\n\nTest Case 4:\nInput:\n\"openai\"\nOutput:\n\"pena\"\n\nTest Case 5:\nInput:\n\"abcdef\"\nOutput:\n\"bcde\""}
{"#":112,"Prompt":"Given 2 strings, a and b, return a string of the form short+long+short, with the shorter string on the outside and the longer string on the inside. The strings will not be the same length, but they may be empty (length 0).","Test Cases":"Test Case 1:\nInput:\n\"Hello\", \"Python\"\nOutput:\n\"HelloPythonHello\"\n\nTest Case 2:\nInput:\n\"openai\", \"AI\"\nOutput:\n\"AIopenaiAI\"\n\nTest Case 3:\nInput:\n\"apple\", \"banana\"\nOutput:\n\"applebananapple\"\n\nTest Case 4:\nInput:\n\"longstring\", \"short\"\nOutput:\n\"shortlongstringshort\"\n\nTest Case 5:\nInput:\n\"\", \"empty\"\nOutput:\n\"empty\"\n\n\n\n\n"}
{"#":113,"Prompt":"Given 2 strings, return their concatenation, except omit the first char of each. The strings will be at least length 1.","Test Cases":"Test Case 1:\nInput:\n\"Hello\", \"Python\"\nOutput:\n\"elloython\"\n\nTest Case 2:\nInput:\n\"openai\", \"AI\"\nOutput:\n\"penaiI\"\n\nTest Case 3:\nInput:\n\"apple\", \"banana\"\nOutput:\n\"ppleanana\"\n\nTest Case 4:\nInput:\n\"longstring\", \"short\"\nOutput:\n\"ongstringhort\"\n\nTest Case 5:\nInput:\n\"abcdef\", \"ghijkl\"\nOutput:\n\"bcdefhijkl\""}
{"#":114,"Prompt":"Given a string, return a \"rotated left 2\" version where the first 2 chars are moved to the end. The string length will be at least 2.","Test Cases":"Test Case 1:\nInput:\n\"Hello\"\nOutput:\n\"lloHe\"\n\nTest Case 2:\nInput:\n\"python\"\nOutput:\n\"thonpy\"\n\nTest Case 3:\nInput:\n\"programming\"\nOutput:\n\"ogrammingpr\"\n\nTest Case 4:\nInput:\n\"openai\"\nOutput:\n\"enaiop\"\n\nTest Case 5:\nInput:\n\"abcdef\"\nOutput:\n\"cdefab\""}
{"#":115,"Prompt":"Create two Python lists for height and weight. Then, import the numpy package and create numpy arrays out of the newly created lists","Test Cases":"Test Case 1:\nInput:\nheight_list = [170, 165, 180, 155, 190]\nweight_list = [70, 60, 85, 50, 95]\nOutput:\nHeight NumPy array: [170 165 180 155 190]\nWeight NumPy array: [70 60 85 50 95]\n\nTest Case 2:\nInput:\nheight_list = [150, 160, 175, 140, 185]\nweight_list = [55, 62, 80, 48, 90]\nOutput:\nHeight NumPy array: [150 160 175 140 185]\nWeight NumPy array: [55 62 80 48 90]\n\nTest Case 3:\nInput:\nheight_list = [160, 170, 155, 180, 145]\nweight_list = [58, 72, 50, 85, 46]\nOutput:\nHeight NumPy array: [160 170 155 180 145]\nWeight NumPy array: [58 72 50 85 46]\n\nTest Case 4:\nInput:\nheight_list = [165, 175, 160, 185, 150]\nweight_list = [65, 68, 55, 75, 52]\nOutput:\nHeight NumPy array: [165 175 160 185 150]\nWeight NumPy array: [65 68 55 75 52]\n\nTest Case 5:\nInput:\nheight_list = [180, 190, 175, 200, 170]\nweight_list = [80, 92, 78, 105, 75]\nOutput:\nHeight NumPy array: [180 190 175 200 170]\nWeight NumPy array: [80 92 78 105 75]"}
{"#":116,"Prompt":"Perform element-wise calculations on height and weight. For example, you could take all 6 of the height and weight observations above, and calculate the BMI for each observation with a single equation","Test Cases":"Test Case 1:\nInput:\nheight_array = np.array([170, 165, 180, 155, 190])\nweight_array = np.array([70, 60, 85, 50, 95])\nOutput:\nBMI_array = [24.22 22.04 26.23 20.81 26.32]\n\nTest Case 2:\nInput:\nheight_array = np.array([150, 160, 175, 140, 185])\nweight_array = np.array([55, 62, 80, 48, 90])\nOutput:\nBMI_array = [24.44 24.22 26.12 24.49 26.34]\n\nTest Case 3:\nInput:\nheight_array = np.array([160, 170, 155, 180, 145])\nweight_array = np.array([58, 72, 50, 85, 46])\nOutput:\nBMI_array = [22.66 24.92 20.85 26.23 21.85]\n\nTest Case 4:\nInput:\nheight_array = np.array([165, 175, 160, 185, 150])\nweight_array = np.array([65, 68, 55, 75, 52])\nOutput:\nBMI_array = [23.88 22.2 21.48 21.93 23.11]\n\nTest Case 5:\nInput:\nheight_array = np.array([180, 190, 175, 200, 170])\nweight_array = np.array([80, 92, 78, 105, 75])\nOutput:\nBMI_array = [24.69 25.46 25.47 26.25 25.95]"}
{"#":117,"Prompt":"Use subsetting to find out which observations in our BMI array are above 23","Test Cases":"Test Case 1:\nInput:\nBMI_array = np.array([24.22, 22.04, 26.23, 20.81, 26.32])\nOutput:\nAbove_23_indices = [0 2 4]\n\nTest Case 2:\nInput:\nBMI_array = np.array([24.44, 24.22, 26.12, 24.49, 26.34])\nOutput:\nAbove_23_indices = [0 1 2 3 4]\n\nTest Case 3:\nInput:\nBMI_array = np.array([22.66, 24.92, 20.85, 26.23, 21.85])\nOutput:\nAbove_23_indices = [1 3]\n\nTest Case 4:\nInput:\nBMI_array = np.array([23.88, 22.2, 21.48, 21.93, 23.11])\nOutput:\nAbove_23_indices = [0 4]\n\nTest Case 5:\nInput:\nBMI_array = np.array([24.69, 25.46, 25.47, 26.25, 25.95])\nOutput:\nAbove_23_indices = [0 1 2 3 4]"}
{"#":118,"Prompt":"Convert the list of weights from a list to a Numpy array. Then, convert all of the weights from kilograms to pounds. Use the scalar conversion of 2.2 lbs per kilogram to make your conversion. Lastly, print the resulting array of weights in pounds","Test Cases":"Test Case 1:\nInput:\nweight_list = [70, 60, 85, 50, 95]\nweight_array = np.array(weight_list)\nweight_array_pounds = weight_array * 2.2\nOutput:\nWeight array in pounds: [154. 132. 187. 110. 209.]\n\nTest Case 2:\nInput:\nweight_list = [55, 62, 80, 48, 90]\nweight_array = np.array(weight_list)\nweight_array_pounds = weight_array * 2.2\nOutput:\nWeight array in pounds: [121. 136.4 176. 105.6 198. ]\n\nTest Case 3:\nInput:\nweight_list = [58, 72, 50, 85, 46]\nweight_array = np.array(weight_list)\nweight_array_pounds = weight_array * 2.2\nOutput:\nWeight array in pounds: [127.6 158.4 110. 187. 101.2]\n\nTest Case 4:\nInput:\nweight_list = [65, 68, 55, 75, 52]\nweight_array = np.array(weight_list)\nweight_array_pounds = weight_array * 2.2\nOutput:\nWeight array in pounds: [143. 149.6 121. 165. 114.4]\n\nTest Case 5:\nInput:\nweight_list = [80, 92, 78, 105, 75]\nweight_array = np.array(weight_list)\nweight_array_pounds = weight_array * 2.2\nOutput:\nWeight array in pounds: [176. 202.4 171.6 231. 165. ]"}
