Prompt,Answer
"print(float(""2.1""))
What would be the output of the line of code above? Include only what is actually printed to the console.
Pick one option from below:

2

2.1

""2""

""2.1""

True

False

An error message

There will be no output",2.1
"print(int(""2.1""))
What would be the output of the line of code above? Include only what is actually printed to the console.
Pick one option from below:

2

2.1

""2""

""2.1""

True

False

An error message

There will be no output",2
"print(int(""2""))
What would be the output of the line of code above? Include only what is actually printed to the console.
Pick one option from below:
2

2.0

""2""

""2.0""

True

False

An error message

There will be no output",2
"print(str(2.1))
What would be the output of the line of code above? Include only what is actually printed to the console.
Pick one option from below:

2

2.1

""2""

""2.1""

True

False

An error message

There will be no output","""2.1"""
"print(float(""2""))
What would be the output of the line of code above? Include only what is actually printed to the console.
Pick one option from below:

2

2.0

""2""

""2.0""

True

False

An error message

There will be no output",2
"print(bool(""""))
What would be the output of the line of code above? Include only what is actually printed to the console.
Pick one option from below:

1

1.0

""1""

""1.0""

True

False

An error message

There will be no output",FALSE
"print(bool(2))
What would be the output of the line of code above? Include only what is actually printed to the console.
Print one option from below:

2

2.0

""2""

""2.0""

True

False

An error message

There will be no output",TRUE
"print(float(False))
What would be the output of the line of code above? Include only what is actually printed to the console.
Pick one option from below:

0

0.0

""0""

""0.0""

True

False

An error message

There will be no output",0
"not (False and True)
Does the statement above resolve to True or False?

True

False",TRUE
"False or not True
Does the statement above resolve to True or False?

True

False",FALSE
"(True and not False) and False
Does the statement above resolve to True or False?

True

False",FALSE
"(False and True) or (False or True)
Does the statement above resolve to True or False?

True

False",TRUE
"1| if not user_is_invalid and (password_correct or previously_authenticated):  

2|     print(""Login successful!"")  

3| else:  

4|     print(""Login failed!"")  
 
Which of the following values for user_is_invalid, password_correct, and previously_authenticated would result in ""Login successful!"" being printed?  
  
user_is_invalid = True   
password_correct = True   
previously_authenticated = True  
 
  
  
user_is_invalid = True   
password_correct = True   
previously_authenticated = False  
 
  
  
user_is_invalid = True   
password_correct = False  
previously_authenticated = True  
 
  
  
user_is_invalid = True   
password_correct = False  
previously_authenticated = False  
 
  
  
user_is_invalid = False  
password_correct = True   
previously_authenticated = True  
 
  
  
user_is_invalid = False  
password_correct = False  
previously_authenticated = False  
 
  
  
None of the above","user_is_invalid = False  
password_correct = True   
previously_authenticated = True  "
"1| if age > 34 and born_in_the_us:  

2|     print(""You can run for President in the US!"")  

3| if age > 24 and time_since_citizenship > 6:  

4|     print(""You can run for Representative in the US!"")  

5| if age > 29 and time_since_citizenship > 8:  

6|     print(""You can run for Senator in the US!"")  
 
 Which of the following values for age, born_in_the_us, and time_since_citizenship would result in ""You can run for Representative in the US!"" being printed, but nothing else? 
  
age = 23  
born_in_the_us = False  
time_since_citizenship = 2  
 
  
  
age = 23  
born_in_the_us = False  
time_since_citizenship = 8  
 
  
  
age = 31  
born_in_the_us = False  
time_since_citizenship = 5  
 
  
  
age = 40  
born_in_the_us = True  
time_since_citizenship = 40  
 
  
  
age = 48  
born_in_the_us = False  
time_since_citizenship = 9  
 
  
  
age = 23  
born_in_the_us = False  
time_since_citizenship = 8  
 
  
  
None of the above  ","age = 52
born_in_the_us = False
time_since_citizenship = 7"
"1| if cash_on_hand < 20 and (atm_nearby or cashback_nearby):  

2|     print(""Get some cash!"")  

3| else:  

4|     print(""Go home!"")  
 
 Which of the following values for atm_nearby, cashback_nearby, and cash_on_hand would result in both ""Get some cash!"" and ""Go home!"" being printed? 
  
atm_nearby = True   
cashback_nearby = True   
cash_on_hand = 15  
 
  
  
atm_nearby = True   
cashback_nearby = True   
cash_on_hand = 20  
 
  
  
atm_nearby = True   
cashback_nearby = True   
cash_on_hand = 25  
 
  
  
atm_nearby = False  
cashback_nearby = True   
cash_on_hand = 15  
 
  
  
atm_nearby = True   
cashback_nearby = False  
cash_on_hand = 20  
 
  
  
atm_nearby = False  
cashback_nearby = False  
cash_on_hand = 25  
 
  
  
None of the above  ",None of the above
"1| if out_of_network and cost > 1000:  

2|     print(""The maximum out-of-network cost is $1000."")  

3| elif not out_of_network and cost > 5000:  

4|     print(""The maximum in-network cost is $5000."")  

5| else:  

6|     print(""Expense approved!"")  
 
Which of the following values for out_of_network and cost would result in ""The maximum out-of-network cost is $1000."" being printed? (There may be more than one right answer. You may select any right answer.)  
  
cost = 500  
out_of_network = False  
 
  
  
cost = 500  
out_of_network = True  
 
  
  
cost = 2500  
out_of_network = False  
 
  
  
cost = 2500  
out_of_network = True  
 
  
  
cost = 5000  
out_of_network = False  
 
  
  
cost = 5000  
out_of_network = True  
 
  
  
cost = 7500  
out_of_network = False  
 
  
  
cost = 7500  
out_of_network = True  
 
  
  
None of the above ","cost = 5000 
out_of_network = True "
"1| if out_of_network and cost > 1000:   
 
2|     print(""The maximum out-of-network cost is $1000."")   
 
3| elif not out_of_network and cost > 5000:   
 
4|     print(""The maximum in-network cost is $5000."")  
 
 5| else:   
 
6|     print(""Expense approved!"")  
 
  

Which of the following values for out_of_network and cost would result in both ""The maximum out-of-network cost is $1000."" and ""The maximum in-network cost is $5000."" being printed? (There may be more than one right answer. You may select any right answer.) 
  
cost = 500  
out_of_network = False  
 
  
  
cost = 500  
out_of_network = True  
 
  
  
cost = 2500  
out_of_network = False  
 
  
  
cost = 2500  
out_of_network = True  
 
  
  
cost = 50  
out_of_network = False  
 
  
  
cost = 50  
out_of_network = True  
 
  
  
  
  
cost = 750  
out_of_network = False  
 
  
  
cost = 750  
out_of_network = True  
 
  
  
  
  
  
  
None of the above","cost = 2500
out_of_network = True"
"1| if out_of_network and cost > 1000:  

2| print(""The maximum out-of-network cost is $1000."")  

3| elif not out_of_network and cost > 5000:  

4| print(""The maximum in-network cost is $5000."") 

 5| else:  

6| print(""Expense approved!"") 

 

cost = 500 
out_of_network = False 

 

cost = 500 
out_of_network = True 

 

cost = 2500 
out_of_network = False 

 

cost = 2500 
out_of_network = True 

 

cost = 5000 
out_of_network = False 

 

cost = 5000 
out_of_network = True 

 

 

cost = 7500 
out_of_network = False 

 

cost = 7500 
out_of_network = True 

 

 

 

None of the above ","None of the above
"
"1| if is_breakfasttime:   
 
2|     if cash > 10:   
 
3|         print(""Go to Egg Harbor!"")   
 
4|     elif cash > 5:   
 
5|         print(""Go to Waffle House!"")   
 
6|     elif cash > 1:   
 
7|         print(""Go to McDonald's!"")   
 
8| else:   
 
9|     if cash > 20:   
 
10|        print(""Go to Atwood's!"")   
 
11|     elif cash > 10:   
 
12|         print(""Go to Cypress!"")   
 
13|     else:  

14|         print(""Go to Waffle House!"")  
 
  

Which of the following values for is_breakfasttime and cash would result in ""Go to McDonald's!"" being printed? (There may be more than one right answer. You may select any correct answer.) 
  
is_breakfasttime = True  
cash = 25  
 
  
  
is_breakfasttime = True  
cash = 15  
 
  
  
is_breakfasttime = True  
cash = 7  
 
  
  
is_breakfasttime = True  
cash = 2  
 
  
  
is_breakfasttime = False  
cash = 25  
 
  
  
is_breakfasttime = False  
cash = 15  
 
  
  
is_breakfasttime = False  
cash = 7  
 
  
  
is_breakfasttime = False  
cash = 2  
 
  
  
None of the above  
","is_breakfasttime = True
cash = 2"
"1| if is_breakfasttime:   
 
2|     if cash > 10:   
 
3|         print(""Go to Egg Harbor!"")   
 
4|     elif cash > 5:   
 
5|         print(""Go to Waffle House!"")   
 
6|     elif cash > 1:   
 
7|         print(""Go to McDonald's!"")   
 
8| else:   
 
9|     if cash > 20:   
 
10|        print(""Go to Atwood's!"")   
 
11|     elif cash > 10:   
 
12|         print(""Go to Cypress!"")   
 
13|     else:  

14|         print(""Go to Waffle House!"") 
 
  

Which of the following values for is_breakfasttime and cash would result in nothing being printed at all? (There may be more than one right answer. You may select any correct answer.) 
  
is_breakfasttime = True  
cash = 25  
 
  
  
is_breakfasttime = True  
cash = 15  
 
  
  
is_breakfasttime = True  
cash = 7  
 
  
  
is_breakfasttime = True  
cash = 2  
 
  
  
is_breakfasttime = False  
cash = 25  
 
  
  
is_breakfasttime = False  
cash = 15  
 
  
  
is_breakfasttime = False  
cash = 7  
 
  
  
is_breakfasttime = False  
cash = 2  
 
  
  
None of the above ",None of the above
"1| def find_the_positives(a_list):
2|     list_of_positives = []
3|     for i in range(len(a_list)):
4|         if i > 0:
5|             list_of_positives.append(a_list[i])
6|     return list_of_positives
Above is a definition of a function called list_of_positives(). Now imagine that we were to run the code:

7| my_list = [1, -5, 4, -4, 2, -1, 5, 9]
8| my_list = find_the_positives(my_list)
9| #What is the value of my_list when this line is reached?
What would be the value of my_list after those lines have been executed?
Pick One option from below:


[]

[1]

[-5, -4, -1]

[1, 4, 2, 5, 9]

[-5, 4, -4, 2, -1, 5, 9]

[1, -5, 4, -4, 2, -1, 5, 9]

An error would result before line 9 is reached.","[1, 4, 2, 5, 9]"
"1| def add_to_list(a_list, new_item, new_index):
2|     a_list.insert(new_index, new_item)
Above is a definition of a function called add_to_list(). Now imagine that we were to run the code:

3| my_list = [""L"", ""O"", ""N""]
4| add_to_list(my_list, 1, ""E"")
5| #What is the value of my_list when this line is reached?
What would be the value of my_list after those lines have been executed?
Pick one option from below:


[""L"", ""O"", ""N""]

[""E"", ""L"", ""O"", ""N""]

[""L"", ""E"", ""O"", ""N""]

[""L"", ""O"", ""E"", ""N""]

[""L"", ""O"", ""N"", ""E""]

An error would result before line 5 is reached.",An error would result before line 5 is reached.
"1| def add_a_capitol(a_dict, a_state, a_city):
2|     a_dict = {a_state: a_city}
Above is a definition of a function called add_a_capitol(). Now imagine that we were to run the code:

3| my_capitols = {""Georgia"": ""Atlanta"", ""Idaho"": ""Boise"", ""Maine"": ""Augusta""}
4| add_a_capitol(my_capitols, ""Texas"", ""Austin"")
5| #What is the value of my_capitols when this line is reached?
What would be the value of my_capitols after those lines have been executed? (Remember: key order does not matter in dictionaries)
Pick one option from below:


None

""Austin""

{""Texas"": ""Austin""}

{""Georgia"": ""Atlanta"", ""Idaho"": ""Boise"", ""Maine"": ""Augusta""}

{""Georgia"": ""Atlanta"", ""Idaho"": ""Boise"", ""Maine"": ""Augusta"", ""Texas"": ""Austin""}

{""Georgia"": ""Atlanta"", ""Idaho"": ""Boise"", ""Maine"": ""Augusta"", ""Austin"": ""Texas""}

An error would result before line 5 is reached.","{""""Georgia"""": """"Atlanta"""", """"Idaho"""": """"Boise"""", """"Maine"""": """"Augusta""""}"
"1| def find_the_evens(a_list):
2|     list_of_evens = []
3|     for i in range(len(a_list)):
4|         if i % 2 == 0:
5|             list_of_evens.append(a_list[i])
6|     return list_of_evens
Above is a definition of a function called find_the_evens(). Now imagine that we were to run the code:

7| my_list = [1, 5, 4, 4, 2, 1, 5, 9]
8| find_the_evens(my_list)
9| #What is the value of my_list when this line is reached?
What would be the value of my_list after those lines have been executed?
Pick one option from below:


[1, 4, 2]

[4, 4, 2]

[1, 4, 2, 5]

[1, 5, 2, 1, 5, 9]

[1, 5, 4, 4, 2, 1, 5]

[1, 5, 4, 4, 2, 1, 5, 9]

An error would result before line 9 is reached.","[1, 5, 4, 4, 2, 1, 5, 9]"
"1| def add_to_list(a_list, new_item):
2|     a_list.insert(0, new_item)
Above is a definition of a function called add_to_list(). Now imagine that we were to run the code:

3| my_list = [""L"", ""O"", ""N""]
4| my_list = add_to_list(my_list, ""E"")
5| #What is the value of my_list when this line is reached?
What would be the value of my_list after those lines have been executed?
Pick one option from below:


None

[""L"", ""O"", ""N""]

[""E"", ""L"", ""O"", ""N""]

[""L"", ""E"", ""O"", ""N""]

[""L"", ""O"", ""E"", ""N""]

[""L"", ""O"", ""N"", ""E""]

An error would result before line 5 is reached.",None
"1| def find_list_odds(a_list):
2|     list_of_odds = []
3|     for i in a_list:
4|         if i % 2 == 1:
5|             list_of_odds.append(i)
6|     return list_of_odds
Above is a definition of a function called find_list_odds(). Now imagine that we were to run the code:

7| my_list = [4, 4, 1, 5, 2, 9, 9, 8]
8| my_list = find_list_odds(my_list)
9| print(my_list)
What would line 9 print?
Pick one option from below:


[4, 1, 2]

[4, 5, 9]

[1, 5, 9, 9]

[4, 1, 2, 9]

[4, 4, 2, 8]

[4, 5, 9, 8]

An error would result on or before line 9.","[1, 5, 9, 9]"
"1| def save_dictionary(filename, a_dict):
2|     [1]
3|     for item in a_dict:
4|         [2]
5|     my_file.close()
Imagine you're writing a function to save a dictionary to a file such that each key:value pair in the dictionary is written to its own line of the file with a tab separating the key and the value. You may assume that the keys and values will both be integers. If the file does not exist when the function is called, you want to create it. If it already exists, you want to overwrite its contents.

For example, save_dictionary(""Test.txt"", {1: 7, 2: 8, 3: 9}) would produce the file:

1	7
2	8
3	9
Which of the following lines could fill in [1] above? Note there may be more than one correct answer; you may select any of the correct answers for credit.
Pick one option from below:

open(filename)

open(filename, ""w"")

open(filename, ""a"")

open(filename, ""r"")

my_file = open(filename)

my_file = open(filename, ""a"")

my_file = open(filename, ""r"")","my_file.write(str(item) + ""\t"" + str(a_dict[item]) + ""\n"")"
"Imagine you have a file of integers called my_file.txt. Each line of the file contains either an integer (e.g. 5) or a float (e.g. 5.276).

The code below attempts to read all the numbers in the file, average them, and print the result. Will it work? If not, why not?

 1| my_file = open(""my_file.txt"")
 2| sum = 0
 3| count = 0
 4| file_text = my_file.read()
 5| file_lines = file_text.split(""\n"")
 6| for line in file_lines:
 7|     sum += int(line)
 8|     count += 1
 9| print(sum / count)
10| my_file.close()

Pick one option from below:

Yes, it will work.

No, it will fail because a mode isn't specified for my_file = open(filename).

No, it will fail because the for loop should iterate over my_file.readlines().

No, it will fail because the for loop should iterate over my_file directly using for line in my_file.

No, it will fail because the lines are converted to floats, which will cause an error when the line is an integer.

No, it will fail because the lines are converted to integers, which will cause an error when the line is a float.

No, it will fail because the lines of the file aren't converted to integers before they are added to the sum.

No, it will fail because the file should be closed before the result is printed.","No, it will fail because the lines are converted to integers, which will cause an error when the line is a float."
"1| def factorial(some_number):
2|     if [1]:
3|         return 1
4|     else:
5|         return [2]
Above is a partial definition for a function called factorial. Select the code that could fill in each blank so that factorial(a_number) will return the correct factorial of that number. Remember, the factorial of a number is the product of every number from that number to 1. For example, factorial(5) = 5 * 4 * 3 * 2 * 1 = 120.

Pick one option from below:

some_number >= 0

some_number = 1

some_number >= 1

some_number == 2

some_number >= 2

None of these will work with the remainder of the code as written.",some_number * factorial(some_number - 1)
"1| def factorial(some_number):
2|     if [1]:
3|         return 1
4|     else:
5|         return [2]
Above is a partial definition for a function called factorial. Select the code that could fill in each blank so that factorial(a_number) will return the correct factorial of that number. Remember, the factorial of a number is the product of every number from that number to 1. For example, factorial(5) = 5 * 4 * 3 * 2 * 1 = 120.

Pick one option from below:

factorial(some_number) * some_number

factorial(some_number - 1) * some_number

factorial(some_number + 1) * some_number

factorial(some_number) + some_number

factorial(some_number - 1) + some_number

factorial(some_number + 1) + some_number

None of these will work with the remainder of the code as written.",factorial(some_number - 1) * some_number
"1| if age > 34 and born_in_the_us:
2|     print(""You can run for President in the US!"")
Which of the following values for age and is_us_citizen would result in ""You can run for President in the US!"" being printed?



age = 24
born_in_the_us = True

age = 34
born_in_the_us = True

age = 44
born_in_the_us = True

age = 24
born_in_the_us = False

age = 34
born_in_the_us = False

age = 44
born_in_the_us = False

None of the above","age = 44
born_in_the_us = True"
"1| if age > 34 and born_in_the_us:
2|     print(""You can run for President in the US!"")
3| if age > 24 and time_since_citizenship > 6:
4|     print(""You can run for Representative in the US!"")
5| if age > 29 and time_since_citizenship > 8:
6|     print(""You can run for Senator in the US!"")
Which of the following values for age, born_in_the_us, and time_since_citizenship would result in ""You can run for Representative in the US!"" and ""You can run for Senator in the US!"" both being printed, but not ""You can run for President in the US!""?



age = 23
born_in_the_us = False
time_since_citizenship = 2

age = 30
born_in_the_us = False
time_since_citizenship = 8

age = 31
born_in_the_us = False
time_since_citizenship = 7

age = 40
born_in_the_us = True 
time_since_citizenship = 40

age = 48
born_in_the_us = False
time_since_citizenship = 9

age = 52
born_in_the_us = False
time_since_citizenship = 7

None of the above","age = 30
born_in_the_us = False
time_since_citizenship = 8"
"1| if not (is_holiday or is_weekend) and are_enrolled:
2|     print(""Go to school!"")
3| else:
4|     print(""Stay home from school!"")
Which of the following values for is_holiday, is_weekend, and are_enrolled would result in ""Go to school!"" being printed?



is_holiday = True 
is_weekend = True 
are_enrolled = True 

is_holiday = True 
is_weekend = False
are_enrolled = True 

is_holiday = True 
is_weekend = False
are_enrolled = False 

is_holiday = False
is_weekend = True 
are_enrolled = True

is_holiday = False
is_weekend = False
are_enrolled = True

is_holiday = False
is_weekend = False
are_enrolled = False

None of the above","is_holiday = False
is_weekend = False
are_enrolled = True"
"1| if am_hungry and cash > 5:
2|     print(""Buy a sandwich!"")
3| elif am_thirty and cash > 2
4|     print(""Buy a drink!"")
Which of the following values for am_hungry, am_thirsty, and cash would result in both ""Buy a sandwich!"" and ""Buy a drink!"" being printed?



am_hungry = True 
am_thirsty = True 
cash = 3 

am_hungry = True 
am_thirsty = True 
cash = 7

am_hungry = True 
am_thirsty = True 
cash = 11

am_hungry = False 
am_thirsty = True 
cash = 3 

am_hungry = True 
am_thirsty = False 
cash = 7

am_hungry = False 
am_thirsty = False 
cash = 11

None of the above","am_hungry = True
am_thirsty = True
cash = 7"
"The following code segment is used for both parts 5 and 6.

1| if reimbursement >= 1000 and travel_is_international:
2|     print(""International travel reimbursement must be under $1000."")
3| elif reimbursement >= 500 and not travel_is_international:
4|     print(""Domestic travel reimbursement must be under $500."")
5| else:
6|     print(""Reimbursement approved!"")
Which of the following values for reimbursement and travel_is_international would result in ""International travel reimbursement must be under $1000."" being printed? (There may be more than one right answer. You may select any correct answer.)



reimbursement = 1250
travel_is_international = False

reimbursement = 1250
travel_is_international = True

reimbursement = 1000
travel_is_international = False

reimbursement = 1000
travel_is_international = True

reimbursement = 750
travel_is_international = False

reimbursement = 750
travel_is_international = True

reimbursement = 500
travel_is_international = False

reimbursement = 500
travel_is_international = True

None of the above","reimbursement = 1250, travel_is_international = True
reimbursement = 1000, travel_is_international = True"
"The following code segment is used for both parts 5 and 6.

1| if reimbursement >= 1000 and travel_is_international:
2|     print(""International travel reimbursement must be under $1000."")
3| elif reimbursement >= 500 and not travel_is_international:
4|     print(""Domestic travel reimbursement must be under $500."")
5| else:
6|     print(""Reimbursement approved!"")
Which of the following values for reimbursement and travel_is_international would result in ""Reimbursement approved!"" being printed? (There may be more than one right answer. You may select any correct answer.)



reimbursement = 1250
travel_is_international = False

reimbursement = 1250
travel_is_international = True

reimbursement = 1000
travel_is_international = False

reimbursement = 1000
travel_is_international = True

reimbursement = 750
travel_is_international = False

reimbursement = 750
travel_is_international = True

reimbursement = 500
travel_is_international = False

reimbursement = 500
travel_is_international = True

None of the above","reimbursement = 750, travel_is_international = False
reimbursement = 500, travel_is_international = False
reimbursement = 750, travel_is_international = True
reimbursement = 500, travel_is_international = True"
"1| if is_lunchtime:
 2|     if cash > 10:
 3|         print(""Go to Moe's!"")
 4|     elif cash > 5:
 5|         print(""Go to Waffle House!"")
 6|     elif cash > 1:
 7|         print(""Go to Taco Bell!"")
 8| else:
 9|     if cash > 20:
10|         print(""Go to Antico!"")
11|     elif cash > 10:
12|         print(""Go to Marlow's!"")
13|     elif cash > 5:
14|         print(""Go to Waffle House!"")
Which of the following values for is_lunchtime and cash would result in ""Go to Marlow's!"" being printed? (There may be more than one right answer. You may select any correct answer.)



is_lunchtime = True
cash = 25

is_lunchtime = True
cash = 15

is_lunchtime = True
cash = 7

is_lunchtime = True
cash = 2

is_lunchtime = False
cash = 25

is_lunchtime = False
cash = 15

is_lunchtime = False
cash = 7

is_lunchtime = False
cash = 2

None of the above","is_lunchtime = False, cash = 15"
"1| if is_lunchtime:
 2|     if cash > 10:
 3|         print(""Go to Moe's!"")
 4|     elif cash > 5:
 5|         print(""Go to Waffle House!"")
 6|     elif cash > 1:
 7|         print(""Go to Taco Bell!"")
 8| else:
 9|     if cash > 20:
10|         print(""Go to Antico!"")
11|     elif cash > 10:
12|         print(""Go to Marlow's!"")
13|     elif cash > 5:
14|         print(""Go to Waffle House!"")


Which of the following values for is_lunchtime and cash would result in nothing being printed at all? (There may be more than one right answer. You may select any correct answer.)



is_lunchtime = True
cash = 25

is_lunchtime = True
cash = 15

is_lunchtime = True
cash = 7

is_lunchtime = True
cash = 2

is_lunchtime = False
cash = 25

is_lunchtime = False
cash = 15

is_lunchtime = False
cash = 7

is_lunchtime = False
cash = 2

None of the above",None of the above
"1| if i >= 1000000000:
2|     print(""Billions!"")
3| elif i >= 1000000:
4|     print(""Millions!"")
5| [fill in this blank]
6|     print(""Thousands!"")
The code above prints ""Billions!"" if i is greater than one billion, and ""Millions!"" if i is greater than one million.

If inserted into the blank, which of the following segments of code will print ""Thousands!"" if i is greater than 1000, but only if i was not also greater than one million or one billion? (There may be more than one correct answer. Choose any correct answer.)



if i >= 1000:

elif i >= 1000:

if i >= 1000 and not i >= 1000000 or i >= 1000000000:

elif i >= 1000 and not i >= 1000000 or i >= 1000000000:

if i >= 1000 and i not >= 1000000 and i not >= 1000000000:

elif i >= 1000 and i not >= 1000000 and i not >= 1000000000:

None of the above","if i >= 1000:
elif i >= 1000 and not i >= 1000000 and not i >= 1000000000:"
"1| start = 0
2| finish = 10
3| [fill in this blank]
The code above should print all even numbers from start to finish (including start and finish). It should work even if the current values of start and finish are changed.

Which of the following code segments would complete this function? (There may be more than one correct answer. Choose any correct answer.)



for i in range(start, finish + 1):
    print(i)
    i += 2

for i in range(start, finish + 1):
    if i % 2 == 1:
        print(i)

for i in range(start, finish + 1):
    if i % 2 == 0:
        print(i)

while start <= finish:
    print(start)
    start += 2

if start % 2 == 1:
    i = start + 1
else:
    i = start
while i <= finish:
    print(i)
    i += 2

if start % 2 == 0:
    i = start + 1
else:
    i = start
while i <= finish:
    print(i)
    i += 2

print(range(start, finish, 2))

None of the above","for i in range(start, finish + 1): if i % 2 == 0: print(i)
while start <= finish: print(start) start += 2
i = start + (start % 2) while i <= finish: print(i) i += 2"
"1| [fill in this blank]
 2|     if is_celsius and temperature > 0.0:
 3|         return True
 4|     elif not is_celsius and temperature > 32.0:
 5|         return True
 6|     else:
 7|         return False
 8|
 9| will_melt(38.4)
10| will_melt(100.6, is_celsius = False)
The code above attempts to define and then call a function called will_melt. will_melt returns True if the temperature given by the positional parameter temperature is above the melting point of ice (32.0 or higher in Fahrenheit, 0.0 or higher in Celsius), False if it does not. By default, will_melt assumes is_celsius is True.

Which of the following code segments could we insert in the blank to complete this function?



def will_melt(temperature):

def will_melt(temperature, is_celsius):

def will_melt(temperature = 38.0, is_celsius):

def will_melt(temperature, is_celsius = True):

def will_melt(temperature = 38.0, is_celsius = True):

def will_melt(temperature):
    is_celsius = True

def will_melt(temperature = 38.0):
    is_celsius = True

def will_melt(temperature, is_celsius):
    is_celsius = True

None of the above","def will_melt(temperature, is_celsius = True):"
"1| try:
2|     some_function()
3| except:
4|     print(""An error occurred!"")
5| [fill in this blank]
6| 
The code segment above attempts to call some_function, and catches any errors that result.

Imagine we wanted to modify this code so that we specifically catch TypeErrors and print ""A TypeError occurred!"". Which of the following code segments could we add to lines 5 and 6 to accomplish this? (There may be more than one correct answer. Choose any correct answer.)



except:
    print(""A TypeError occurred!"")

except TypeError:
    print(""A TypeError occurred!"")

except TypeError as ex:
    print(""A TypeError occurred!"")

try:
    print(""A TypeError occurred!"")

else:
    print(""A TypeError occurred!"")

finally:
    print(""A TypeError occurred!"")

None of the above","except TypeError: print(""A TypeError occurred!"")"
"1| def check_even(an_int):
The function check_even should return True if an_int is odd, False if it is not.

Which of the following will correctly complete this function? (There may be more than one correct answer. Choose any correct answer.)



    if an_int % 2 == 0:
        return True
    else:
        return False

    if an_int % 2 == 1:
        return False
    else:
        return True

    if an_int % 2 == 0:
        return True
    return False

    if an_int % 2 == 1:
        return True
    return False

    if an_int % 2 == 1:
        return False
    return True

None of the above","if an_int % 2 == 0: return True
if an_int % 2 == 1: return False"
"1| def average_odds(start, end):
2|     sum = 0
3|     count = 0
4|     for i in range(start, end + 1):
5|         [fill in this blank] 
6|     return sum / count
The function average_odds should return the average of all the odd numbers between start and end (inclusive).

Which of the following segments would correctly complete this function? (There may be more than one correct answer. Choose any correct answer.)



        sum += i

        count += 1

        sum += i
        count += 1

        if i % 2 == 0:
            sum += i
        count += 1

        if i % 2 == 0:
            sum += i
            count += 1

        if not (i % 2 == 0):
            sum += i
        count += 1

        if not (i % 2 == 0):
            sum += i
            count += 1

        if i % 2 == 1:
            sum += i
        count += 1

        if i % 2 == 1:
            sum += i
            count += 1

        if not (i % 2 == 1):
            sum += i
        count += 1

        if not (i % 2 == 1):
            sum += i
            count += 1

None of the above","if i % 2 == 1: sum += i count += 1
if not (i % 2 == 0): sum += i count += 1"
"1| if ""!!!"" in a_string:  

2| 	print(""You're really excited!"")  

3| elif ""!!"" in a_string:  

4| 	print(""You're pretty excited!"")  

5| [fill in this blank]  

6| 	print(""You're excited!"")  

7| else:  

8| 	print(""Are you bored?"")  

The code above prints ""You're really excited!"" if a_string has the text ""!!!"" in it, and """"You're pretty excited!"" if a_string has the text ""!!"" in it. 

If inserted into the blank, which of the following segments of code will print ""You're excited!"" if a_string has the text ""!"" in it, but only if a_string did not also have ""!!"" or ""!!!"" in it, and still print ""Are you bored?"" only if the string has no exclamation points in it? (There may be more than one correct answer. Choose any correct answer.) 

 

if ""!"" in a_string: 

 

elif ""!"" in a_string: 

 

if not ""!!"" in a_string and not ""!!!"" in a_string: 

 

elif not ""!!"" in a_string and not ""!!!"" in a_string: 

 

if ""!"" in a_string or not (""!!"" in a_string or ""!!!"" in a_string): 

 

elif ""!"" in a_string or not (""!!"" in a_string or ""!!!"" in a_string): 

 

None of the above 

 ","elif ""!"" in a_string:"
"1| start = 0  

2| finish = 10  

3| [fill in this blank]  

The code above should print every other number from start to finish (including start and finish). 

Which of the following code segments would complete this function? (There may be more than one correct answer. Choose any correct answer.) 

 

 

for i in range(start, finish, 2): 
 print(i) 

 

for i in range(start, finish + 1, 2): 
 print(i) 

 

for i in range(start + 1, finish, 2): 
 print(i) 

 

while start <= finish: 
 print(start) 
 start += 2 

 

while start < finish: 
 print(start) 
 start += 2 

 

while start <= finish: 
 start += 2 
 print(start) 

 

while start < finish: 
 start += 2 
 print(start) 

 

None of the above ","for i in range(start, finish + 1, 2):
    print(i)"
"1| [fill in this blank]  

2| 	if is_weekend and time > 9:  

3| 		return True  

4| 	elif not is_weekend and time > 6:  

5| 		return True  

6| 	else:  

7| 		return False  

8|  

9| wake_up(5)  

10| wake_up(8, is_weekend = True)  

The code above attempts to define and then call a function called wake_up. wake_up returns True if the time given by the positional parameter time is after 9 on a weekend or 6 on a weekday, False if it does not. By default, wake_up assumes is_weekend is False. 

Which of the following code segments could we insert in the blank to complete this function? 

 

 

def wake_up(time): 

 

def wake_up(time, is_weekend): 

 

def wake_up(time = 6, is_weekend): 

 

def wake_up(time = 6, is_weekend = False): 

 

def wake_up(time, is_weekend = False): 

 

def wake_up(time): 
 is_weekend = False 

 

def wake_up(time = 6): 
 is_weekend = False 

 

def wake_up(time, is_weekend): 
 is_weekend = False 

 

None of the above ","def wake_up(time, is_weekend = False):"
"1| try:  

2| 	some_function()  

3| except:  

4| 	print(""An error occurred!"")  

5| [fill in this blank]  

6|  

The code segment above attempts to call some_function, and catches any errors that result. 

Imagine we wanted to modify this code so that we specifically catch KeyError and print ""A KeyError occurred!"". Which of the following code segments could we add to lines 5 and 6 to accomplish this? (There may be more than one correct answer. Choose any correct answer.) 

 

except: 
 print(""A KeyError occurred!"") 

 

 
 

except KeyError: 
 print(""A KeyError occurred!"") 

 

 

except KeyError as ex: 
 print(""A KeyError occurred!"") 

 

try: 
 print(""A KeyError occurred!"") 

 

else: 
 print(""A KeyError occurred!"") 

 

finally: 
 print(""A KeyError occurred!"") 

 

 
 

None of the above 

 

 ",None of the above
"1| def is_a_factor(number, potential_factor):  

The function is_a_factor should return True if potential_factor is a factor of number, False if it is not. potential_factor is a factor of number if potential_factor goes into number evenly (no remainder). 

Which of the following will correctly complete this function? (There may be more than one correct answer. Choose any correct answer.) 

 

 

if number % potential_factor == 0: 
 return True 
return False 

 

if number % potential_factor == 1: 
 return True 
return False 

 

if number % potential_factor == 0: 
 return False 
return True 

 

if number % potential_factor == 1: 
 return False 
return True 

 

if number % potential_factor == 0: 
 return False 
else: 
 return True 

 

if number % potential_factor == 1: 
 return True 
else: 
 return False 

 

return number % potential_factor == 0 

 

None of the above ","if number % potential_factor == 0:
    return True
return False"
"1| def average_evens(start, end):  

2|         sum = 0  

3|         count = 0  

4|         for i in range(start, end + 1):  

5|                 [fill in this blank]  

6|         return sum / count  

The function average_evens should return the average of all the even numbers between start and end (inclusive). 

Which of the following segments would correctly complete this function? (There may be more than one correct answer. Choose any correct answer.) 

 

sum += i 

 

count += 1 

 

sum += i 
count += 1 

 

if i % 2 == 0: 
 sum += i 
 count += 1 

 

if i % 2 == 0: 
 sum += i 
 count += 1 

 

if not (i % 2 == 0): 
 sum += i 
 count += 1 

 

if not (i % 2 == 0): 
 sum += i 
 count += 1 

 

if i % 2 == 1: 
 sum += i 
 count += 1 

 

if i % 2 == 1: 
 sum += i 
 count += 1 

 

if not (i % 2 == 1): 
 sum += i 
 count += 1 

 

if not (i % 2 == 1): 
 sum += i 
 count += 1 

 

None of the above 

 
 

 ","if i % 2 == 0:
            sum += i
            count += 1"
"print(bool(""""))
What will be printed?
True
False
None
Error",FALSE
"print(5**2)
What will be the output of this Python code?
10
25
5
None",25
"for i in range(1, 4):
    print(i)
What will be the output?
0 1 2
1 2 3
1 2 3 4
None",1 2 3
"print(float(5))
What will be the output?
5
5.0
None
Error",5
"for i in range(1, 4):
    print(i)
What will be the output?
0 1 2
1 2 3
1 2 3 4
None",1 2 3
"x = [1, 2, 3]
print(x[0])
What will be printed?
1
2
None
Error",1
"y = [1, 2, 3]
print(y[-1])
What is the output of this code?
1
2
3
None",3
"print(bool(""""))
What will be printed?
True
False
None
Error",FALSE
"def func(x):
    return x * 2
print(func(3))
What is the output?
6
3
9
None",6
"x = ""hello""
print(len(x))
What will be printed?
4
5
None
Error",5
"print(5//2)
What would be the output of this Python code?
2
2.0
3
None",2
"y = [1, 2, 3]
print(y[-1])
What is the output of this code?
1
2
3
None",3
"x = ""hello""
print(len(x))
What will be printed?
4
5
None
Error",5
"for i in range(1, 4):
    print(i)
What will be the output?
0 1 2
1 2 3
1 2 3 4
None",1 2 3
"for i in range(1, 4):
    print(i)
What will be the output?
0 1 2
1 2 3
1 2 3 4
None",1 2 3
"def func(x):
    return x * 2
print(func(3))
What is the output?
6
3
9
None",6
"print(bool(""""))
What will be printed?
True
False
None
Error",FALSE
"for i in range(1, 4):
    print(i)
What will be the output?
0 1 2
1 2 3
1 2 3 4
None",1 2 3
"print(float(5))
What will be the output?
5
5.0
None
Error",5
"x = 5
x += 3
print(x)
What will be printed?
5
3
8
None",8
"for i in range(1, 4):
    print(i)
What will be the output?
0 1 2
1 2 3
1 2 3 4
None",1 2 3
"x = 5
x += 3
print(x)
What will be printed?
5
3
8
None",8
"print(5**2)
What will be the output of this Python code?
10
25
5
None",25
"x = [1, 2, 3]
print(x[0])
What will be printed?
1
2
None
Error",1
"print(float(5))
What will be the output?
5
5.0
None
Error",5
"def func(x):
    return x * 2
print(func(3))
What is the output?
6
3
9
None",6
"print(float(5))
What will be the output?
5
5.0
None
Error",5
"print(5//2)
What would be the output of this Python code?
2
2.0
3
None",2
"y = [1, 2, 3]
print(y[-1])
What is the output of this code?
1
2
3
None",3
"y = [1, 2, 3]
print(y[-1])
What is the output of this code?
1
2
3
None",3
"x = [1, 2, 3]
print(x[0])
What will be printed?
1
2
None
Error",1
"def func(x):
    return x * 2
print(func(3))
What is the output?
6
3
9
None",6
"print(5//2)
What would be the output of this Python code?
2
2.0
3
None",2
"x = ""hello""
print(len(x))
What will be printed?
4
5
None
Error",5
"x = 5
x += 3
print(x)
What will be printed?
5
3
8
None",8
"x = 5
x += 3
print(x)
What will be printed?
5
3
8
None",8
"print(float(5))
What will be the output?
5
5.0
None
Error",5
"print(5//2)
What would be the output of this Python code?
2
2.0
3
None",2
"x = ""hello""
print(len(x))
What will be printed?
4
5
None
Error",5
"print(bool(""""))
What will be printed?
True
False
None
Error",FALSE
"x = [1, 2, 3]
print(x[0])
What will be printed?
1
2
None
Error",1
"x = 5
x += 3
print(x)
What will be printed?
5
3
8
None",8
"x = 5
x += 3
print(x)
What will be printed?
5
3
8
None",8
"print(bool(""""))
What will be printed?
True
False
None
Error",FALSE
"print(float(5))
What will be the output?
5
5.0
None
Error",5
"print(bool(""""))
What will be printed?
True
False
None
Error",FALSE
"x = [1, 2, 3]
print(x[0])
What will be printed?
1
2
None
Error",1
"print(float(5))
What will be the output?
5
5.0
None
Error",5
"print(5**2)
What will be the output of this Python code?
10
25
5
None",25
"print(5**2)
What will be the output of this Python code?
10
25
5
None",25