{"Prompt":"print(float(\"2.1\"))\nWhat would be the output of the line of code above? Include only what is actually printed to the console.\nPick one option from below:\n\n2\n\n2.1\n\n\"2\"\n\n\"2.1\"\n\nTrue\n\nFalse\n\nAn error message\n\nThere will be no output","Answer":"2.1"}
{"Prompt":"print(int(\"2.1\"))\nWhat would be the output of the line of code above? Include only what is actually printed to the console.\nPick one option from below:\n\n2\n\n2.1\n\n\"2\"\n\n\"2.1\"\n\nTrue\n\nFalse\n\nAn error message\n\nThere will be no output","Answer":"2"}
{"Prompt":"print(int(\"2\"))\nWhat would be the output of the line of code above? Include only what is actually printed to the console.\nPick one option from below:\n2\n\n2.0\n\n\"2\"\n\n\"2.0\"\n\nTrue\n\nFalse\n\nAn error message\n\nThere will be no output","Answer":"2"}
{"Prompt":"print(str(2.1))\nWhat would be the output of the line of code above? Include only what is actually printed to the console.\nPick one option from below:\n\n2\n\n2.1\n\n\"2\"\n\n\"2.1\"\n\nTrue\n\nFalse\n\nAn error message\n\nThere will be no output","Answer":"\"2.1\""}
{"Prompt":"print(float(\"2\"))\nWhat would be the output of the line of code above? Include only what is actually printed to the console.\nPick one option from below:\n\n2\n\n2.0\n\n\"2\"\n\n\"2.0\"\n\nTrue\n\nFalse\n\nAn error message\n\nThere will be no output","Answer":"2"}
{"Prompt":"print(bool(\"\"))\nWhat would be the output of the line of code above? Include only what is actually printed to the console.\nPick one option from below:\n\n1\n\n1.0\n\n\"1\"\n\n\"1.0\"\n\nTrue\n\nFalse\n\nAn error message\n\nThere will be no output","Answer":"FALSE"}
{"Prompt":"print(bool(2))\nWhat would be the output of the line of code above? Include only what is actually printed to the console.\nPrint one option from below:\n\n2\n\n2.0\n\n\"2\"\n\n\"2.0\"\n\nTrue\n\nFalse\n\nAn error message\n\nThere will be no output","Answer":"TRUE"}
{"Prompt":"print(float(False))\nWhat would be the output of the line of code above? Include only what is actually printed to the console.\nPick one option from below:\n\n0\n\n0.0\n\n\"0\"\n\n\"0.0\"\n\nTrue\n\nFalse\n\nAn error message\n\nThere will be no output","Answer":"0"}
{"Prompt":"not (False and True)\nDoes the statement above resolve to True or False?\n\nTrue\n\nFalse","Answer":"TRUE"}
{"Prompt":"False or not True\nDoes the statement above resolve to True or False?\n\nTrue\n\nFalse","Answer":"FALSE"}
{"Prompt":"(True and not False) and False\nDoes the statement above resolve to True or False?\n\nTrue\n\nFalse","Answer":"FALSE"}
{"Prompt":"(False and True) or (False or True)\nDoes the statement above resolve to True or False?\n\nTrue\n\nFalse","Answer":"TRUE"}
{"Prompt":"1| if not user_is_invalid and (password_correct or previously_authenticated):  \n\n2|     print(\"Login successful!\")  \n\n3| else:  \n\n4|     print(\"Login failed!\")  \n \nWhich of the following values for user_is_invalid, password_correct, and previously_authenticated would result in \"Login successful!\" being printed?  \n  \nuser_is_invalid = True   \npassword_correct = True   \npreviously_authenticated = True  \n \n  \n  \nuser_is_invalid = True   \npassword_correct = True   \npreviously_authenticated = False  \n \n  \n  \nuser_is_invalid = True   \npassword_correct = False  \npreviously_authenticated = True  \n \n  \n  \nuser_is_invalid = True   \npassword_correct = False  \npreviously_authenticated = False  \n \n  \n  \nuser_is_invalid = False  \npassword_correct = True   \npreviously_authenticated = True  \n \n  \n  \nuser_is_invalid = False  \npassword_correct = False  \npreviously_authenticated = False  \n \n  \n  \nNone of the above","Answer":"user_is_invalid = False  \npassword_correct = True   \npreviously_authenticated = True  "}
{"Prompt":"1| if age > 34 and born_in_the_us:  \n\n2|     print(\"You can run for President in the US!\")  \n\n3| if age > 24 and time_since_citizenship > 6:  \n\n4|     print(\"You can run for Representative in the US!\")  \n\n5| if age > 29 and time_since_citizenship > 8:  \n\n6|     print(\"You can run for Senator in the US!\")  \n \n Which of the following values for age, born_in_the_us, and time_since_citizenship would result in \"You can run for Representative in the US!\" being printed, but nothing else? \n  \nage = 23  \nborn_in_the_us = False  \ntime_since_citizenship = 2  \n \n  \n  \nage = 23  \nborn_in_the_us = False  \ntime_since_citizenship = 8  \n \n  \n  \nage = 31  \nborn_in_the_us = False  \ntime_since_citizenship = 5  \n \n  \n  \nage = 40  \nborn_in_the_us = True  \ntime_since_citizenship = 40  \n \n  \n  \nage = 48  \nborn_in_the_us = False  \ntime_since_citizenship = 9  \n \n  \n  \nage = 23  \nborn_in_the_us = False  \ntime_since_citizenship = 8  \n \n  \n  \nNone of the above  ","Answer":"age = 52\nborn_in_the_us = False\ntime_since_citizenship = 7"}
{"Prompt":"1| if cash_on_hand < 20 and (atm_nearby or cashback_nearby):  \n\n2|     print(\"Get some cash!\")  \n\n3| else:  \n\n4|     print(\"Go home!\")  \n \n Which of the following values for atm_nearby, cashback_nearby, and cash_on_hand would result in both \"Get some cash!\" and \"Go home!\" being printed? \n  \natm_nearby = True   \ncashback_nearby = True   \ncash_on_hand = 15  \n \n  \n  \natm_nearby = True   \ncashback_nearby = True   \ncash_on_hand = 20  \n \n  \n  \natm_nearby = True   \ncashback_nearby = True   \ncash_on_hand = 25  \n \n  \n  \natm_nearby = False  \ncashback_nearby = True   \ncash_on_hand = 15  \n \n  \n  \natm_nearby = True   \ncashback_nearby = False  \ncash_on_hand = 20  \n \n  \n  \natm_nearby = False  \ncashback_nearby = False  \ncash_on_hand = 25  \n \n  \n  \nNone of the above  ","Answer":"None of the above"}
{"Prompt":"1| if out_of_network and cost > 1000:  \n\n2|     print(\"The maximum out-of-network cost is $1000.\")  \n\n3| elif not out_of_network and cost > 5000:  \n\n4|     print(\"The maximum in-network cost is $5000.\")  \n\n5| else:  \n\n6|     print(\"Expense approved!\")  \n \nWhich of the following values for out_of_network and cost would result in \"The maximum out-of-network cost is $1000.\" being printed? (There may be more than one right answer. You may select any right answer.)  \n  \ncost = 500  \nout_of_network = False  \n \n  \n  \ncost = 500  \nout_of_network = True  \n \n  \n  \ncost = 2500  \nout_of_network = False  \n \n  \n  \ncost = 2500  \nout_of_network = True  \n \n  \n  \ncost = 5000  \nout_of_network = False  \n \n  \n  \ncost = 5000  \nout_of_network = True  \n \n  \n  \ncost = 7500  \nout_of_network = False  \n \n  \n  \ncost = 7500  \nout_of_network = True  \n \n  \n  \nNone of the above ","Answer":"cost = 5000 \nout_of_network = True "}
{"Prompt":"1| if out_of_network and cost > 1000:   \n \n2|     print(\"The maximum out-of-network cost is $1000.\")   \n \n3| elif not out_of_network and cost > 5000:   \n \n4|     print(\"The maximum in-network cost is $5000.\")  \n \n 5| else:   \n \n6|     print(\"Expense approved!\")  \n \n  \n\nWhich of the following values for out_of_network and cost would result in both \"The maximum out-of-network cost is $1000.\" and \"The maximum in-network cost is $5000.\" being printed? (There may be more than one right answer. You may select any right answer.) \n  \ncost = 500  \nout_of_network = False  \n \n  \n  \ncost = 500  \nout_of_network = True  \n \n  \n  \ncost = 2500  \nout_of_network = False  \n \n  \n  \ncost = 2500  \nout_of_network = True  \n \n  \n  \ncost = 50  \nout_of_network = False  \n \n  \n  \ncost = 50  \nout_of_network = True  \n \n  \n  \n  \n  \ncost = 750  \nout_of_network = False  \n \n  \n  \ncost = 750  \nout_of_network = True  \n \n  \n  \n  \n  \n  \n  \nNone of the above","Answer":"cost = 2500\nout_of_network = True"}
{"Prompt":"1| if out_of_network and cost > 1000:  \n\n2| print(\"The maximum out-of-network cost is $1000.\")  \n\n3| elif not out_of_network and cost > 5000:  \n\n4| print(\"The maximum in-network cost is $5000.\") \n\n 5| else:  \n\n6| print(\"Expense approved!\") \n\n \n\ncost = 500 \nout_of_network = False \n\n \n\ncost = 500 \nout_of_network = True \n\n \n\ncost = 2500 \nout_of_network = False \n\n \n\ncost = 2500 \nout_of_network = True \n\n \n\ncost = 5000 \nout_of_network = False \n\n \n\ncost = 5000 \nout_of_network = True \n\n \n\n \n\ncost = 7500 \nout_of_network = False \n\n \n\ncost = 7500 \nout_of_network = True \n\n \n\n \n\n \n\nNone of the above ","Answer":"None of the above\n"}
{"Prompt":"1| if is_breakfasttime:   \n \n2|     if cash > 10:   \n \n3|         print(\"Go to Egg Harbor!\")   \n \n4|     elif cash > 5:   \n \n5|         print(\"Go to Waffle House!\")   \n \n6|     elif cash > 1:   \n \n7|         print(\"Go to McDonald's!\")   \n \n8| else:   \n \n9|     if cash > 20:   \n \n10|        print(\"Go to Atwood's!\")   \n \n11|     elif cash > 10:   \n \n12|         print(\"Go to Cypress!\")   \n \n13|     else:  \n\n14|         print(\"Go to Waffle House!\")  \n \n  \n\nWhich of the following values for is_breakfasttime and cash would result in \"Go to McDonald's!\" being printed? (There may be more than one right answer. You may select any correct answer.) \n  \nis_breakfasttime = True  \ncash = 25  \n \n  \n  \nis_breakfasttime = True  \ncash = 15  \n \n  \n  \nis_breakfasttime = True  \ncash = 7  \n \n  \n  \nis_breakfasttime = True  \ncash = 2  \n \n  \n  \nis_breakfasttime = False  \ncash = 25  \n \n  \n  \nis_breakfasttime = False  \ncash = 15  \n \n  \n  \nis_breakfasttime = False  \ncash = 7  \n \n  \n  \nis_breakfasttime = False  \ncash = 2  \n \n  \n  \nNone of the above  \n","Answer":"is_breakfasttime = True\ncash = 2"}
{"Prompt":"1| if is_breakfasttime:   \n \n2|     if cash > 10:   \n \n3|         print(\"Go to Egg Harbor!\")   \n \n4|     elif cash > 5:   \n \n5|         print(\"Go to Waffle House!\")   \n \n6|     elif cash > 1:   \n \n7|         print(\"Go to McDonald's!\")   \n \n8| else:   \n \n9|     if cash > 20:   \n \n10|        print(\"Go to Atwood's!\")   \n \n11|     elif cash > 10:   \n \n12|         print(\"Go to Cypress!\")   \n \n13|     else:  \n\n14|         print(\"Go to Waffle House!\") \n \n  \n\nWhich of the following values for is_breakfasttime and cash would result in nothing being printed at all? (There may be more than one right answer. You may select any correct answer.) \n  \nis_breakfasttime = True  \ncash = 25  \n \n  \n  \nis_breakfasttime = True  \ncash = 15  \n \n  \n  \nis_breakfasttime = True  \ncash = 7  \n \n  \n  \nis_breakfasttime = True  \ncash = 2  \n \n  \n  \nis_breakfasttime = False  \ncash = 25  \n \n  \n  \nis_breakfasttime = False  \ncash = 15  \n \n  \n  \nis_breakfasttime = False  \ncash = 7  \n \n  \n  \nis_breakfasttime = False  \ncash = 2  \n \n  \n  \nNone of the above ","Answer":"None of the above"}
{"Prompt":"1| def find_the_positives(a_list):\n2|     list_of_positives = []\n3|     for i in range(len(a_list)):\n4|         if i > 0:\n5|             list_of_positives.append(a_list[i])\n6|     return list_of_positives\nAbove is a definition of a function called list_of_positives(). Now imagine that we were to run the code:\n\n7| my_list = [1, -5, 4, -4, 2, -1, 5, 9]\n8| my_list = find_the_positives(my_list)\n9| #What is the value of my_list when this line is reached?\nWhat would be the value of my_list after those lines have been executed?\nPick One option from below:\n\n\n[]\n\n[1]\n\n[-5, -4, -1]\n\n[1, 4, 2, 5, 9]\n\n[-5, 4, -4, 2, -1, 5, 9]\n\n[1, -5, 4, -4, 2, -1, 5, 9]\n\nAn error would result before line 9 is reached.","Answer":"[1, 4, 2, 5, 9]"}
{"Prompt":"1| def add_to_list(a_list, new_item, new_index):\n2|     a_list.insert(new_index, new_item)\nAbove is a definition of a function called add_to_list(). Now imagine that we were to run the code:\n\n3| my_list = [\"L\", \"O\", \"N\"]\n4| add_to_list(my_list, 1, \"E\")\n5| #What is the value of my_list when this line is reached?\nWhat would be the value of my_list after those lines have been executed?\nPick one option from below:\n\n\n[\"L\", \"O\", \"N\"]\n\n[\"E\", \"L\", \"O\", \"N\"]\n\n[\"L\", \"E\", \"O\", \"N\"]\n\n[\"L\", \"O\", \"E\", \"N\"]\n\n[\"L\", \"O\", \"N\", \"E\"]\n\nAn error would result before line 5 is reached.","Answer":"An error would result before line 5 is reached."}
{"Prompt":"1| def add_a_capitol(a_dict, a_state, a_city):\n2|     a_dict = {a_state: a_city}\nAbove is a definition of a function called add_a_capitol(). Now imagine that we were to run the code:\n\n3| my_capitols = {\"Georgia\": \"Atlanta\", \"Idaho\": \"Boise\", \"Maine\": \"Augusta\"}\n4| add_a_capitol(my_capitols, \"Texas\", \"Austin\")\n5| #What is the value of my_capitols when this line is reached?\nWhat would be the value of my_capitols after those lines have been executed? (Remember: key order does not matter in dictionaries)\nPick one option from below:\n\n\nNone\n\n\"Austin\"\n\n{\"Texas\": \"Austin\"}\n\n{\"Georgia\": \"Atlanta\", \"Idaho\": \"Boise\", \"Maine\": \"Augusta\"}\n\n{\"Georgia\": \"Atlanta\", \"Idaho\": \"Boise\", \"Maine\": \"Augusta\", \"Texas\": \"Austin\"}\n\n{\"Georgia\": \"Atlanta\", \"Idaho\": \"Boise\", \"Maine\": \"Augusta\", \"Austin\": \"Texas\"}\n\nAn error would result before line 5 is reached.","Answer":"{\"\"Georgia\"\": \"\"Atlanta\"\", \"\"Idaho\"\": \"\"Boise\"\", \"\"Maine\"\": \"\"Augusta\"\"}"}
{"Prompt":"1| def find_the_evens(a_list):\n2|     list_of_evens = []\n3|     for i in range(len(a_list)):\n4|         if i % 2 == 0:\n5|             list_of_evens.append(a_list[i])\n6|     return list_of_evens\nAbove is a definition of a function called find_the_evens(). Now imagine that we were to run the code:\n\n7| my_list = [1, 5, 4, 4, 2, 1, 5, 9]\n8| find_the_evens(my_list)\n9| #What is the value of my_list when this line is reached?\nWhat would be the value of my_list after those lines have been executed?\nPick one option from below:\n\n\n[1, 4, 2]\n\n[4, 4, 2]\n\n[1, 4, 2, 5]\n\n[1, 5, 2, 1, 5, 9]\n\n[1, 5, 4, 4, 2, 1, 5]\n\n[1, 5, 4, 4, 2, 1, 5, 9]\n\nAn error would result before line 9 is reached.","Answer":"[1, 5, 4, 4, 2, 1, 5, 9]"}
{"Prompt":"1| def add_to_list(a_list, new_item):\n2|     a_list.insert(0, new_item)\nAbove is a definition of a function called add_to_list(). Now imagine that we were to run the code:\n\n3| my_list = [\"L\", \"O\", \"N\"]\n4| my_list = add_to_list(my_list, \"E\")\n5| #What is the value of my_list when this line is reached?\nWhat would be the value of my_list after those lines have been executed?\nPick one option from below:\n\n\nNone\n\n[\"L\", \"O\", \"N\"]\n\n[\"E\", \"L\", \"O\", \"N\"]\n\n[\"L\", \"E\", \"O\", \"N\"]\n\n[\"L\", \"O\", \"E\", \"N\"]\n\n[\"L\", \"O\", \"N\", \"E\"]\n\nAn error would result before line 5 is reached.","Answer":"None"}
{"Prompt":"1| def find_list_odds(a_list):\n2|     list_of_odds = []\n3|     for i in a_list:\n4|         if i % 2 == 1:\n5|             list_of_odds.append(i)\n6|     return list_of_odds\nAbove is a definition of a function called find_list_odds(). Now imagine that we were to run the code:\n\n7| my_list = [4, 4, 1, 5, 2, 9, 9, 8]\n8| my_list = find_list_odds(my_list)\n9| print(my_list)\nWhat would line 9 print?\nPick one option from below:\n\n\n[4, 1, 2]\n\n[4, 5, 9]\n\n[1, 5, 9, 9]\n\n[4, 1, 2, 9]\n\n[4, 4, 2, 8]\n\n[4, 5, 9, 8]\n\nAn error would result on or before line 9.","Answer":"[1, 5, 9, 9]"}
{"Prompt":"1| def save_dictionary(filename, a_dict):\n2|     [1]\n3|     for item in a_dict:\n4|         [2]\n5|     my_file.close()\nImagine you're writing a function to save a dictionary to a file such that each key:value pair in the dictionary is written to its own line of the file with a tab separating the key and the value. You may assume that the keys and values will both be integers. If the file does not exist when the function is called, you want to create it. If it already exists, you want to overwrite its contents.\n\nFor example, save_dictionary(\"Test.txt\", {1: 7, 2: 8, 3: 9}) would produce the file:\n\n1\t7\n2\t8\n3\t9\nWhich of the following lines could fill in [1] above? Note there may be more than one correct answer; you may select any of the correct answers for credit.\nPick one option from below:\n\nopen(filename)\n\nopen(filename, \"w\")\n\nopen(filename, \"a\")\n\nopen(filename, \"r\")\n\nmy_file = open(filename)\n\nmy_file = open(filename, \"a\")\n\nmy_file = open(filename, \"r\")","Answer":"my_file.write(str(item) + \"\\t\" + str(a_dict[item]) + \"\\n\")"}
{"Prompt":"Imagine you have a file of integers called my_file.txt. Each line of the file contains either an integer (e.g. 5) or a float (e.g. 5.276).\n\nThe code below attempts to read all the numbers in the file, average them, and print the result. Will it work? If not, why not?\n\n 1| my_file = open(\"my_file.txt\")\n 2| sum = 0\n 3| count = 0\n 4| file_text = my_file.read()\n 5| file_lines = file_text.split(\"\\n\")\n 6| for line in file_lines:\n 7|     sum += int(line)\n 8|     count += 1\n 9| print(sum \/ count)\n10| my_file.close()\n\nPick one option from below:\n\nYes, it will work.\n\nNo, it will fail because a mode isn't specified for my_file = open(filename).\n\nNo, it will fail because the for loop should iterate over my_file.readlines().\n\nNo, it will fail because the for loop should iterate over my_file directly using for line in my_file.\n\nNo, it will fail because the lines are converted to floats, which will cause an error when the line is an integer.\n\nNo, it will fail because the lines are converted to integers, which will cause an error when the line is a float.\n\nNo, it will fail because the lines of the file aren't converted to integers before they are added to the sum.\n\nNo, it will fail because the file should be closed before the result is printed.","Answer":"No, it will fail because the lines are converted to integers, which will cause an error when the line is a float."}
{"Prompt":"1| def factorial(some_number):\n2|     if [1]:\n3|         return 1\n4|     else:\n5|         return [2]\nAbove is a partial definition for a function called factorial. Select the code that could fill in each blank so that factorial(a_number) will return the correct factorial of that number. Remember, the factorial of a number is the product of every number from that number to 1. For example, factorial(5) = 5 * 4 * 3 * 2 * 1 = 120.\n\nPick one option from below:\n\nsome_number >= 0\n\nsome_number = 1\n\nsome_number >= 1\n\nsome_number == 2\n\nsome_number >= 2\n\nNone of these will work with the remainder of the code as written.","Answer":"some_number * factorial(some_number - 1)"}
{"Prompt":"1| def factorial(some_number):\n2|     if [1]:\n3|         return 1\n4|     else:\n5|         return [2]\nAbove is a partial definition for a function called factorial. Select the code that could fill in each blank so that factorial(a_number) will return the correct factorial of that number. Remember, the factorial of a number is the product of every number from that number to 1. For example, factorial(5) = 5 * 4 * 3 * 2 * 1 = 120.\n\nPick one option from below:\n\nfactorial(some_number) * some_number\n\nfactorial(some_number - 1) * some_number\n\nfactorial(some_number + 1) * some_number\n\nfactorial(some_number) + some_number\n\nfactorial(some_number - 1) + some_number\n\nfactorial(some_number + 1) + some_number\n\nNone of these will work with the remainder of the code as written.","Answer":"factorial(some_number - 1) * some_number"}
{"Prompt":"1| if age > 34 and born_in_the_us:\n2|     print(\"You can run for President in the US!\")\nWhich of the following values for age and is_us_citizen would result in \"You can run for President in the US!\" being printed?\n\n\n\nage = 24\nborn_in_the_us = True\n\nage = 34\nborn_in_the_us = True\n\nage = 44\nborn_in_the_us = True\n\nage = 24\nborn_in_the_us = False\n\nage = 34\nborn_in_the_us = False\n\nage = 44\nborn_in_the_us = False\n\nNone of the above","Answer":"age = 44\nborn_in_the_us = True"}
{"Prompt":"1| if age > 34 and born_in_the_us:\n2|     print(\"You can run for President in the US!\")\n3| if age > 24 and time_since_citizenship > 6:\n4|     print(\"You can run for Representative in the US!\")\n5| if age > 29 and time_since_citizenship > 8:\n6|     print(\"You can run for Senator in the US!\")\nWhich of the following values for age, born_in_the_us, and time_since_citizenship would result in \"You can run for Representative in the US!\" and \"You can run for Senator in the US!\" both being printed, but not \"You can run for President in the US!\"?\n\n\n\nage = 23\nborn_in_the_us = False\ntime_since_citizenship = 2\n\nage = 30\nborn_in_the_us = False\ntime_since_citizenship = 8\n\nage = 31\nborn_in_the_us = False\ntime_since_citizenship = 7\n\nage = 40\nborn_in_the_us = True \ntime_since_citizenship = 40\n\nage = 48\nborn_in_the_us = False\ntime_since_citizenship = 9\n\nage = 52\nborn_in_the_us = False\ntime_since_citizenship = 7\n\nNone of the above","Answer":"age = 30\nborn_in_the_us = False\ntime_since_citizenship = 8"}
{"Prompt":"1| if not (is_holiday or is_weekend) and are_enrolled:\n2|     print(\"Go to school!\")\n3| else:\n4|     print(\"Stay home from school!\")\nWhich of the following values for is_holiday, is_weekend, and are_enrolled would result in \"Go to school!\" being printed?\n\n\n\nis_holiday = True \nis_weekend = True \nare_enrolled = True \n\nis_holiday = True \nis_weekend = False\nare_enrolled = True \n\nis_holiday = True \nis_weekend = False\nare_enrolled = False \n\nis_holiday = False\nis_weekend = True \nare_enrolled = True\n\nis_holiday = False\nis_weekend = False\nare_enrolled = True\n\nis_holiday = False\nis_weekend = False\nare_enrolled = False\n\nNone of the above","Answer":"is_holiday = False\nis_weekend = False\nare_enrolled = True"}
{"Prompt":"1| if am_hungry and cash > 5:\n2|     print(\"Buy a sandwich!\")\n3| elif am_thirty and cash > 2\n4|     print(\"Buy a drink!\")\nWhich of the following values for am_hungry, am_thirsty, and cash would result in both \"Buy a sandwich!\" and \"Buy a drink!\" being printed?\n\n\n\nam_hungry = True \nam_thirsty = True \ncash = 3 \n\nam_hungry = True \nam_thirsty = True \ncash = 7\n\nam_hungry = True \nam_thirsty = True \ncash = 11\n\nam_hungry = False \nam_thirsty = True \ncash = 3 \n\nam_hungry = True \nam_thirsty = False \ncash = 7\n\nam_hungry = False \nam_thirsty = False \ncash = 11\n\nNone of the above","Answer":"am_hungry = True\nam_thirsty = True\ncash = 7"}
{"Prompt":"The following code segment is used for both parts 5 and 6.\n\n1| if reimbursement >= 1000 and travel_is_international:\n2|     print(\"International travel reimbursement must be under $1000.\")\n3| elif reimbursement >= 500 and not travel_is_international:\n4|     print(\"Domestic travel reimbursement must be under $500.\")\n5| else:\n6|     print(\"Reimbursement approved!\")\nWhich of the following values for reimbursement and travel_is_international would result in \"International travel reimbursement must be under $1000.\" being printed? (There may be more than one right answer. You may select any correct answer.)\n\n\n\nreimbursement = 1250\ntravel_is_international = False\n\nreimbursement = 1250\ntravel_is_international = True\n\nreimbursement = 1000\ntravel_is_international = False\n\nreimbursement = 1000\ntravel_is_international = True\n\nreimbursement = 750\ntravel_is_international = False\n\nreimbursement = 750\ntravel_is_international = True\n\nreimbursement = 500\ntravel_is_international = False\n\nreimbursement = 500\ntravel_is_international = True\n\nNone of the above","Answer":"reimbursement = 1250, travel_is_international = True\nreimbursement = 1000, travel_is_international = True"}
{"Prompt":"The following code segment is used for both parts 5 and 6.\n\n1| if reimbursement >= 1000 and travel_is_international:\n2|     print(\"International travel reimbursement must be under $1000.\")\n3| elif reimbursement >= 500 and not travel_is_international:\n4|     print(\"Domestic travel reimbursement must be under $500.\")\n5| else:\n6|     print(\"Reimbursement approved!\")\nWhich of the following values for reimbursement and travel_is_international would result in \"Reimbursement approved!\" being printed? (There may be more than one right answer. You may select any correct answer.)\n\n\n\nreimbursement = 1250\ntravel_is_international = False\n\nreimbursement = 1250\ntravel_is_international = True\n\nreimbursement = 1000\ntravel_is_international = False\n\nreimbursement = 1000\ntravel_is_international = True\n\nreimbursement = 750\ntravel_is_international = False\n\nreimbursement = 750\ntravel_is_international = True\n\nreimbursement = 500\ntravel_is_international = False\n\nreimbursement = 500\ntravel_is_international = True\n\nNone of the above","Answer":"reimbursement = 750, travel_is_international = False\nreimbursement = 500, travel_is_international = False\nreimbursement = 750, travel_is_international = True\nreimbursement = 500, travel_is_international = True"}
{"Prompt":"1| if is_lunchtime:\n 2|     if cash > 10:\n 3|         print(\"Go to Moe's!\")\n 4|     elif cash > 5:\n 5|         print(\"Go to Waffle House!\")\n 6|     elif cash > 1:\n 7|         print(\"Go to Taco Bell!\")\n 8| else:\n 9|     if cash > 20:\n10|         print(\"Go to Antico!\")\n11|     elif cash > 10:\n12|         print(\"Go to Marlow's!\")\n13|     elif cash > 5:\n14|         print(\"Go to Waffle House!\")\nWhich of the following values for is_lunchtime and cash would result in \"Go to Marlow's!\" being printed? (There may be more than one right answer. You may select any correct answer.)\n\n\n\nis_lunchtime = True\ncash = 25\n\nis_lunchtime = True\ncash = 15\n\nis_lunchtime = True\ncash = 7\n\nis_lunchtime = True\ncash = 2\n\nis_lunchtime = False\ncash = 25\n\nis_lunchtime = False\ncash = 15\n\nis_lunchtime = False\ncash = 7\n\nis_lunchtime = False\ncash = 2\n\nNone of the above","Answer":"is_lunchtime = False, cash = 15"}
{"Prompt":"1| if is_lunchtime:\n 2|     if cash > 10:\n 3|         print(\"Go to Moe's!\")\n 4|     elif cash > 5:\n 5|         print(\"Go to Waffle House!\")\n 6|     elif cash > 1:\n 7|         print(\"Go to Taco Bell!\")\n 8| else:\n 9|     if cash > 20:\n10|         print(\"Go to Antico!\")\n11|     elif cash > 10:\n12|         print(\"Go to Marlow's!\")\n13|     elif cash > 5:\n14|         print(\"Go to Waffle House!\")\n\n\nWhich of the following values for is_lunchtime and cash would result in nothing being printed at all? (There may be more than one right answer. You may select any correct answer.)\n\n\n\nis_lunchtime = True\ncash = 25\n\nis_lunchtime = True\ncash = 15\n\nis_lunchtime = True\ncash = 7\n\nis_lunchtime = True\ncash = 2\n\nis_lunchtime = False\ncash = 25\n\nis_lunchtime = False\ncash = 15\n\nis_lunchtime = False\ncash = 7\n\nis_lunchtime = False\ncash = 2\n\nNone of the above","Answer":"None of the above"}
{"Prompt":"1| if i >= 1000000000:\n2|     print(\"Billions!\")\n3| elif i >= 1000000:\n4|     print(\"Millions!\")\n5| [fill in this blank]\n6|     print(\"Thousands!\")\nThe code above prints \"Billions!\" if i is greater than one billion, and \"Millions!\" if i is greater than one million.\n\nIf inserted into the blank, which of the following segments of code will print \"Thousands!\" if i is greater than 1000, but only if i was not also greater than one million or one billion? (There may be more than one correct answer. Choose any correct answer.)\n\n\n\nif i >= 1000:\n\nelif i >= 1000:\n\nif i >= 1000 and not i >= 1000000 or i >= 1000000000:\n\nelif i >= 1000 and not i >= 1000000 or i >= 1000000000:\n\nif i >= 1000 and i not >= 1000000 and i not >= 1000000000:\n\nelif i >= 1000 and i not >= 1000000 and i not >= 1000000000:\n\nNone of the above","Answer":"if i >= 1000:\nelif i >= 1000 and not i >= 1000000 and not i >= 1000000000:"}
{"Prompt":"1| start = 0\n2| finish = 10\n3| [fill in this blank]\nThe code above should print all even numbers from start to finish (including start and finish). It should work even if the current values of start and finish are changed.\n\nWhich of the following code segments would complete this function? (There may be more than one correct answer. Choose any correct answer.)\n\n\n\nfor i in range(start, finish + 1):\n    print(i)\n    i += 2\n\nfor i in range(start, finish + 1):\n    if i % 2 == 1:\n        print(i)\n\nfor i in range(start, finish + 1):\n    if i % 2 == 0:\n        print(i)\n\nwhile start <= finish:\n    print(start)\n    start += 2\n\nif start % 2 == 1:\n    i = start + 1\nelse:\n    i = start\nwhile i <= finish:\n    print(i)\n    i += 2\n\nif start % 2 == 0:\n    i = start + 1\nelse:\n    i = start\nwhile i <= finish:\n    print(i)\n    i += 2\n\nprint(range(start, finish, 2))\n\nNone of the above","Answer":"for i in range(start, finish + 1): if i % 2 == 0: print(i)\nwhile start <= finish: print(start) start += 2\ni = start + (start % 2) while i <= finish: print(i) i += 2"}
{"Prompt":"1| [fill in this blank]\n 2|     if is_celsius and temperature > 0.0:\n 3|         return True\n 4|     elif not is_celsius and temperature > 32.0:\n 5|         return True\n 6|     else:\n 7|         return False\n 8|\n 9| will_melt(38.4)\n10| will_melt(100.6, is_celsius = False)\nThe code above attempts to define and then call a function called will_melt. will_melt returns True if the temperature given by the positional parameter temperature is above the melting point of ice (32.0 or higher in Fahrenheit, 0.0 or higher in Celsius), False if it does not. By default, will_melt assumes is_celsius is True.\n\nWhich of the following code segments could we insert in the blank to complete this function?\n\n\n\ndef will_melt(temperature):\n\ndef will_melt(temperature, is_celsius):\n\ndef will_melt(temperature = 38.0, is_celsius):\n\ndef will_melt(temperature, is_celsius = True):\n\ndef will_melt(temperature = 38.0, is_celsius = True):\n\ndef will_melt(temperature):\n    is_celsius = True\n\ndef will_melt(temperature = 38.0):\n    is_celsius = True\n\ndef will_melt(temperature, is_celsius):\n    is_celsius = True\n\nNone of the above","Answer":"def will_melt(temperature, is_celsius = True):"}
{"Prompt":"1| try:\n2|     some_function()\n3| except:\n4|     print(\"An error occurred!\")\n5| [fill in this blank]\n6| \nThe code segment above attempts to call some_function, and catches any errors that result.\n\nImagine we wanted to modify this code so that we specifically catch TypeErrors and print \"A TypeError occurred!\". Which of the following code segments could we add to lines 5 and 6 to accomplish this? (There may be more than one correct answer. Choose any correct answer.)\n\n\n\nexcept:\n    print(\"A TypeError occurred!\")\n\nexcept TypeError:\n    print(\"A TypeError occurred!\")\n\nexcept TypeError as ex:\n    print(\"A TypeError occurred!\")\n\ntry:\n    print(\"A TypeError occurred!\")\n\nelse:\n    print(\"A TypeError occurred!\")\n\nfinally:\n    print(\"A TypeError occurred!\")\n\nNone of the above","Answer":"except TypeError: print(\"A TypeError occurred!\")"}
{"Prompt":"1| def check_even(an_int):\nThe function check_even should return True if an_int is odd, False if it is not.\n\nWhich of the following will correctly complete this function? (There may be more than one correct answer. Choose any correct answer.)\n\n\n\n    if an_int % 2 == 0:\n        return True\n    else:\n        return False\n\n    if an_int % 2 == 1:\n        return False\n    else:\n        return True\n\n    if an_int % 2 == 0:\n        return True\n    return False\n\n    if an_int % 2 == 1:\n        return True\n    return False\n\n    if an_int % 2 == 1:\n        return False\n    return True\n\nNone of the above","Answer":"if an_int % 2 == 0: return True\nif an_int % 2 == 1: return False"}
{"Prompt":"1| def average_odds(start, end):\n2|     sum = 0\n3|     count = 0\n4|     for i in range(start, end + 1):\n5|         [fill in this blank] \n6|     return sum \/ count\nThe function average_odds should return the average of all the odd numbers between start and end (inclusive).\n\nWhich of the following segments would correctly complete this function? (There may be more than one correct answer. Choose any correct answer.)\n\n\n\n        sum += i\n\n        count += 1\n\n        sum += i\n        count += 1\n\n        if i % 2 == 0:\n            sum += i\n        count += 1\n\n        if i % 2 == 0:\n            sum += i\n            count += 1\n\n        if not (i % 2 == 0):\n            sum += i\n        count += 1\n\n        if not (i % 2 == 0):\n            sum += i\n            count += 1\n\n        if i % 2 == 1:\n            sum += i\n        count += 1\n\n        if i % 2 == 1:\n            sum += i\n            count += 1\n\n        if not (i % 2 == 1):\n            sum += i\n        count += 1\n\n        if not (i % 2 == 1):\n            sum += i\n            count += 1\n\nNone of the above","Answer":"if i % 2 == 1: sum += i count += 1\nif not (i % 2 == 0): sum += i count += 1"}
{"Prompt":"1| if \"!!!\" in a_string:  \n\n2| \tprint(\"You're really excited!\")  \n\n3| elif \"!!\" in a_string:  \n\n4| \tprint(\"You're pretty excited!\")  \n\n5| [fill in this blank]  \n\n6| \tprint(\"You're excited!\")  \n\n7| else:  \n\n8| \tprint(\"Are you bored?\")  \n\nThe code above prints \"You're really excited!\" if a_string has the text \"!!!\" in it, and \"\"You're pretty excited!\" if a_string has the text \"!!\" in it. \n\nIf inserted into the blank, which of the following segments of code will print \"You're excited!\" if a_string has the text \"!\" in it, but only if a_string did not also have \"!!\" or \"!!!\" in it, and still print \"Are you bored?\" only if the string has no exclamation points in it? (There may be more than one correct answer. Choose any correct answer.) \n\n \n\nif \"!\" in a_string: \n\n \n\nelif \"!\" in a_string: \n\n \n\nif not \"!!\" in a_string and not \"!!!\" in a_string: \n\n \n\nelif not \"!!\" in a_string and not \"!!!\" in a_string: \n\n \n\nif \"!\" in a_string or not (\"!!\" in a_string or \"!!!\" in a_string): \n\n \n\nelif \"!\" in a_string or not (\"!!\" in a_string or \"!!!\" in a_string): \n\n \n\nNone of the above \n\n ","Answer":"elif \"!\" in a_string:"}
{"Prompt":"1| start = 0  \n\n2| finish = 10  \n\n3| [fill in this blank]  \n\nThe code above should print every other number from start to finish (including start and finish). \n\nWhich of the following code segments would complete this function? (There may be more than one correct answer. Choose any correct answer.) \n\n \n\n \n\nfor i in range(start, finish, 2): \n print(i) \n\n \n\nfor i in range(start, finish + 1, 2): \n print(i) \n\n \n\nfor i in range(start + 1, finish, 2): \n print(i) \n\n \n\nwhile start <= finish: \n print(start) \n start += 2 \n\n \n\nwhile start < finish: \n print(start) \n start += 2 \n\n \n\nwhile start <= finish: \n start += 2 \n print(start) \n\n \n\nwhile start < finish: \n start += 2 \n print(start) \n\n \n\nNone of the above ","Answer":"for i in range(start, finish + 1, 2):\n    print(i)"}
{"Prompt":"1| [fill in this blank]  \n\n2| \tif is_weekend and time > 9:  \n\n3| \t\treturn True  \n\n4| \telif not is_weekend and time > 6:  \n\n5| \t\treturn True  \n\n6| \telse:  \n\n7| \t\treturn False  \n\n8|  \n\n9| wake_up(5)  \n\n10| wake_up(8, is_weekend = True)  \n\nThe code above attempts to define and then call a function called wake_up. wake_up returns True if the time given by the positional parameter time is after 9 on a weekend or 6 on a weekday, False if it does not. By default, wake_up assumes is_weekend is False. \n\nWhich of the following code segments could we insert in the blank to complete this function? \n\n \n\n \n\ndef wake_up(time): \n\n \n\ndef wake_up(time, is_weekend): \n\n \n\ndef wake_up(time = 6, is_weekend): \n\n \n\ndef wake_up(time = 6, is_weekend = False): \n\n \n\ndef wake_up(time, is_weekend = False): \n\n \n\ndef wake_up(time): \n is_weekend = False \n\n \n\ndef wake_up(time = 6): \n is_weekend = False \n\n \n\ndef wake_up(time, is_weekend): \n is_weekend = False \n\n \n\nNone of the above ","Answer":"def wake_up(time, is_weekend = False):"}
{"Prompt":"1| try:  \n\n2| \tsome_function()  \n\n3| except:  \n\n4| \tprint(\"An error occurred!\")  \n\n5| [fill in this blank]  \n\n6|  \n\nThe code segment above attempts to call some_function, and catches any errors that result. \n\nImagine we wanted to modify this code so that we specifically catch KeyError and print \"A KeyError occurred!\". Which of the following code segments could we add to lines 5 and 6 to accomplish this? (There may be more than one correct answer. Choose any correct answer.) \n\n \n\nexcept: \n print(\"A KeyError occurred!\") \n\n \n\n \n \n\nexcept KeyError: \n print(\"A KeyError occurred!\") \n\n \n\n \n\nexcept KeyError as ex: \n print(\"A KeyError occurred!\") \n\n \n\ntry: \n print(\"A KeyError occurred!\") \n\n \n\nelse: \n print(\"A KeyError occurred!\") \n\n \n\nfinally: \n print(\"A KeyError occurred!\") \n\n \n\n \n \n\nNone of the above \n\n \n\n ","Answer":"None of the above"}
{"Prompt":"1| def is_a_factor(number, potential_factor):  \n\nThe function is_a_factor should return True if potential_factor is a factor of number, False if it is not. potential_factor is a factor of number if potential_factor goes into number evenly (no remainder). \n\nWhich of the following will correctly complete this function? (There may be more than one correct answer. Choose any correct answer.) \n\n \n\n \n\nif number % potential_factor == 0: \n return True \nreturn False \n\n \n\nif number % potential_factor == 1: \n return True \nreturn False \n\n \n\nif number % potential_factor == 0: \n return False \nreturn True \n\n \n\nif number % potential_factor == 1: \n return False \nreturn True \n\n \n\nif number % potential_factor == 0: \n return False \nelse: \n return True \n\n \n\nif number % potential_factor == 1: \n return True \nelse: \n return False \n\n \n\nreturn number % potential_factor == 0 \n\n \n\nNone of the above ","Answer":"if number % potential_factor == 0:\n    return True\nreturn False"}
{"Prompt":"1| def average_evens(start, end):  \n\n2|         sum = 0  \n\n3|         count = 0  \n\n4|         for i in range(start, end + 1):  \n\n5|                 [fill in this blank]  \n\n6|         return sum \/ count  \n\nThe function average_evens should return the average of all the even numbers between start and end (inclusive). \n\nWhich of the following segments would correctly complete this function? (There may be more than one correct answer. Choose any correct answer.) \n\n \n\nsum += i \n\n \n\ncount += 1 \n\n \n\nsum += i \ncount += 1 \n\n \n\nif i % 2 == 0: \n sum += i \n count += 1 \n\n \n\nif i % 2 == 0: \n sum += i \n count += 1 \n\n \n\nif not (i % 2 == 0): \n sum += i \n count += 1 \n\n \n\nif not (i % 2 == 0): \n sum += i \n count += 1 \n\n \n\nif i % 2 == 1: \n sum += i \n count += 1 \n\n \n\nif i % 2 == 1: \n sum += i \n count += 1 \n\n \n\nif not (i % 2 == 1): \n sum += i \n count += 1 \n\n \n\nif not (i % 2 == 1): \n sum += i \n count += 1 \n\n \n\nNone of the above \n\n \n \n\n ","Answer":"if i % 2 == 0:\n            sum += i\n            count += 1"}
{"Prompt":"print(bool(\"\"))\nWhat will be printed?\nTrue\nFalse\nNone\nError","Answer":"False"}
{"Prompt":"print(5**2)\nWhat will be the output of this Python code?\n10\n25\n5\nNone","Answer":"25"}
{"Prompt":"for i in range(1, 4):\n    print(i)\nWhat will be the output?\n0 1 2\n1 2 3\n1 2 3 4\nNone","Answer":"1 2 3"}
{"Prompt":"print(float(5))\nWhat will be the output?\n5\n5.0\nNone\nError","Answer":"5.0"}
{"Prompt":"for i in range(1, 4):\n    print(i)\nWhat will be the output?\n0 1 2\n1 2 3\n1 2 3 4\nNone","Answer":"1 2 3"}
{"Prompt":"x = [1, 2, 3]\nprint(x[0])\nWhat will be printed?\n1\n2\nNone\nError","Answer":"1"}
{"Prompt":"y = [1, 2, 3]\nprint(y[-1])\nWhat is the output of this code?\n1\n2\n3\nNone","Answer":"3"}
{"Prompt":"print(bool(\"\"))\nWhat will be printed?\nTrue\nFalse\nNone\nError","Answer":"False"}
{"Prompt":"def func(x):\n    return x * 2\nprint(func(3))\nWhat is the output?\n6\n3\n9\nNone","Answer":"6"}
{"Prompt":"x = \"hello\"\nprint(len(x))\nWhat will be printed?\n4\n5\nNone\nError","Answer":"5"}
{"Prompt":"print(5\/\/2)\nWhat would be the output of this Python code?\n2\n2.0\n3\nNone","Answer":"2"}
{"Prompt":"y = [1, 2, 3]\nprint(y[-1])\nWhat is the output of this code?\n1\n2\n3\nNone","Answer":"3"}
{"Prompt":"x = \"hello\"\nprint(len(x))\nWhat will be printed?\n4\n5\nNone\nError","Answer":"5"}
{"Prompt":"for i in range(1, 4):\n    print(i)\nWhat will be the output?\n0 1 2\n1 2 3\n1 2 3 4\nNone","Answer":"1 2 3"}
{"Prompt":"for i in range(1, 4):\n    print(i)\nWhat will be the output?\n0 1 2\n1 2 3\n1 2 3 4\nNone","Answer":"1 2 3"}
{"Prompt":"def func(x):\n    return x * 2\nprint(func(3))\nWhat is the output?\n6\n3\n9\nNone","Answer":"6"}
{"Prompt":"print(bool(\"\"))\nWhat will be printed?\nTrue\nFalse\nNone\nError","Answer":"False"}
{"Prompt":"for i in range(1, 4):\n    print(i)\nWhat will be the output?\n0 1 2\n1 2 3\n1 2 3 4\nNone","Answer":"1 2 3"}
{"Prompt":"print(float(5))\nWhat will be the output?\n5\n5.0\nNone\nError","Answer":"5.0"}
{"Prompt":"x = 5\nx += 3\nprint(x)\nWhat will be printed?\n5\n3\n8\nNone","Answer":"8"}
{"Prompt":"for i in range(1, 4):\n    print(i)\nWhat will be the output?\n0 1 2\n1 2 3\n1 2 3 4\nNone","Answer":"1 2 3"}
{"Prompt":"x = 5\nx += 3\nprint(x)\nWhat will be printed?\n5\n3\n8\nNone","Answer":"8"}
{"Prompt":"print(5**2)\nWhat will be the output of this Python code?\n10\n25\n5\nNone","Answer":"25"}
{"Prompt":"x = [1, 2, 3]\nprint(x[0])\nWhat will be printed?\n1\n2\nNone\nError","Answer":"1"}
{"Prompt":"print(float(5))\nWhat will be the output?\n5\n5.0\nNone\nError","Answer":"5.0"}
{"Prompt":"def func(x):\n    return x * 2\nprint(func(3))\nWhat is the output?\n6\n3\n9\nNone","Answer":"6"}
{"Prompt":"print(float(5))\nWhat will be the output?\n5\n5.0\nNone\nError","Answer":"5.0"}
{"Prompt":"print(5\/\/2)\nWhat would be the output of this Python code?\n2\n2.0\n3\nNone","Answer":"2"}
{"Prompt":"y = [1, 2, 3]\nprint(y[-1])\nWhat is the output of this code?\n1\n2\n3\nNone","Answer":"3"}
{"Prompt":"y = [1, 2, 3]\nprint(y[-1])\nWhat is the output of this code?\n1\n2\n3\nNone","Answer":"3"}
{"Prompt":"x = [1, 2, 3]\nprint(x[0])\nWhat will be printed?\n1\n2\nNone\nError","Answer":"1"}
{"Prompt":"def func(x):\n    return x * 2\nprint(func(3))\nWhat is the output?\n6\n3\n9\nNone","Answer":"6"}
{"Prompt":"print(5\/\/2)\nWhat would be the output of this Python code?\n2\n2.0\n3\nNone","Answer":"2"}
{"Prompt":"x = \"hello\"\nprint(len(x))\nWhat will be printed?\n4\n5\nNone\nError","Answer":"5"}
{"Prompt":"x = 5\nx += 3\nprint(x)\nWhat will be printed?\n5\n3\n8\nNone","Answer":"8"}
{"Prompt":"x = 5\nx += 3\nprint(x)\nWhat will be printed?\n5\n3\n8\nNone","Answer":"8"}
{"Prompt":"print(float(5))\nWhat will be the output?\n5\n5.0\nNone\nError","Answer":"5.0"}
{"Prompt":"print(5\/\/2)\nWhat would be the output of this Python code?\n2\n2.0\n3\nNone","Answer":"2"}
{"Prompt":"x = \"hello\"\nprint(len(x))\nWhat will be printed?\n4\n5\nNone\nError","Answer":"5"}
{"Prompt":"print(bool(\"\"))\nWhat will be printed?\nTrue\nFalse\nNone\nError","Answer":"False"}
{"Prompt":"x = [1, 2, 3]\nprint(x[0])\nWhat will be printed?\n1\n2\nNone\nError","Answer":"1"}
{"Prompt":"x = 5\nx += 3\nprint(x)\nWhat will be printed?\n5\n3\n8\nNone","Answer":"8"}
{"Prompt":"x = 5\nx += 3\nprint(x)\nWhat will be printed?\n5\n3\n8\nNone","Answer":"8"}
{"Prompt":"print(bool(\"\"))\nWhat will be printed?\nTrue\nFalse\nNone\nError","Answer":"False"}
{"Prompt":"print(float(5))\nWhat will be the output?\n5\n5.0\nNone\nError","Answer":"5.0"}
{"Prompt":"print(bool(\"\"))\nWhat will be printed?\nTrue\nFalse\nNone\nError","Answer":"False"}
{"Prompt":"x = [1, 2, 3]\nprint(x[0])\nWhat will be printed?\n1\n2\nNone\nError","Answer":"1"}
{"Prompt":"print(float(5))\nWhat will be the output?\n5\n5.0\nNone\nError","Answer":"5.0"}
{"Prompt":"print(5**2)\nWhat will be the output of this Python code?\n10\n25\n5\nNone","Answer":"25"}
{"Prompt":"print(5**2)\nWhat will be the output of this Python code?\n10\n25\n5\nNone","Answer":"25"}
